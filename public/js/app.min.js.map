{"version":3,"sources":["hterm_all.js","httpty.js"],"names":["lib","Error","runtimeDependencies_","initCallbacks_","rtdep","var_args","source","ex","stackArray","stack","split","length","replace","i","arguments","path","Array","apply","ary","this","push","ensureRuntimeDependencies_","passed","sourceList","names","obj","window","self","console","warn","registerInit","name","callback","init","onInit","opt_logFunction","initNext","rec","shift","f","alarm","setTimeout","colors","re_","hex16","hex24","rgb","RegExp","rgba","rgbx","x11rgb","rgbToX11","value","scale","v","Math","min","toString","match","x11ToCSS","splice","arrayToRGBA","map","parseInt","substr","round","nameToRGB","hexToRGB","arg","convert","hex","re","rgbToHex","crackRGB","zpad","normalizeCSS","def","test","alpha","setAlpha","mix","base","tint","percent","ary1","ary2","diff","color","error","colorNames","toLowerCase","stockColorPalette","colorPalette","aliceblue","antiquewhite","antiquewhite1","antiquewhite2","antiquewhite3","antiquewhite4","aquamarine","aquamarine1","aquamarine2","aquamarine3","aquamarine4","azure","azure1","azure2","azure3","azure4","beige","bisque","bisque1","bisque2","bisque3","bisque4","black","blanchedalmond","blue","blue1","blue2","blue3","blue4","blueviolet","brown","brown1","brown2","brown3","brown4","burlywood","burlywood1","burlywood2","burlywood3","burlywood4","cadetblue","cadetblue1","cadetblue2","cadetblue3","cadetblue4","chartreuse","chartreuse1","chartreuse2","chartreuse3","chartreuse4","chocolate","chocolate1","chocolate2","chocolate3","chocolate4","coral","coral1","coral2","coral3","coral4","cornflowerblue","cornsilk","cornsilk1","cornsilk2","cornsilk3","cornsilk4","cyan","cyan1","cyan2","cyan3","cyan4","darkblue","darkcyan","darkgoldenrod","darkgoldenrod1","darkgoldenrod2","darkgoldenrod3","darkgoldenrod4","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkolivegreen1","darkolivegreen2","darkolivegreen3","darkolivegreen4","darkorange","darkorange1","darkorange2","darkorange3","darkorange4","darkorchid","darkorchid1","darkorchid2","darkorchid3","darkorchid4","darkred","darksalmon","darkseagreen","darkseagreen1","darkseagreen2","darkseagreen3","darkseagreen4","darkslateblue","darkslategray","darkslategray1","darkslategray2","darkslategray3","darkslategray4","darkslategrey","darkturquoise","darkviolet","debianred","deeppink","deeppink1","deeppink2","deeppink3","deeppink4","deepskyblue","deepskyblue1","deepskyblue2","deepskyblue3","deepskyblue4","dimgray","dimgrey","dodgerblue","dodgerblue1","dodgerblue2","dodgerblue3","dodgerblue4","firebrick","firebrick1","firebrick2","firebrick3","firebrick4","floralwhite","forestgreen","gainsboro","ghostwhite","gold","gold1","gold2","gold3","gold4","goldenrod","goldenrod1","goldenrod2","goldenrod3","goldenrod4","gray","gray0","gray1","gray10","gray100","gray11","gray12","gray13","gray14","gray15","gray16","gray17","gray18","gray19","gray2","gray20","gray21","gray22","gray23","gray24","gray25","gray26","gray27","gray28","gray29","gray3","gray30","gray31","gray32","gray33","gray34","gray35","gray36","gray37","gray38","gray39","gray4","gray40","gray41","gray42","gray43","gray44","gray45","gray46","gray47","gray48","gray49","gray5","gray50","gray51","gray52","gray53","gray54","gray55","gray56","gray57","gray58","gray59","gray6","gray60","gray61","gray62","gray63","gray64","gray65","gray66","gray67","gray68","gray69","gray7","gray70","gray71","gray72","gray73","gray74","gray75","gray76","gray77","gray78","gray79","gray8","gray80","gray81","gray82","gray83","gray84","gray85","gray86","gray87","gray88","gray89","gray9","gray90","gray91","gray92","gray93","gray94","gray95","gray96","gray97","gray98","gray99","green","green1","green2","green3","green4","greenyellow","grey","grey0","grey1","grey10","grey100","grey11","grey12","grey13","grey14","grey15","grey16","grey17","grey18","grey19","grey2","grey20","grey21","grey22","grey23","grey24","grey25","grey26","grey27","grey28","grey29","grey3","grey30","grey31","grey32","grey33","grey34","grey35","grey36","grey37","grey38","grey39","grey4","grey40","grey41","grey42","grey43","grey44","grey45","grey46","grey47","grey48","grey49","grey5","grey50","grey51","grey52","grey53","grey54","grey55","grey56","grey57","grey58","grey59","grey6","grey60","grey61","grey62","grey63","grey64","grey65","grey66","grey67","grey68","grey69","grey7","grey70","grey71","grey72","grey73","grey74","grey75","grey76","grey77","grey78","grey79","grey8","grey80","grey81","grey82","grey83","grey84","grey85","grey86","grey87","grey88","grey89","grey9","grey90","grey91","grey92","grey93","grey94","grey95","grey96","grey97","grey98","grey99","honeydew","honeydew1","honeydew2","honeydew3","honeydew4","hotpink","hotpink1","hotpink2","hotpink3","hotpink4","indianred","indianred1","indianred2","indianred3","indianred4","ivory","ivory1","ivory2","ivory3","ivory4","khaki","khaki1","khaki2","khaki3","khaki4","lavender","lavenderblush","lavenderblush1","lavenderblush2","lavenderblush3","lavenderblush4","lawngreen","lemonchiffon","lemonchiffon1","lemonchiffon2","lemonchiffon3","lemonchiffon4","lightblue","lightblue1","lightblue2","lightblue3","lightblue4","lightcoral","lightcyan","lightcyan1","lightcyan2","lightcyan3","lightcyan4","lightgoldenrod","lightgoldenrod1","lightgoldenrod2","lightgoldenrod3","lightgoldenrod4","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightpink1","lightpink2","lightpink3","lightpink4","lightsalmon","lightsalmon1","lightsalmon2","lightsalmon3","lightsalmon4","lightseagreen","lightskyblue","lightskyblue1","lightskyblue2","lightskyblue3","lightskyblue4","lightslateblue","lightslategray","lightslategrey","lightsteelblue","lightsteelblue1","lightsteelblue2","lightsteelblue3","lightsteelblue4","lightyellow","lightyellow1","lightyellow2","lightyellow3","lightyellow4","limegreen","linen","magenta","magenta1","magenta2","magenta3","magenta4","maroon","maroon1","maroon2","maroon3","maroon4","mediumaquamarine","mediumblue","mediumorchid","mediumorchid1","mediumorchid2","mediumorchid3","mediumorchid4","mediumpurple","mediumpurple1","mediumpurple2","mediumpurple3","mediumpurple4","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","mistyrose1","mistyrose2","mistyrose3","mistyrose4","moccasin","navajowhite","navajowhite1","navajowhite2","navajowhite3","navajowhite4","navy","navyblue","oldlace","olivedrab","olivedrab1","olivedrab2","olivedrab3","olivedrab4","orange","orange1","orange2","orange3","orange4","orangered","orangered1","orangered2","orangered3","orangered4","orchid","orchid1","orchid2","orchid3","orchid4","palegoldenrod","palegreen","palegreen1","palegreen2","palegreen3","palegreen4","paleturquoise","paleturquoise1","paleturquoise2","paleturquoise3","paleturquoise4","palevioletred","palevioletred1","palevioletred2","palevioletred3","palevioletred4","papayawhip","peachpuff","peachpuff1","peachpuff2","peachpuff3","peachpuff4","peru","pink","pink1","pink2","pink3","pink4","plum","plum1","plum2","plum3","plum4","powderblue","purple","purple1","purple2","purple3","purple4","red","red1","red2","red3","red4","rosybrown","rosybrown1","rosybrown2","rosybrown3","rosybrown4","royalblue","royalblue1","royalblue2","royalblue3","royalblue4","saddlebrown","salmon","salmon1","salmon2","salmon3","salmon4","sandybrown","seagreen","seagreen1","seagreen2","seagreen3","seagreen4","seashell","seashell1","seashell2","seashell3","seashell4","sienna","sienna1","sienna2","sienna3","sienna4","skyblue","skyblue1","skyblue2","skyblue3","skyblue4","slateblue","slateblue1","slateblue2","slateblue3","slateblue4","slategray","slategray1","slategray2","slategray3","slategray4","slategrey","snow","snow1","snow2","snow3","snow4","springgreen","springgreen1","springgreen2","springgreen3","springgreen4","steelblue","steelblue1","steelblue2","steelblue3","steelblue4","tan","tan1","tan2","tan3","tan4","thistle","thistle1","thistle2","thistle3","thistle4","tomato","tomato1","tomato2","tomato3","tomato4","turquoise","turquoise1","turquoise2","turquoise3","turquoise4","violet","violetred","violetred1","violetred2","violetred3","violetred4","wheat","wheat1","wheat2","wheat3","wheat4","white","whitesmoke","yellow","yellow1","yellow2","yellow3","yellow4","yellowgreen","replaceVars","str","vars","fn","varname","rv","functions","encodeURI","encodeURIComponent","escapeHTML","<",">","&","\"","'","m","getAcceptLanguages","chrome","i18n","navigator","language","parseQuery","queryString","pairs","pair","decodeURIComponent","getURL","runtime","clamp","max","lpad","opt_ch","String","number","getWhitespace","whitespace","opt_ms","timeout","wrapperGenerator","ms","getStack","log","clearTimeout","opt_ignoreFrames","ignoreFrames","stackObject","smartFloorDivide","numerator","denominator","val","ceiling","ceil","floor","MessageManager","languages","languages_","el","indexOf","unshift","messages","prototype","addMessages","defs","key","placeholders","message","content","findAndLoadMessages","pattern","onComplete","concat","loaded","failed","onLanguageComplete","state","tryNextLanguage","loadMessages","replaceReferences","bind","url","onSuccess","opt_onError","xhr","XMLHttpRequest","onloadend","status","JSON","parse","responseText","open","send","msg","args","index","get","msgname","opt_args","opt_default","getMessage","processI18nAttributes","dom","nodes","querySelectorAll","node","getAttribute","tagName","id","toUpperCase","textContent","setAttribute","PreferenceManager","storage","opt_prefix","storageObserver_","onStorageChange_","isActive_","activate","trace","prefix","prefRecords_","globalObservers_","childFactories_","childLists_","DEFAULT_VALUE","Record","defaultValue","currentValue","observers","addObserver","observer","removeObserver","stringify","deactivate","readStorage","opt_callback","pendingChildren","onChildComplete","keys","Object","getItems","items","prefixLength","needSync","syncChildList","definePreference","opt_onChange","record","changeDefault","definePreferences","defaults","defineChildren","listName","childFactory","onChildListChange_","addObservers","global","notifyAll","notifyChange_","createChild","opt_hint","opt_id","ids","random","childManager","resetAll","set","removeChild","getChild","childList","diffChildLists","a","b","added","removed","common","onChildStorage","currentIds","oldIds","managerIndex","reset","removeItem","changed","removeItems","forEach","newValue","changeDefaults","oldValue","setItem","exportAsJson","childIds","json","importFromJson","childPrefManager","lastIndexOf","resource","resources_","add","type","data","opt_defaultValue","getData","getDataUrl","Storage","Chrome","storage_","observers_","onChanged","addListener","onChanged_","changes","areaname","clear","getItem","setItems","remove","Local","localStorage","addEventListener","onStorage_","e","storageArea","prevValue","curValue","o","Memory","TestManager","opt_log","Log","createTestRun","opt_cx","TestRun","onTestRunComplete","testRun","logFunction_","s","pending_","prefix_","prefixStack_","pushPrefix","join","popPrefix","pop","print","println","flush","Suite","suiteName","ctor","testManager","cx","testManager_","setup","addTest","disableTest","getTest","getTestList","testList_","testMap_","__proto__","subclasses","testName","testFunction","Test","fullName","setDefaults","k","preamble","result","postamble","suiteClass","testFunction_","run","suite","Result","TestComplete","completeTest_","FAILED","failures","passes","startDate","duration","currentResult","maxFailures","panic","testQueue_","ALL_TESTS","selectTest","selectSuite","opt_pattern","selectCount","testList","j","selectPattern","onUncaughtException_","file","line","expectedErrorMessage_","when","PENDING","onTestRunComplete_","opt_skipTimeout","Date","msToSeconds_","summarize","onerror","onResultComplete","currentSuite","PASSED","runNextTest_","onResultReComplete","lateStatus","toFixed","timeout_","expectErrorMessage","onTimeout_","requestTime","opt_throw","assertEQ","actual","expected","opt_name","format","fail","getCallerLocation_","assert","frameIndex","opt_message","pass","UTF8Decoder","bytesLeft","codePoint","lowerBound","decode","ret","c","charCodeAt","charAt","fromCharCode","decodeUTF8","utf8","encodeUTF8","d","wc","nulWidth","controlWidth","regardCjkAmbiguous","cjkAmbiguousWidth","combining","ambiguous","isSpace","ucs","mid","isCjkAmbiguous","charWidth","charWidthRegardAmbiguous","charWidthDisregardAmbiguous","strWidth","width","start","opt_width","startIndex","endIndex","undefined","substring","end","hterm","HttPty","opts","term","ws","elementId","socketUrl","protocolPrefix","location","protocol","host","windowType","zoomWarningMessage","notifyCopyMessage","desktopNotificationTitle","testDeps","onWindow","defaultStorage","userAgent","version","sync","isPackagedApp","getManifest","manifest","app","background","tabs","getCurrent","tab","windows","windowId","getClientSize","getBoundingClientRect","getClientWidth","getClientHeight","height","copySelectionToClipboard","document","execCommand","firefoxException","pasteFromClipboard","Size","resize","clone","setTo","that","equals","RowCol","row","column","opt_overflow","overflow","move","Frame","terminal","opt_options","terminal_","div_","options","iframe_","container_","messageChannel_","onMessage_","sendTerminalInfo_","port1","onmessage","onMessage","onLoad","onLoad_","MessageChannel","contentWindow","postMessage","argv","messagePort","port2","acceptLanguages","foregroundColor","getForegroundColor","backgroundColor","getBackgroundColor","cursorColor","getCursorColor","fontSize","getFontSize","fontFamily","getFontFamily","baseURL","onCloseClicked_","close","parentNode","onClose","show","opt","divSize","document_","container","createElement","style","cssText","header","appendChild","iframe","onload","Keyboard","keyboardElement_","handlers_","onBlur_","onKeyDown_","onKeyPress_","onKeyUp_","onTextInput_","keyMap","KeyMap","altGrMode","shiftInsertPaste","homeKeysScroll","pageKeysScroll","ctrlPlusMinusZeroZoom","ctrlCCopy","ctrlVPaste","applicationKeypad","applicationCursor","backspaceSendsBackspace","characterEncoding","metaSendsEscape","passMetaV","altSendsWhat","altIsMeta","altBackspaceIsMetaBackspace","altKeyPressed","mediaKeysAreFKeys","previousAltSendsWhat_","KeyActions","CANCEL","DEFAULT","PASS","STRIP","encode","vt","installKeyboard","element","handler","removeEventListener","uninstallKeyboard","onVTKeystroke","lowerKey","which","ctrlKey","metaKey","altKey","charCode","ch","keyCode","shiftKey","preventDefault","stopPropagation","preventChromeAppNonShiftDefault_","keyDef","keyDefs","action","resolvedActionType","control","alt","meta","isPrintable","keyCap","keyboard","getAction","normal","maskShiftKey","mod","code","addKeyDef","addKeyDefs","resolve","ac","bs","sh","ctl","med","SS3","CSI","onKeyInsert_","onKeyHome_","altey","scrollHome","onKeyEnd_","scrollEnd","onKeyPageUp_","scrollPageUp","onKeyDel_","onKeyPageDown_","scrollPageDown","onClear_","wipeContents","onCtrlNum_","passCtrlNumber","onAltNum_","passAltNumber","onMetaNum_","passMetaNumber","onCtrlC_","selection","getDocument","getSelection","isCollapsed","clearSelectionAfterCopy","collapseToEnd","prefs_","showOverlay","onCtrlN_","href","innerWidth","innerHeight","onCtrlV_","onMetaN_","outerWidth","outerHeight","onMetaC_","onMetaV_","onPlusMinusZero_","getZoomFactor","cap","setFontSize","size","Options","opt_copy","wraparound","reverseWraparound","originMode","autoCarriageReturn","cursorVisible","cursorBlink","insertMode","reverseVideo","bracketedPaste","profileId","call","defaultPreferences","alt-gr-mode","alt-backspace-is-meta-backspace","alt-is-meta","alt-sends-what","audible-bell-sound","desktop-notification-bell","background-color","background-image","background-size","background-position","backspace-sends-backspace","character-map-overrides","close-on-exit","cursor-blink","cursor-blink-cycle","cursor-color","color-palette-overrides","copy-on-select","use-default-window-copy","clear-selection-after-copy","ctrl-plus-minus-zero-zoom","ctrl-c-copy","ctrl-v-paste","east-asian-ambiguous-as-two-column","enable-8-bit-control","enable-bold","enable-bold-as-bright","enable-clipboard-notice","enable-clipboard-write","enable-dec12","environment","TERM","font-family","font-size","font-smoothing","foreground-color","home-keys-scroll","max-string-sequence","media-keys-are-fkeys","meta-sends-escape","mouse-paste-button","page-keys-scroll","pass-alt-number","pass-ctrl-number","pass-meta-number","pass-meta-v","receive-encoding","scroll-on-keystroke","scroll-on-output","scrollbar-visible","scroll-wheel-move-multiplier","send-encoding","shift-insert-paste","user-css","PubSub","addBehavior","pubsub","subscribe","subject","unsubscribe","list","publish","opt_lastCallback","notifyList","Screen","opt_columnCount","rowsArray","columnCount_","textAttributes","TextAttributes","cursorPosition","cursorRowNode_","cursorNode_","cursorOffset_","getSize","getHeight","getWidth","setColumnCount","count","setCursorPosition","shiftRow","shiftRows","unshiftRow","unshiftRows","rows","popRow","popRows","pushRow","pushRows","insertRow","insertRows","removeRow","removeRows","invalidateCursorPosition","clearCursorRow","text","innerHTML","removeAttribute","isDefault","inverse","syncColors","createContainer","commitLineOverflow","rowNode","firstChild","ownerDocument","createTextNode","currentColumn","offset","nodeWidth","nextSibling","syncSelectionCaret","collapse","firefoxIgnoredException","splitNode_","afterNode","cloneNode","nodeSubstr","insertBefore","maybeClipCurrentRow","insertString","cursorNode","cursorNodeText","reverseOffset","underline","strikethrough","wcNode","tileData","nodeType","tileNode","textDecoration","wsNode","matchesContainer","previousSibling","newNode","overwriteString","maxLength","deleteChars","currentCursorColumn","startLength","endLength","spaceNode","nextNode","emptyNode","getLineStartRow_","hasAttribute","getLineText_","rowText","getXRowAncestor_","nodeName","getPositionWithOverflow_","ancestorRow","position","getPositionWithinRow_","childNodes","currentNode","getNodeAndOffsetWithOverflow_","getNodeAndOffsetWithinRow_","nodeTextWidth","setRange_","range","startNodeAndOffset","endNodeAndOffset","setStart","setEnd","expandSelection","getRangeAt","startContainer","startPosition","startOffset","endPosition","endContainer","endOffset","insideMatch","lineUpToRange","leftRegularExpression","expandedStart","search","lineFromRange","rightRegularExpression","found","expandedEnd","addRange","ScrollPort","rowProvider","rowProvider_","characterSize","ruler_","Selection","currentRowNodeCache_","previousRowNodeCache_","lastScreenWidth_","lastScreenHeight_","selectionEnabled_","lastRowCount_","scrollWheelMultiplier_","isScrolledEnd","xrowCssRule_","currentScrollbarWidthPx","timeouts_","DEBUG_","scrollPort","scrollPort_","startRow","endRow","isMultiline","findFirstChild","parent","childAry","anchorFirst","anchorRow","startNode","anchorNode","anchorOffset","focusRow","endNode","focusNode","focusOffset","focusFirst","rowIndex","firstNode","decorate","div","src","onResize_","doc","contentDocument","body","head","styleSheets","cssRules","display","userCssLink_","screen_","onScroll_","onScrollWheel_","onCopy_","onPaste_","onBodyKeyDown_","rowNodes_","topSelectBag_","bottomSelectBag_","topFold_","bottomFold_","scrollArea_","svg_","createElementNS","pasteTarget_","contentEditable","handlePasteTargetTextInput_","setFontFamily","opt_smoothing","webkitFontSmoothing","syncCharacterSize","setUserCss","focus","setForegroundColor","setBackgroundColor","setBackgroundImage","image","backgroundImage","setBackgroundSize","backgroundSize","setBackgroundPosition","backgroundPosition","setCtrlVPaste","getScreenSize","getScreenWidth","getScreenHeight","getScreenNode","resetCache","setRowProvider","scheduleRedraw","invalidate","parentElement","topRowIndex","getTopRowIndex","bottomRowIndex","getBottomRowIndex","drawVisibleRows_","scheduleInvalidate","px","measureCharacterSize","opt_weight","rulerSpan_","rulerBaseline_","fontWeight","rulerSize","baseline","offsetTop","zoomFactor","currentScale","lineHeight","paddingTop","paddingBottom","clientWidth","syncScrollHeight","syncRowNodesDimensions_","scrollRowToBottom","getRowCount","screenSize","visibleRowCount","visibleRowsHeight","visibleRowTopMargin","visibleRowBottomMargin","marginBottom","topFoldOffset","left","offsetLeft","top","redraw","redraw_","resetSelectBags_","drawTopFold_","drawBottomFold_","lastChild","removeUntilNode","targetNode","deadNode","selectionStartRow","selectionEndRow","bottomFold","targetDrawCount","drawCount","fetchRowNode_","cacheRowNode_","getRowNode","selectAll","firstRow","lastRow","lastRowIndex","extend","getScrollMax_","scrollRowToTop","scrollTop","scrollMax","onScrollWheel","defaultPrevented","delta","detail","wheelDeltaY","onCopy","endBackfillIndex","startBackfillIndex","getRowsText","setScrollbarVisible","overflowY","setScrollWheelMoveMultipler","multiplier","Terminal","opt_profileId","profileId_","primaryScreen_","alternateScreen_","scrollbackRows_","tabStops_","defaultTabStops","vtScrollTop_","vtScrollBottom_","cursorShape_","cursorShape","BLOCK","cursorColor_","cursorBlinkCycle_","myOnCursorBlink_","onCursorBlink_","backgroundColor_","foregroundColor_","scrollOnOutput_","scrollOnKeystroke_","reportMouseEvents_","bellAudio_","bellNotificationList_","desktopNotificationBell_","savedOptions_","options_","VT","io","IO","enableMouseDragScroll","copyOnSelect","mousePasteButton","useDefaultWindowCopy","realizeSize_","setDefaultTabStops","setProfile","onTerminalReady","BEAM","UNDERLINE","tabWidth","Notification","permission","glmap","CharacterMap","maps","received","setCursorBlink","setCursorColor","isNaN","resetColorPalette","enable8BitControl","syncBoldSafeState","enableBoldAsBright","enableClipboardWrite","enableDec12","syncFontFamily","maxStringSequence","syncMousePasteButton","getPrefs","setBracketedPaste","borderColor","setSelectionEnabled","runCommandClass","commandClass","argString","command","onExit","isPrimaryScreen","wcCssRule_","button","enableBold","normalSize","boldSize","isBoldSafe","saveCursor","getTextAttributes","setTextAttributes","setWindowTitle","title","restoreCursor","cursor","clearCursorOverflow","setCursorShape","shape","restyleCursor_","getCursorShape","setWidth","columnCount","scheduleSyncCursorPosition_","setHeight","rowCount","realizeWidth_","realizeHeight_","onTerminalResize_","deltaColumns","deltaRows","getRowText","scrollbackCount","appendRows_","setVTScrollRegion","screen","bottom","renumberRows_","clearHome","syncCursorPosition_","clearAllTabStops","softReset","setCursorVisible","forwardTabStop","setCursorColumn","backwardTabStop","setTabStop","clearTabStopAtCursor","opt_start","w","interpret","oncontextmenu","onMouse","onMouse_","screenNode","onFocusChange_","className","scrollBlockerNode_","event","setReverseVideo","screenIndex","cursorRow","extraRows","scheduleScrollDown_","setAbsoluteCursorPosition","moveRows_","fromIndex","toIndex","opt_screen","newLine","didOverflow","tokens","splitWidecharString","scrollBottom","getVTScrollTop","getVTScrollBottom","cursorAtEndOfScreen","vtScrollUp","lineFeed","formFeed","reverseLineFeed","currentRow","insertLines","setAbsoluteCursorRow","eraseToLeft","eraseToRight","opt_count","maxCount","DEFAULT_COLOR","eraseLine","eraseAbove","eraseBelow","fill","col","moveCount","deleteLines","moveStart","insertSpace","deleted","vtScrollDown","setRelativeCursorPosition","getCursorColumn","getCursorRow","scheduleRedraw_","scrollDown","cursorUp","cursorDown","minHeight","maxHeight","cursorLeft","newRow","newColumn","cursorRight","ringBell","bellSquelchTimeout_","play","bellSequelchTimeout_","hasFocus","n","onclick","closeBellNotifications_","setOriginMode","setInsertMode","setAutoCarriageReturn","setWraparound","setReverseWraparound","setAlternateMode","opacity","cursorRowIndex","borderBottomStyle","borderLeftStyle","syncCursor","showZoomWarning_","zoomWarningNode_","opt_timeout","overlayNode_","overlaySize","overlayTimeout_","paste","copyStringToClipboard","copySource","selectAllChildren","getSelectionText","string","processedByTerminalHandler_","terminalRow","clientY","terminalColumn","clientX","mouseReport","MOUSE_REPORT_DISABLED","engaged","focused","sendString","isNewSize","previousIO_","createFrame","setTerminalProfile","profileName","keyboardCaptured_","onTerminalResize","writeUTF8","writelnUTF8","writeUTF16","writelnUTF16","foregroundSource","SRC_DEFAULT","backgroundSource","foreground","defaultForeground","defaultBackground","bold","faint","italic","blink","invisible","SRC_RGB","setDocument","opt_textContent","span","fontStyle","colorToMakeFaint","containersMatch","obj1","obj2","containerIsDefault","style1","style2","nodeSubstring","onTerminalMouse_","parseState_","ParseState","parseUnknown_","leadingModifier_","trailingModifier_","allowColumnWidthChanges_","oscTimeLimit_","cc1","CC1","cc1Pattern_","utf8Decoder_","warnUnimplemented","G0","G1","G2","G3","GL","GR","savedState_","CursorState","MOUSE_REPORT_CLICK","MOUSE_REPORT_DRAG","defaultFunction","opt_buf","buf","pos","func","resetParseFunction","resetBuf","resetArguments","opt_arg_zero","iarg","argnum","advance","peekRemainingBuf","peekChar","consumeChar","isComplete","vt_","save","restore","response","x","y","parseState","nextControl","dispatch","parseCSI_","parseUntilStringTerminator_","abortReason","nextTerminator","ignore","setANSIMode","setDECMode","scrollOnOutput","scrollOnKeystroke","ESC","OSC","VT52","parseESC","parseOSC","pairCount","responseArray","pairNumber","colorIndex","colorValue","atob","get256","getTrueColor","attrs","trueColor","glkeys","glre","grmap","glkey","grkey","grkeys","grre","`","g","h","l","p","q","r","t","u","z","{","|","}","~","#","@","[","\\","]","^","_","MSG","DATA","ERROR","ID","ALERT","RESIZE","_createWebSocket","getElementById","input","_sendData","output","WebSocket","onopen","_initTerminal","_sendResize","err","onclose","_sendMessage"],"mappings":"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,MAAA,eACAC,OAAA,kBACAC,QAAA,qBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,MAAA,eACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,MAAA,eACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,OAAA,kBACAC,MAAA,kBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,MAAA,kBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,MAAA,kBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,MAAA,kBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,MAAA,kBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,MAAA,kBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,MA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","file":"app.min.js","sourcesContent":["// This file was generated by libdot/bin/concat.sh.\n// It has been marked read-only for your safety.  Rather\n// than edit it directly, please modify one of these source\n// files...\n//\n// libdot/js/lib.js\n// libdot/js/lib_colors.js\n// libdot/js/lib_f.js\n// libdot/js/lib_message_manager.js\n// libdot/js/lib_preference_manager.js\n// libdot/js/lib_resource.js\n// libdot/js/lib_storage.js\n// libdot/js/lib_storage_chrome.js\n// libdot/js/lib_storage_local.js\n// libdot/js/lib_storage_memory.js\n// libdot/js/lib_test_manager.js\n// libdot/js/lib_utf8.js\n// libdot/js/lib_wc.js\n// hterm/js/hterm.js\n// hterm/js/hterm_frame.js\n// hterm/js/hterm_keyboard.js\n// hterm/js/hterm_keyboard_keymap.js\n// hterm/js/hterm_options.js\n// hterm/js/hterm_preference_manager.js\n// hterm/js/hterm_pubsub.js\n// hterm/js/hterm_screen.js\n// hterm/js/hterm_scrollport.js\n// hterm/js/hterm_terminal.js\n// hterm/js/hterm_terminal_io.js\n// hterm/js/hterm_text_attributes.js\n// hterm/js/hterm_vt.js\n// hterm/js/hterm_vt_character_map.js\n//\n\n// SOURCE FILE: libdot/js/lib.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found at https://chromium.googlesource.com/apps/libapps/+/master/hterm/LICENSE\n\n'use strict';\n\nif (typeof lib != 'undefined')\n  throw new Error('Global \"lib\" object already exists.');\n\nvar lib = {};\n\n/**\n * Map of \"dependency\" to [\"source\", ...].\n *\n * Each dependency is a object name, like \"lib.fs\", \"source\" is the url that\n * depdends on the object.\n */\nlib.runtimeDependencies_ = {};\n\n/**\n * List of functions that need to be invoked during library initialization.\n *\n * Each element in the initCallbacks_ array is itself a two-element array.\n * Element 0 is a short string describing the owner of the init routine, useful\n * for debugging.  Element 1 is the callback function.\n */\nlib.initCallbacks_ = [];\n\n/**\n * Records a runtime dependency.\n *\n * This can be useful when you want to express a run-time dependency at\n * compile time.  It is not intended to be a full-fledged library system or\n * dependency tracker.  It's just there to make it possible to debug the\n * deps without running all the code.\n *\n * Object names are specified as strings.  For example...\n *\n *     lib.rtdep('lib.colors', 'lib.PreferenceManager');\n *\n * Object names need not be rooted by 'lib'.  You may use this to declare a\n * dependency on any object.\n *\n * The client program may call lib.ensureRuntimeDependencies() at startup in\n * order to ensure that all runtime dependencies have been met.\n *\n * @param {string} var_args One or more objects specified as strings.\n */\nlib.rtdep = function(var_args) {\n  var source;\n\n  try {\n    throw new Error();\n  } catch (ex) {\n    var stackArray = ex.stack.split('\\n');\n    // In Safari, the resulting stackArray will only have 2 elements and the\n    // individual strings are formatted differently.\n    if (stackArray.length >= 3) {\n      source = stackArray[2].replace(/^\\s*at\\s+/, '');\n    } else {\n      source = stackArray[1].replace(/^\\s*global code@/, '');\n    }\n  }\n\n  for (var i = 0; i < arguments.length; i++) {\n    var path = arguments[i];\n    if (path instanceof Array) {\n      lib.rtdep.apply(lib, path);\n    } else {\n      var ary = this.runtimeDependencies_[path];\n      if (!ary)\n        ary = this.runtimeDependencies_[path] = [];\n      ary.push(source);\n    }\n  }\n};\n\n/**\n * Ensures that all runtime dependencies are met, or an exception is thrown.\n *\n * Every unmet runtime dependency will be logged to the JS console.  If at\n * least one dependency is unmet this will raise an exception.\n */\nlib.ensureRuntimeDependencies_ = function() {\n  var passed = true;\n\n  for (var path in lib.runtimeDependencies_) {\n    var sourceList = lib.runtimeDependencies_[path];\n    var names = path.split('.');\n\n    // In a document context 'window' is the global object.  In a worker it's\n    // called 'self'.\n    var obj = (window || self);\n    for (var i = 0; i < names.length; i++) {\n      if (!(names[i] in obj)) {\n        console.warn('Missing \"' + path + '\" is needed by', sourceList);\n        passed = false;\n        break;\n      }\n\n      obj = obj[names[i]];\n    }\n  }\n\n  if (!passed)\n    throw new Error('Failed runtime dependency check');\n};\n\n/**\n * Register an initialization function.\n *\n * The initialization functions are invoked in registration order when\n * lib.init() is invoked.  Each function will receive a single parameter, which\n * is a function to be invoked when it completes its part of the initialization.\n *\n * @param {string} name A short descriptive name of the init routine useful for\n *     debugging.\n * @param {function(function)} callback The initialization function to register.\n * @return {function} The callback parameter.\n */\nlib.registerInit = function(name, callback) {\n  lib.initCallbacks_.push([name, callback]);\n  return callback;\n};\n\n/**\n * Initialize the library.\n *\n * This will ensure that all registered runtime dependencies are met, and\n * invoke any registered initialization functions.\n *\n * Initialization is asynchronous.  The library is not ready for use until\n * the onInit function is invoked.\n *\n * @param {function()} onInit The function to invoke when initialization is\n *     complete.\n * @param {function(*)} opt_logFunction An optional function to send\n *     initialization related log messages to.\n */\nlib.init = function(onInit, opt_logFunction) {\n  var ary = lib.initCallbacks_;\n\n  var initNext = function() {\n    if (ary.length) {\n      var rec = ary.shift();\n      if (opt_logFunction)\n        opt_logFunction('init: ' + rec[0]);\n      rec[1](lib.f.alarm(initNext));\n    } else {\n      onInit();\n    }\n  };\n\n  if (typeof onInit != 'function')\n    throw new Error('Missing or invalid argument: onInit');\n\n  lib.ensureRuntimeDependencies_();\n\n  setTimeout(initNext, 0);\n};\n// SOURCE FILE: libdot/js/lib_colors.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * Namespace for color utilities.\n */\nlib.colors = {};\n\n/**\n * First, some canned regular expressions we're going to use in this file.\n *\n *\n *                              BRACE YOURSELF\n *\n *                                 ,~~~~.\n *                                 |>_< ~~\n *                                3`---'-/.\n *                                3:::::\\v\\\n *                               =o=:::::\\,\\\n *                                | :::::\\,,\\\n *\n *                        THE REGULAR EXPRESSIONS\n *                               ARE COMING.\n *\n * There's no way to break long RE literals in JavaScript.  Fix that why don't\n * you?  Oh, and also there's no way to write a string that doesn't interpret\n * escapes.\n *\n * Instead, we stoop to this .replace() trick.\n */\nlib.colors.re_ = {\n  // CSS hex color, #RGB.\n  hex16: /#([a-f0-9])([a-f0-9])([a-f0-9])/i,\n\n  // CSS hex color, #RRGGBB.\n  hex24: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/i,\n\n  // CSS rgb color, rgb(rrr,ggg,bbb).\n  rgb: new RegExp(\n      ('^/s*rgb/s*/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,' +\n       '/s*(/d{1,3})/s*/)/s*$'\n       ).replace(/\\//g, '\\\\'), 'i'),\n\n  // CSS rgb color, rgb(rrr,ggg,bbb,aaa).\n  rgba: new RegExp(\n      ('^/s*rgba/s*' +\n       '/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*' +\n       '(?:,/s*(/d+(?:/./d+)?)/s*)/)/s*$'\n       ).replace(/\\//g, '\\\\'), 'i'),\n\n  // Either RGB or RGBA.\n  rgbx: new RegExp(\n      ('^/s*rgba?/s*' +\n       '/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*' +\n       '(?:,/s*(/d+(?:/./d+)?)/s*)?/)/s*$'\n       ).replace(/\\//g, '\\\\'), 'i'),\n\n  // An X11 \"rgb:ddd/ddd/ddd\" value.\n  x11rgb: /^\\s*rgb:([a-f0-9]{1,4})\\/([a-f0-9]{1,4})\\/([a-f0-9]{1,4})\\s*$/i,\n\n  // English color name.\n  name: /[a-z][a-z0-9\\s]+/,\n};\n\n/**\n * Convert a CSS rgb(ddd,ddd,ddd) color value into an X11 color value.\n *\n * Other CSS color values are ignored to ensure sanitary data handling.\n *\n * Each 'ddd' component is a one byte value specified in decimal.\n *\n * @param {string} value The CSS color value to convert.\n * @return {string} The X11 color value or null if the value could not be\n *     converted.\n */\nlib.colors.rgbToX11 = function(value) {\n  function scale(v) {\n    v = (Math.min(v, 255) * 257).toString(16);\n    while (v.length < 4)\n      v = '0' + v;\n\n    return v;\n  }\n\n  var ary = value.match(lib.colors.re_.rgbx);\n  if (!ary)\n    return null;\n\n  return 'rgb:' + scale(ary[1]) + '/' + scale(ary[2]) + '/' + scale(ary[3]);\n};\n\n/**\n * Convert an X11 color value into an CSS rgb(...) color value.\n *\n * The X11 value may be an X11 color name, or an RGB value of the form\n * rgb:hhhh/hhhh/hhhh.  If a component value is less than 4 digits it is\n * padded out to 4, then scaled down to fit in a single byte.\n *\n * @param {string} value The X11 color value to convert.\n * @return {string} The CSS color value or null if the value could not be\n *     converted.\n */\nlib.colors.x11ToCSS = function(v) {\n  function scale(v) {\n    // Pad out values with less than four digits.  This padding (probably)\n    // matches xterm.  It's difficult to say for sure since xterm seems to\n    // arrive at a padded value and then perform some combination of\n    // gamma correction, color space tranformation, and quantization.\n\n    if (v.length == 1) {\n      // Single digits pad out to four by repeating the character.  \"f\" becomes\n      // \"ffff\".  Scaling down a hex value of this pattern by 257 is the same\n      // as cutting off one byte.  We skip the middle step and just double\n      // the character.\n      return parseInt(v + v, 16);\n    }\n\n    if (v.length == 2) {\n      // Similar deal here.  X11 pads two digit values by repeating the\n      // byte (or scale up by 257).  Since we're going to scale it back\n      // down anyway, we can just return the original value.\n      return parseInt(v, 16);\n    }\n\n    if (v.length == 3) {\n      // Three digit values seem to be padded by repeating the final digit.\n      // e.g. 10f becomes 10ff.\n      v = v + v.substr(2);\n    }\n\n    // Scale down the 2 byte value.\n    return Math.round(parseInt(v, 16) / 257);\n  }\n\n  var ary = v.match(lib.colors.re_.x11rgb);\n  if (!ary)\n    return lib.colors.nameToRGB(v);\n\n  ary.splice(0, 1);\n  return lib.colors.arrayToRGBA(ary.map(scale));\n};\n\n/**\n * Converts one or more CSS '#RRGGBB' color values into their rgb(...)\n * form.\n *\n * Arrays are converted in place. If a value cannot be converted, it is\n * replaced with null.\n *\n * @param {string|Array.<string>} A single RGB value or array of RGB values to\n *     convert.\n * @return {string|Array.<string>} The converted value or values.\n */\nlib.colors.hexToRGB = function(arg) {\n  function convert(hex) {\n    var re = (hex.length == 4) ?\n        lib.colors.re_.hex16 : lib.colors.re_.hex24;\n    var ary = hex.match(re)\n    if (!ary)\n      return null;\n\n    return 'rgb(' + parseInt(ary[1], 16) + ', ' +\n        parseInt(ary[2], 16) + ', ' +\n        parseInt(ary[3], 16) + ')';\n  }\n\n  if (arg instanceof Array) {\n    for (var i = 0; i < arg.length; i++) {\n      arg[i] = convert(arg[i]);\n    }\n  } else {\n    arg = convert(arg);\n  }\n\n  return arg;\n};\n\n/**\n * Converts one or more CSS rgb(...) forms into their '#RRGGBB' color values.\n *\n * If given an rgba(...) form, the alpha field is thrown away.\n *\n * Arrays are converted in place. If a value cannot be converted, it is\n * replaced with null.\n *\n * @param {string|Array.<string>} A single rgb(...) value or array of rgb(...)\n *     values to convert.\n * @return {string|Array.<string>} The converted value or values.\n */\nlib.colors.rgbToHex = function(arg) {\n  function convert(rgb) {\n    var ary = lib.colors.crackRGB(rgb);\n    return '#' + lib.f.zpad(((parseInt(ary[0]) << 16) |\n                             (parseInt(ary[1]) <<  8) |\n                             (parseInt(ary[2]) <<  0)).toString(16), 6);\n  }\n\n  if (arg instanceof Array) {\n    for (var i = 0; i < arg.length; i++) {\n      arg[i] = convert(arg[i]);\n    }\n  } else {\n    arg = convert(arg);\n  }\n\n  return arg;\n};\n\n/**\n * Take any valid css color definition and turn it into an rgb or rgba value.\n *\n * Returns null if the value could not be normalized.\n */\nlib.colors.normalizeCSS = function(def) {\n  if (def.substr(0, 1) == '#')\n    return lib.colors.hexToRGB(def);\n\n  if (lib.colors.re_.rgbx.test(def))\n    return def;\n\n  return lib.colors.nameToRGB(def);\n};\n\n/**\n * Convert a 3 or 4 element array into an rgba(...) string.\n */\nlib.colors.arrayToRGBA = function(ary) {\n  var alpha = (ary.length > 3) ? ary[3] : 1;\n  return 'rgba(' + ary[0] + ', ' + ary[1] + ', ' + ary[2] + ', ' + alpha + ')';\n};\n\n/**\n * Overwrite the alpha channel of an rgb/rgba color.\n */\nlib.colors.setAlpha = function(rgb, alpha) {\n  var ary = lib.colors.crackRGB(rgb);\n  ary[3] = alpha;\n  return lib.colors.arrayToRGBA(ary);\n};\n\n/**\n * Mix a percentage of a tint color into a base color.\n */\nlib.colors.mix = function(base, tint, percent) {\n  var ary1 = lib.colors.crackRGB(base);\n  var ary2 = lib.colors.crackRGB(tint);\n\n  for (var i = 0; i < 4; ++i) {\n    var diff = ary2[i] - ary1[i];\n    ary1[i] = Math.round(parseInt(ary1[i]) + diff * percent);\n  }\n\n  return lib.colors.arrayToRGBA(ary1);\n};\n\n/**\n * Split an rgb/rgba color into an array of its components.\n *\n * On success, a 4 element array will be returned.  For rgb values, the alpha\n * will be set to 1.\n */\nlib.colors.crackRGB = function(color) {\n  if (color.substr(0, 4) == 'rgba') {\n    var ary = color.match(lib.colors.re_.rgba);\n    if (ary) {\n      ary.shift();\n      return ary;\n    }\n  } else {\n    var ary = color.match(lib.colors.re_.rgb);\n    if (ary) {\n      ary.shift();\n      ary.push(1);\n      return ary;\n    }\n  }\n\n  console.error('Couldn\\'t crack: ' + color);\n  return null;\n};\n\n/**\n * Convert an X11 color name into a CSS rgb(...) value.\n *\n * Names are stripped of spaces and converted to lowercase.  If the name is\n * unknown, null is returned.\n *\n * This list of color name to RGB mapping is derived from the stock X11\n * rgb.txt file.\n *\n * @param {string} name The color name to convert.\n * @return {string} The corresponding CSS rgb(...) value.\n */\nlib.colors.nameToRGB = function(name) {\n  if (name in lib.colors.colorNames)\n    return lib.colors.colorNames[name];\n\n  name = name.toLowerCase();\n  if (name in lib.colors.colorNames)\n    return lib.colors.colorNames[name];\n\n  name = name.replace(/\\s+/g, '');\n  if (name in lib.colors.colorNames)\n    return lib.colors.colorNames[name];\n\n  return null;\n};\n\n/**\n * The stock color palette.\n */\nlib.colors.stockColorPalette = lib.colors.hexToRGB\n  ([// The \"ANSI 16\"...\n    '#000000', '#CC0000', '#4E9A06', '#C4A000',\n    '#3465A4', '#75507B', '#06989A', '#D3D7CF',\n    '#555753', '#EF2929', '#00BA13', '#FCE94F',\n    '#729FCF', '#F200CB', '#00B5BD', '#EEEEEC',\n\n    // The 6x6 color cubes...\n    '#000000', '#00005F', '#000087', '#0000AF', '#0000D7', '#0000FF',\n    '#005F00', '#005F5F', '#005F87', '#005FAF', '#005FD7', '#005FFF',\n    '#008700', '#00875F', '#008787', '#0087AF', '#0087D7', '#0087FF',\n    '#00AF00', '#00AF5F', '#00AF87', '#00AFAF', '#00AFD7', '#00AFFF',\n    '#00D700', '#00D75F', '#00D787', '#00D7AF', '#00D7D7', '#00D7FF',\n    '#00FF00', '#00FF5F', '#00FF87', '#00FFAF', '#00FFD7', '#00FFFF',\n\n    '#5F0000', '#5F005F', '#5F0087', '#5F00AF', '#5F00D7', '#5F00FF',\n    '#5F5F00', '#5F5F5F', '#5F5F87', '#5F5FAF', '#5F5FD7', '#5F5FFF',\n    '#5F8700', '#5F875F', '#5F8787', '#5F87AF', '#5F87D7', '#5F87FF',\n    '#5FAF00', '#5FAF5F', '#5FAF87', '#5FAFAF', '#5FAFD7', '#5FAFFF',\n    '#5FD700', '#5FD75F', '#5FD787', '#5FD7AF', '#5FD7D7', '#5FD7FF',\n    '#5FFF00', '#5FFF5F', '#5FFF87', '#5FFFAF', '#5FFFD7', '#5FFFFF',\n\n    '#870000', '#87005F', '#870087', '#8700AF', '#8700D7', '#8700FF',\n    '#875F00', '#875F5F', '#875F87', '#875FAF', '#875FD7', '#875FFF',\n    '#878700', '#87875F', '#878787', '#8787AF', '#8787D7', '#8787FF',\n    '#87AF00', '#87AF5F', '#87AF87', '#87AFAF', '#87AFD7', '#87AFFF',\n    '#87D700', '#87D75F', '#87D787', '#87D7AF', '#87D7D7', '#87D7FF',\n    '#87FF00', '#87FF5F', '#87FF87', '#87FFAF', '#87FFD7', '#87FFFF',\n\n    '#AF0000', '#AF005F', '#AF0087', '#AF00AF', '#AF00D7', '#AF00FF',\n    '#AF5F00', '#AF5F5F', '#AF5F87', '#AF5FAF', '#AF5FD7', '#AF5FFF',\n    '#AF8700', '#AF875F', '#AF8787', '#AF87AF', '#AF87D7', '#AF87FF',\n    '#AFAF00', '#AFAF5F', '#AFAF87', '#AFAFAF', '#AFAFD7', '#AFAFFF',\n    '#AFD700', '#AFD75F', '#AFD787', '#AFD7AF', '#AFD7D7', '#AFD7FF',\n    '#AFFF00', '#AFFF5F', '#AFFF87', '#AFFFAF', '#AFFFD7', '#AFFFFF',\n\n    '#D70000', '#D7005F', '#D70087', '#D700AF', '#D700D7', '#D700FF',\n    '#D75F00', '#D75F5F', '#D75F87', '#D75FAF', '#D75FD7', '#D75FFF',\n    '#D78700', '#D7875F', '#D78787', '#D787AF', '#D787D7', '#D787FF',\n    '#D7AF00', '#D7AF5F', '#D7AF87', '#D7AFAF', '#D7AFD7', '#D7AFFF',\n    '#D7D700', '#D7D75F', '#D7D787', '#D7D7AF', '#D7D7D7', '#D7D7FF',\n    '#D7FF00', '#D7FF5F', '#D7FF87', '#D7FFAF', '#D7FFD7', '#D7FFFF',\n\n    '#FF0000', '#FF005F', '#FF0087', '#FF00AF', '#FF00D7', '#FF00FF',\n    '#FF5F00', '#FF5F5F', '#FF5F87', '#FF5FAF', '#FF5FD7', '#FF5FFF',\n    '#FF8700', '#FF875F', '#FF8787', '#FF87AF', '#FF87D7', '#FF87FF',\n    '#FFAF00', '#FFAF5F', '#FFAF87', '#FFAFAF', '#FFAFD7', '#FFAFFF',\n    '#FFD700', '#FFD75F', '#FFD787', '#FFD7AF', '#FFD7D7', '#FFD7FF',\n    '#FFFF00', '#FFFF5F', '#FFFF87', '#FFFFAF', '#FFFFD7', '#FFFFFF',\n\n    // The greyscale ramp...\n    '#080808', '#121212', '#1C1C1C', '#262626', '#303030', '#3A3A3A',\n    '#444444', '#4E4E4E', '#585858', '#626262', '#6C6C6C', '#767676',\n    '#808080', '#8A8A8A', '#949494', '#9E9E9E', '#A8A8A8', '#B2B2B2',\n    '#BCBCBC', '#C6C6C6', '#D0D0D0', '#DADADA', '#E4E4E4', '#EEEEEE'\n   ]);\n\n/**\n * The current color palette, possibly with user changes.\n */\nlib.colors.colorPalette = lib.colors.stockColorPalette;\n\n/**\n * Named colors according to the stock X11 rgb.txt file.\n */\nlib.colors.colorNames = {\n  \"aliceblue\": \"rgb(240, 248, 255)\",\n  \"antiquewhite\": \"rgb(250, 235, 215)\",\n  \"antiquewhite1\": \"rgb(255, 239, 219)\",\n  \"antiquewhite2\": \"rgb(238, 223, 204)\",\n  \"antiquewhite3\": \"rgb(205, 192, 176)\",\n  \"antiquewhite4\": \"rgb(139, 131, 120)\",\n  \"aquamarine\": \"rgb(127, 255, 212)\",\n  \"aquamarine1\": \"rgb(127, 255, 212)\",\n  \"aquamarine2\": \"rgb(118, 238, 198)\",\n  \"aquamarine3\": \"rgb(102, 205, 170)\",\n  \"aquamarine4\": \"rgb(69, 139, 116)\",\n  \"azure\": \"rgb(240, 255, 255)\",\n  \"azure1\": \"rgb(240, 255, 255)\",\n  \"azure2\": \"rgb(224, 238, 238)\",\n  \"azure3\": \"rgb(193, 205, 205)\",\n  \"azure4\": \"rgb(131, 139, 139)\",\n  \"beige\": \"rgb(245, 245, 220)\",\n  \"bisque\": \"rgb(255, 228, 196)\",\n  \"bisque1\": \"rgb(255, 228, 196)\",\n  \"bisque2\": \"rgb(238, 213, 183)\",\n  \"bisque3\": \"rgb(205, 183, 158)\",\n  \"bisque4\": \"rgb(139, 125, 107)\",\n  \"black\": \"rgb(0, 0, 0)\",\n  \"blanchedalmond\": \"rgb(255, 235, 205)\",\n  \"blue\": \"rgb(0, 0, 255)\",\n  \"blue1\": \"rgb(0, 0, 255)\",\n  \"blue2\": \"rgb(0, 0, 238)\",\n  \"blue3\": \"rgb(0, 0, 205)\",\n  \"blue4\": \"rgb(0, 0, 139)\",\n  \"blueviolet\": \"rgb(138, 43, 226)\",\n  \"brown\": \"rgb(165, 42, 42)\",\n  \"brown1\": \"rgb(255, 64, 64)\",\n  \"brown2\": \"rgb(238, 59, 59)\",\n  \"brown3\": \"rgb(205, 51, 51)\",\n  \"brown4\": \"rgb(139, 35, 35)\",\n  \"burlywood\": \"rgb(222, 184, 135)\",\n  \"burlywood1\": \"rgb(255, 211, 155)\",\n  \"burlywood2\": \"rgb(238, 197, 145)\",\n  \"burlywood3\": \"rgb(205, 170, 125)\",\n  \"burlywood4\": \"rgb(139, 115, 85)\",\n  \"cadetblue\": \"rgb(95, 158, 160)\",\n  \"cadetblue1\": \"rgb(152, 245, 255)\",\n  \"cadetblue2\": \"rgb(142, 229, 238)\",\n  \"cadetblue3\": \"rgb(122, 197, 205)\",\n  \"cadetblue4\": \"rgb(83, 134, 139)\",\n  \"chartreuse\": \"rgb(127, 255, 0)\",\n  \"chartreuse1\": \"rgb(127, 255, 0)\",\n  \"chartreuse2\": \"rgb(118, 238, 0)\",\n  \"chartreuse3\": \"rgb(102, 205, 0)\",\n  \"chartreuse4\": \"rgb(69, 139, 0)\",\n  \"chocolate\": \"rgb(210, 105, 30)\",\n  \"chocolate1\": \"rgb(255, 127, 36)\",\n  \"chocolate2\": \"rgb(238, 118, 33)\",\n  \"chocolate3\": \"rgb(205, 102, 29)\",\n  \"chocolate4\": \"rgb(139, 69, 19)\",\n  \"coral\": \"rgb(255, 127, 80)\",\n  \"coral1\": \"rgb(255, 114, 86)\",\n  \"coral2\": \"rgb(238, 106, 80)\",\n  \"coral3\": \"rgb(205, 91, 69)\",\n  \"coral4\": \"rgb(139, 62, 47)\",\n  \"cornflowerblue\": \"rgb(100, 149, 237)\",\n  \"cornsilk\": \"rgb(255, 248, 220)\",\n  \"cornsilk1\": \"rgb(255, 248, 220)\",\n  \"cornsilk2\": \"rgb(238, 232, 205)\",\n  \"cornsilk3\": \"rgb(205, 200, 177)\",\n  \"cornsilk4\": \"rgb(139, 136, 120)\",\n  \"cyan\": \"rgb(0, 255, 255)\",\n  \"cyan1\": \"rgb(0, 255, 255)\",\n  \"cyan2\": \"rgb(0, 238, 238)\",\n  \"cyan3\": \"rgb(0, 205, 205)\",\n  \"cyan4\": \"rgb(0, 139, 139)\",\n  \"darkblue\": \"rgb(0, 0, 139)\",\n  \"darkcyan\": \"rgb(0, 139, 139)\",\n  \"darkgoldenrod\": \"rgb(184, 134, 11)\",\n  \"darkgoldenrod1\": \"rgb(255, 185, 15)\",\n  \"darkgoldenrod2\": \"rgb(238, 173, 14)\",\n  \"darkgoldenrod3\": \"rgb(205, 149, 12)\",\n  \"darkgoldenrod4\": \"rgb(139, 101, 8)\",\n  \"darkgray\": \"rgb(169, 169, 169)\",\n  \"darkgreen\": \"rgb(0, 100, 0)\",\n  \"darkgrey\": \"rgb(169, 169, 169)\",\n  \"darkkhaki\": \"rgb(189, 183, 107)\",\n  \"darkmagenta\": \"rgb(139, 0, 139)\",\n  \"darkolivegreen\": \"rgb(85, 107, 47)\",\n  \"darkolivegreen1\": \"rgb(202, 255, 112)\",\n  \"darkolivegreen2\": \"rgb(188, 238, 104)\",\n  \"darkolivegreen3\": \"rgb(162, 205, 90)\",\n  \"darkolivegreen4\": \"rgb(110, 139, 61)\",\n  \"darkorange\": \"rgb(255, 140, 0)\",\n  \"darkorange1\": \"rgb(255, 127, 0)\",\n  \"darkorange2\": \"rgb(238, 118, 0)\",\n  \"darkorange3\": \"rgb(205, 102, 0)\",\n  \"darkorange4\": \"rgb(139, 69, 0)\",\n  \"darkorchid\": \"rgb(153, 50, 204)\",\n  \"darkorchid1\": \"rgb(191, 62, 255)\",\n  \"darkorchid2\": \"rgb(178, 58, 238)\",\n  \"darkorchid3\": \"rgb(154, 50, 205)\",\n  \"darkorchid4\": \"rgb(104, 34, 139)\",\n  \"darkred\": \"rgb(139, 0, 0)\",\n  \"darksalmon\": \"rgb(233, 150, 122)\",\n  \"darkseagreen\": \"rgb(143, 188, 143)\",\n  \"darkseagreen1\": \"rgb(193, 255, 193)\",\n  \"darkseagreen2\": \"rgb(180, 238, 180)\",\n  \"darkseagreen3\": \"rgb(155, 205, 155)\",\n  \"darkseagreen4\": \"rgb(105, 139, 105)\",\n  \"darkslateblue\": \"rgb(72, 61, 139)\",\n  \"darkslategray\": \"rgb(47, 79, 79)\",\n  \"darkslategray1\": \"rgb(151, 255, 255)\",\n  \"darkslategray2\": \"rgb(141, 238, 238)\",\n  \"darkslategray3\": \"rgb(121, 205, 205)\",\n  \"darkslategray4\": \"rgb(82, 139, 139)\",\n  \"darkslategrey\": \"rgb(47, 79, 79)\",\n  \"darkturquoise\": \"rgb(0, 206, 209)\",\n  \"darkviolet\": \"rgb(148, 0, 211)\",\n  \"debianred\": \"rgb(215, 7, 81)\",\n  \"deeppink\": \"rgb(255, 20, 147)\",\n  \"deeppink1\": \"rgb(255, 20, 147)\",\n  \"deeppink2\": \"rgb(238, 18, 137)\",\n  \"deeppink3\": \"rgb(205, 16, 118)\",\n  \"deeppink4\": \"rgb(139, 10, 80)\",\n  \"deepskyblue\": \"rgb(0, 191, 255)\",\n  \"deepskyblue1\": \"rgb(0, 191, 255)\",\n  \"deepskyblue2\": \"rgb(0, 178, 238)\",\n  \"deepskyblue3\": \"rgb(0, 154, 205)\",\n  \"deepskyblue4\": \"rgb(0, 104, 139)\",\n  \"dimgray\": \"rgb(105, 105, 105)\",\n  \"dimgrey\": \"rgb(105, 105, 105)\",\n  \"dodgerblue\": \"rgb(30, 144, 255)\",\n  \"dodgerblue1\": \"rgb(30, 144, 255)\",\n  \"dodgerblue2\": \"rgb(28, 134, 238)\",\n  \"dodgerblue3\": \"rgb(24, 116, 205)\",\n  \"dodgerblue4\": \"rgb(16, 78, 139)\",\n  \"firebrick\": \"rgb(178, 34, 34)\",\n  \"firebrick1\": \"rgb(255, 48, 48)\",\n  \"firebrick2\": \"rgb(238, 44, 44)\",\n  \"firebrick3\": \"rgb(205, 38, 38)\",\n  \"firebrick4\": \"rgb(139, 26, 26)\",\n  \"floralwhite\": \"rgb(255, 250, 240)\",\n  \"forestgreen\": \"rgb(34, 139, 34)\",\n  \"gainsboro\": \"rgb(220, 220, 220)\",\n  \"ghostwhite\": \"rgb(248, 248, 255)\",\n  \"gold\": \"rgb(255, 215, 0)\",\n  \"gold1\": \"rgb(255, 215, 0)\",\n  \"gold2\": \"rgb(238, 201, 0)\",\n  \"gold3\": \"rgb(205, 173, 0)\",\n  \"gold4\": \"rgb(139, 117, 0)\",\n  \"goldenrod\": \"rgb(218, 165, 32)\",\n  \"goldenrod1\": \"rgb(255, 193, 37)\",\n  \"goldenrod2\": \"rgb(238, 180, 34)\",\n  \"goldenrod3\": \"rgb(205, 155, 29)\",\n  \"goldenrod4\": \"rgb(139, 105, 20)\",\n  \"gray\": \"rgb(190, 190, 190)\",\n  \"gray0\": \"rgb(0, 0, 0)\",\n  \"gray1\": \"rgb(3, 3, 3)\",\n  \"gray10\": \"rgb(26, 26, 26)\",\n  \"gray100\": \"rgb(255, 255, 255)\",\n  \"gray11\": \"rgb(28, 28, 28)\",\n  \"gray12\": \"rgb(31, 31, 31)\",\n  \"gray13\": \"rgb(33, 33, 33)\",\n  \"gray14\": \"rgb(36, 36, 36)\",\n  \"gray15\": \"rgb(38, 38, 38)\",\n  \"gray16\": \"rgb(41, 41, 41)\",\n  \"gray17\": \"rgb(43, 43, 43)\",\n  \"gray18\": \"rgb(46, 46, 46)\",\n  \"gray19\": \"rgb(48, 48, 48)\",\n  \"gray2\": \"rgb(5, 5, 5)\",\n  \"gray20\": \"rgb(51, 51, 51)\",\n  \"gray21\": \"rgb(54, 54, 54)\",\n  \"gray22\": \"rgb(56, 56, 56)\",\n  \"gray23\": \"rgb(59, 59, 59)\",\n  \"gray24\": \"rgb(61, 61, 61)\",\n  \"gray25\": \"rgb(64, 64, 64)\",\n  \"gray26\": \"rgb(66, 66, 66)\",\n  \"gray27\": \"rgb(69, 69, 69)\",\n  \"gray28\": \"rgb(71, 71, 71)\",\n  \"gray29\": \"rgb(74, 74, 74)\",\n  \"gray3\": \"rgb(8, 8, 8)\",\n  \"gray30\": \"rgb(77, 77, 77)\",\n  \"gray31\": \"rgb(79, 79, 79)\",\n  \"gray32\": \"rgb(82, 82, 82)\",\n  \"gray33\": \"rgb(84, 84, 84)\",\n  \"gray34\": \"rgb(87, 87, 87)\",\n  \"gray35\": \"rgb(89, 89, 89)\",\n  \"gray36\": \"rgb(92, 92, 92)\",\n  \"gray37\": \"rgb(94, 94, 94)\",\n  \"gray38\": \"rgb(97, 97, 97)\",\n  \"gray39\": \"rgb(99, 99, 99)\",\n  \"gray4\": \"rgb(10, 10, 10)\",\n  \"gray40\": \"rgb(102, 102, 102)\",\n  \"gray41\": \"rgb(105, 105, 105)\",\n  \"gray42\": \"rgb(107, 107, 107)\",\n  \"gray43\": \"rgb(110, 110, 110)\",\n  \"gray44\": \"rgb(112, 112, 112)\",\n  \"gray45\": \"rgb(115, 115, 115)\",\n  \"gray46\": \"rgb(117, 117, 117)\",\n  \"gray47\": \"rgb(120, 120, 120)\",\n  \"gray48\": \"rgb(122, 122, 122)\",\n  \"gray49\": \"rgb(125, 125, 125)\",\n  \"gray5\": \"rgb(13, 13, 13)\",\n  \"gray50\": \"rgb(127, 127, 127)\",\n  \"gray51\": \"rgb(130, 130, 130)\",\n  \"gray52\": \"rgb(133, 133, 133)\",\n  \"gray53\": \"rgb(135, 135, 135)\",\n  \"gray54\": \"rgb(138, 138, 138)\",\n  \"gray55\": \"rgb(140, 140, 140)\",\n  \"gray56\": \"rgb(143, 143, 143)\",\n  \"gray57\": \"rgb(145, 145, 145)\",\n  \"gray58\": \"rgb(148, 148, 148)\",\n  \"gray59\": \"rgb(150, 150, 150)\",\n  \"gray6\": \"rgb(15, 15, 15)\",\n  \"gray60\": \"rgb(153, 153, 153)\",\n  \"gray61\": \"rgb(156, 156, 156)\",\n  \"gray62\": \"rgb(158, 158, 158)\",\n  \"gray63\": \"rgb(161, 161, 161)\",\n  \"gray64\": \"rgb(163, 163, 163)\",\n  \"gray65\": \"rgb(166, 166, 166)\",\n  \"gray66\": \"rgb(168, 168, 168)\",\n  \"gray67\": \"rgb(171, 171, 171)\",\n  \"gray68\": \"rgb(173, 173, 173)\",\n  \"gray69\": \"rgb(176, 176, 176)\",\n  \"gray7\": \"rgb(18, 18, 18)\",\n  \"gray70\": \"rgb(179, 179, 179)\",\n  \"gray71\": \"rgb(181, 181, 181)\",\n  \"gray72\": \"rgb(184, 184, 184)\",\n  \"gray73\": \"rgb(186, 186, 186)\",\n  \"gray74\": \"rgb(189, 189, 189)\",\n  \"gray75\": \"rgb(191, 191, 191)\",\n  \"gray76\": \"rgb(194, 194, 194)\",\n  \"gray77\": \"rgb(196, 196, 196)\",\n  \"gray78\": \"rgb(199, 199, 199)\",\n  \"gray79\": \"rgb(201, 201, 201)\",\n  \"gray8\": \"rgb(20, 20, 20)\",\n  \"gray80\": \"rgb(204, 204, 204)\",\n  \"gray81\": \"rgb(207, 207, 207)\",\n  \"gray82\": \"rgb(209, 209, 209)\",\n  \"gray83\": \"rgb(212, 212, 212)\",\n  \"gray84\": \"rgb(214, 214, 214)\",\n  \"gray85\": \"rgb(217, 217, 217)\",\n  \"gray86\": \"rgb(219, 219, 219)\",\n  \"gray87\": \"rgb(222, 222, 222)\",\n  \"gray88\": \"rgb(224, 224, 224)\",\n  \"gray89\": \"rgb(227, 227, 227)\",\n  \"gray9\": \"rgb(23, 23, 23)\",\n  \"gray90\": \"rgb(229, 229, 229)\",\n  \"gray91\": \"rgb(232, 232, 232)\",\n  \"gray92\": \"rgb(235, 235, 235)\",\n  \"gray93\": \"rgb(237, 237, 237)\",\n  \"gray94\": \"rgb(240, 240, 240)\",\n  \"gray95\": \"rgb(242, 242, 242)\",\n  \"gray96\": \"rgb(245, 245, 245)\",\n  \"gray97\": \"rgb(247, 247, 247)\",\n  \"gray98\": \"rgb(250, 250, 250)\",\n  \"gray99\": \"rgb(252, 252, 252)\",\n  \"green\": \"rgb(0, 255, 0)\",\n  \"green1\": \"rgb(0, 255, 0)\",\n  \"green2\": \"rgb(0, 238, 0)\",\n  \"green3\": \"rgb(0, 205, 0)\",\n  \"green4\": \"rgb(0, 139, 0)\",\n  \"greenyellow\": \"rgb(173, 255, 47)\",\n  \"grey\": \"rgb(190, 190, 190)\",\n  \"grey0\": \"rgb(0, 0, 0)\",\n  \"grey1\": \"rgb(3, 3, 3)\",\n  \"grey10\": \"rgb(26, 26, 26)\",\n  \"grey100\": \"rgb(255, 255, 255)\",\n  \"grey11\": \"rgb(28, 28, 28)\",\n  \"grey12\": \"rgb(31, 31, 31)\",\n  \"grey13\": \"rgb(33, 33, 33)\",\n  \"grey14\": \"rgb(36, 36, 36)\",\n  \"grey15\": \"rgb(38, 38, 38)\",\n  \"grey16\": \"rgb(41, 41, 41)\",\n  \"grey17\": \"rgb(43, 43, 43)\",\n  \"grey18\": \"rgb(46, 46, 46)\",\n  \"grey19\": \"rgb(48, 48, 48)\",\n  \"grey2\": \"rgb(5, 5, 5)\",\n  \"grey20\": \"rgb(51, 51, 51)\",\n  \"grey21\": \"rgb(54, 54, 54)\",\n  \"grey22\": \"rgb(56, 56, 56)\",\n  \"grey23\": \"rgb(59, 59, 59)\",\n  \"grey24\": \"rgb(61, 61, 61)\",\n  \"grey25\": \"rgb(64, 64, 64)\",\n  \"grey26\": \"rgb(66, 66, 66)\",\n  \"grey27\": \"rgb(69, 69, 69)\",\n  \"grey28\": \"rgb(71, 71, 71)\",\n  \"grey29\": \"rgb(74, 74, 74)\",\n  \"grey3\": \"rgb(8, 8, 8)\",\n  \"grey30\": \"rgb(77, 77, 77)\",\n  \"grey31\": \"rgb(79, 79, 79)\",\n  \"grey32\": \"rgb(82, 82, 82)\",\n  \"grey33\": \"rgb(84, 84, 84)\",\n  \"grey34\": \"rgb(87, 87, 87)\",\n  \"grey35\": \"rgb(89, 89, 89)\",\n  \"grey36\": \"rgb(92, 92, 92)\",\n  \"grey37\": \"rgb(94, 94, 94)\",\n  \"grey38\": \"rgb(97, 97, 97)\",\n  \"grey39\": \"rgb(99, 99, 99)\",\n  \"grey4\": \"rgb(10, 10, 10)\",\n  \"grey40\": \"rgb(102, 102, 102)\",\n  \"grey41\": \"rgb(105, 105, 105)\",\n  \"grey42\": \"rgb(107, 107, 107)\",\n  \"grey43\": \"rgb(110, 110, 110)\",\n  \"grey44\": \"rgb(112, 112, 112)\",\n  \"grey45\": \"rgb(115, 115, 115)\",\n  \"grey46\": \"rgb(117, 117, 117)\",\n  \"grey47\": \"rgb(120, 120, 120)\",\n  \"grey48\": \"rgb(122, 122, 122)\",\n  \"grey49\": \"rgb(125, 125, 125)\",\n  \"grey5\": \"rgb(13, 13, 13)\",\n  \"grey50\": \"rgb(127, 127, 127)\",\n  \"grey51\": \"rgb(130, 130, 130)\",\n  \"grey52\": \"rgb(133, 133, 133)\",\n  \"grey53\": \"rgb(135, 135, 135)\",\n  \"grey54\": \"rgb(138, 138, 138)\",\n  \"grey55\": \"rgb(140, 140, 140)\",\n  \"grey56\": \"rgb(143, 143, 143)\",\n  \"grey57\": \"rgb(145, 145, 145)\",\n  \"grey58\": \"rgb(148, 148, 148)\",\n  \"grey59\": \"rgb(150, 150, 150)\",\n  \"grey6\": \"rgb(15, 15, 15)\",\n  \"grey60\": \"rgb(153, 153, 153)\",\n  \"grey61\": \"rgb(156, 156, 156)\",\n  \"grey62\": \"rgb(158, 158, 158)\",\n  \"grey63\": \"rgb(161, 161, 161)\",\n  \"grey64\": \"rgb(163, 163, 163)\",\n  \"grey65\": \"rgb(166, 166, 166)\",\n  \"grey66\": \"rgb(168, 168, 168)\",\n  \"grey67\": \"rgb(171, 171, 171)\",\n  \"grey68\": \"rgb(173, 173, 173)\",\n  \"grey69\": \"rgb(176, 176, 176)\",\n  \"grey7\": \"rgb(18, 18, 18)\",\n  \"grey70\": \"rgb(179, 179, 179)\",\n  \"grey71\": \"rgb(181, 181, 181)\",\n  \"grey72\": \"rgb(184, 184, 184)\",\n  \"grey73\": \"rgb(186, 186, 186)\",\n  \"grey74\": \"rgb(189, 189, 189)\",\n  \"grey75\": \"rgb(191, 191, 191)\",\n  \"grey76\": \"rgb(194, 194, 194)\",\n  \"grey77\": \"rgb(196, 196, 196)\",\n  \"grey78\": \"rgb(199, 199, 199)\",\n  \"grey79\": \"rgb(201, 201, 201)\",\n  \"grey8\": \"rgb(20, 20, 20)\",\n  \"grey80\": \"rgb(204, 204, 204)\",\n  \"grey81\": \"rgb(207, 207, 207)\",\n  \"grey82\": \"rgb(209, 209, 209)\",\n  \"grey83\": \"rgb(212, 212, 212)\",\n  \"grey84\": \"rgb(214, 214, 214)\",\n  \"grey85\": \"rgb(217, 217, 217)\",\n  \"grey86\": \"rgb(219, 219, 219)\",\n  \"grey87\": \"rgb(222, 222, 222)\",\n  \"grey88\": \"rgb(224, 224, 224)\",\n  \"grey89\": \"rgb(227, 227, 227)\",\n  \"grey9\": \"rgb(23, 23, 23)\",\n  \"grey90\": \"rgb(229, 229, 229)\",\n  \"grey91\": \"rgb(232, 232, 232)\",\n  \"grey92\": \"rgb(235, 235, 235)\",\n  \"grey93\": \"rgb(237, 237, 237)\",\n  \"grey94\": \"rgb(240, 240, 240)\",\n  \"grey95\": \"rgb(242, 242, 242)\",\n  \"grey96\": \"rgb(245, 245, 245)\",\n  \"grey97\": \"rgb(247, 247, 247)\",\n  \"grey98\": \"rgb(250, 250, 250)\",\n  \"grey99\": \"rgb(252, 252, 252)\",\n  \"honeydew\": \"rgb(240, 255, 240)\",\n  \"honeydew1\": \"rgb(240, 255, 240)\",\n  \"honeydew2\": \"rgb(224, 238, 224)\",\n  \"honeydew3\": \"rgb(193, 205, 193)\",\n  \"honeydew4\": \"rgb(131, 139, 131)\",\n  \"hotpink\": \"rgb(255, 105, 180)\",\n  \"hotpink1\": \"rgb(255, 110, 180)\",\n  \"hotpink2\": \"rgb(238, 106, 167)\",\n  \"hotpink3\": \"rgb(205, 96, 144)\",\n  \"hotpink4\": \"rgb(139, 58, 98)\",\n  \"indianred\": \"rgb(205, 92, 92)\",\n  \"indianred1\": \"rgb(255, 106, 106)\",\n  \"indianred2\": \"rgb(238, 99, 99)\",\n  \"indianred3\": \"rgb(205, 85, 85)\",\n  \"indianred4\": \"rgb(139, 58, 58)\",\n  \"ivory\": \"rgb(255, 255, 240)\",\n  \"ivory1\": \"rgb(255, 255, 240)\",\n  \"ivory2\": \"rgb(238, 238, 224)\",\n  \"ivory3\": \"rgb(205, 205, 193)\",\n  \"ivory4\": \"rgb(139, 139, 131)\",\n  \"khaki\": \"rgb(240, 230, 140)\",\n  \"khaki1\": \"rgb(255, 246, 143)\",\n  \"khaki2\": \"rgb(238, 230, 133)\",\n  \"khaki3\": \"rgb(205, 198, 115)\",\n  \"khaki4\": \"rgb(139, 134, 78)\",\n  \"lavender\": \"rgb(230, 230, 250)\",\n  \"lavenderblush\": \"rgb(255, 240, 245)\",\n  \"lavenderblush1\": \"rgb(255, 240, 245)\",\n  \"lavenderblush2\": \"rgb(238, 224, 229)\",\n  \"lavenderblush3\": \"rgb(205, 193, 197)\",\n  \"lavenderblush4\": \"rgb(139, 131, 134)\",\n  \"lawngreen\": \"rgb(124, 252, 0)\",\n  \"lemonchiffon\": \"rgb(255, 250, 205)\",\n  \"lemonchiffon1\": \"rgb(255, 250, 205)\",\n  \"lemonchiffon2\": \"rgb(238, 233, 191)\",\n  \"lemonchiffon3\": \"rgb(205, 201, 165)\",\n  \"lemonchiffon4\": \"rgb(139, 137, 112)\",\n  \"lightblue\": \"rgb(173, 216, 230)\",\n  \"lightblue1\": \"rgb(191, 239, 255)\",\n  \"lightblue2\": \"rgb(178, 223, 238)\",\n  \"lightblue3\": \"rgb(154, 192, 205)\",\n  \"lightblue4\": \"rgb(104, 131, 139)\",\n  \"lightcoral\": \"rgb(240, 128, 128)\",\n  \"lightcyan\": \"rgb(224, 255, 255)\",\n  \"lightcyan1\": \"rgb(224, 255, 255)\",\n  \"lightcyan2\": \"rgb(209, 238, 238)\",\n  \"lightcyan3\": \"rgb(180, 205, 205)\",\n  \"lightcyan4\": \"rgb(122, 139, 139)\",\n  \"lightgoldenrod\": \"rgb(238, 221, 130)\",\n  \"lightgoldenrod1\": \"rgb(255, 236, 139)\",\n  \"lightgoldenrod2\": \"rgb(238, 220, 130)\",\n  \"lightgoldenrod3\": \"rgb(205, 190, 112)\",\n  \"lightgoldenrod4\": \"rgb(139, 129, 76)\",\n  \"lightgoldenrodyellow\": \"rgb(250, 250, 210)\",\n  \"lightgray\": \"rgb(211, 211, 211)\",\n  \"lightgreen\": \"rgb(144, 238, 144)\",\n  \"lightgrey\": \"rgb(211, 211, 211)\",\n  \"lightpink\": \"rgb(255, 182, 193)\",\n  \"lightpink1\": \"rgb(255, 174, 185)\",\n  \"lightpink2\": \"rgb(238, 162, 173)\",\n  \"lightpink3\": \"rgb(205, 140, 149)\",\n  \"lightpink4\": \"rgb(139, 95, 101)\",\n  \"lightsalmon\": \"rgb(255, 160, 122)\",\n  \"lightsalmon1\": \"rgb(255, 160, 122)\",\n  \"lightsalmon2\": \"rgb(238, 149, 114)\",\n  \"lightsalmon3\": \"rgb(205, 129, 98)\",\n  \"lightsalmon4\": \"rgb(139, 87, 66)\",\n  \"lightseagreen\": \"rgb(32, 178, 170)\",\n  \"lightskyblue\": \"rgb(135, 206, 250)\",\n  \"lightskyblue1\": \"rgb(176, 226, 255)\",\n  \"lightskyblue2\": \"rgb(164, 211, 238)\",\n  \"lightskyblue3\": \"rgb(141, 182, 205)\",\n  \"lightskyblue4\": \"rgb(96, 123, 139)\",\n  \"lightslateblue\": \"rgb(132, 112, 255)\",\n  \"lightslategray\": \"rgb(119, 136, 153)\",\n  \"lightslategrey\": \"rgb(119, 136, 153)\",\n  \"lightsteelblue\": \"rgb(176, 196, 222)\",\n  \"lightsteelblue1\": \"rgb(202, 225, 255)\",\n  \"lightsteelblue2\": \"rgb(188, 210, 238)\",\n  \"lightsteelblue3\": \"rgb(162, 181, 205)\",\n  \"lightsteelblue4\": \"rgb(110, 123, 139)\",\n  \"lightyellow\": \"rgb(255, 255, 224)\",\n  \"lightyellow1\": \"rgb(255, 255, 224)\",\n  \"lightyellow2\": \"rgb(238, 238, 209)\",\n  \"lightyellow3\": \"rgb(205, 205, 180)\",\n  \"lightyellow4\": \"rgb(139, 139, 122)\",\n  \"limegreen\": \"rgb(50, 205, 50)\",\n  \"linen\": \"rgb(250, 240, 230)\",\n  \"magenta\": \"rgb(255, 0, 255)\",\n  \"magenta1\": \"rgb(255, 0, 255)\",\n  \"magenta2\": \"rgb(238, 0, 238)\",\n  \"magenta3\": \"rgb(205, 0, 205)\",\n  \"magenta4\": \"rgb(139, 0, 139)\",\n  \"maroon\": \"rgb(176, 48, 96)\",\n  \"maroon1\": \"rgb(255, 52, 179)\",\n  \"maroon2\": \"rgb(238, 48, 167)\",\n  \"maroon3\": \"rgb(205, 41, 144)\",\n  \"maroon4\": \"rgb(139, 28, 98)\",\n  \"mediumaquamarine\": \"rgb(102, 205, 170)\",\n  \"mediumblue\": \"rgb(0, 0, 205)\",\n  \"mediumorchid\": \"rgb(186, 85, 211)\",\n  \"mediumorchid1\": \"rgb(224, 102, 255)\",\n  \"mediumorchid2\": \"rgb(209, 95, 238)\",\n  \"mediumorchid3\": \"rgb(180, 82, 205)\",\n  \"mediumorchid4\": \"rgb(122, 55, 139)\",\n  \"mediumpurple\": \"rgb(147, 112, 219)\",\n  \"mediumpurple1\": \"rgb(171, 130, 255)\",\n  \"mediumpurple2\": \"rgb(159, 121, 238)\",\n  \"mediumpurple3\": \"rgb(137, 104, 205)\",\n  \"mediumpurple4\": \"rgb(93, 71, 139)\",\n  \"mediumseagreen\": \"rgb(60, 179, 113)\",\n  \"mediumslateblue\": \"rgb(123, 104, 238)\",\n  \"mediumspringgreen\": \"rgb(0, 250, 154)\",\n  \"mediumturquoise\": \"rgb(72, 209, 204)\",\n  \"mediumvioletred\": \"rgb(199, 21, 133)\",\n  \"midnightblue\": \"rgb(25, 25, 112)\",\n  \"mintcream\": \"rgb(245, 255, 250)\",\n  \"mistyrose\": \"rgb(255, 228, 225)\",\n  \"mistyrose1\": \"rgb(255, 228, 225)\",\n  \"mistyrose2\": \"rgb(238, 213, 210)\",\n  \"mistyrose3\": \"rgb(205, 183, 181)\",\n  \"mistyrose4\": \"rgb(139, 125, 123)\",\n  \"moccasin\": \"rgb(255, 228, 181)\",\n  \"navajowhite\": \"rgb(255, 222, 173)\",\n  \"navajowhite1\": \"rgb(255, 222, 173)\",\n  \"navajowhite2\": \"rgb(238, 207, 161)\",\n  \"navajowhite3\": \"rgb(205, 179, 139)\",\n  \"navajowhite4\": \"rgb(139, 121, 94)\",\n  \"navy\": \"rgb(0, 0, 128)\",\n  \"navyblue\": \"rgb(0, 0, 128)\",\n  \"oldlace\": \"rgb(253, 245, 230)\",\n  \"olivedrab\": \"rgb(107, 142, 35)\",\n  \"olivedrab1\": \"rgb(192, 255, 62)\",\n  \"olivedrab2\": \"rgb(179, 238, 58)\",\n  \"olivedrab3\": \"rgb(154, 205, 50)\",\n  \"olivedrab4\": \"rgb(105, 139, 34)\",\n  \"orange\": \"rgb(255, 165, 0)\",\n  \"orange1\": \"rgb(255, 165, 0)\",\n  \"orange2\": \"rgb(238, 154, 0)\",\n  \"orange3\": \"rgb(205, 133, 0)\",\n  \"orange4\": \"rgb(139, 90, 0)\",\n  \"orangered\": \"rgb(255, 69, 0)\",\n  \"orangered1\": \"rgb(255, 69, 0)\",\n  \"orangered2\": \"rgb(238, 64, 0)\",\n  \"orangered3\": \"rgb(205, 55, 0)\",\n  \"orangered4\": \"rgb(139, 37, 0)\",\n  \"orchid\": \"rgb(218, 112, 214)\",\n  \"orchid1\": \"rgb(255, 131, 250)\",\n  \"orchid2\": \"rgb(238, 122, 233)\",\n  \"orchid3\": \"rgb(205, 105, 201)\",\n  \"orchid4\": \"rgb(139, 71, 137)\",\n  \"palegoldenrod\": \"rgb(238, 232, 170)\",\n  \"palegreen\": \"rgb(152, 251, 152)\",\n  \"palegreen1\": \"rgb(154, 255, 154)\",\n  \"palegreen2\": \"rgb(144, 238, 144)\",\n  \"palegreen3\": \"rgb(124, 205, 124)\",\n  \"palegreen4\": \"rgb(84, 139, 84)\",\n  \"paleturquoise\": \"rgb(175, 238, 238)\",\n  \"paleturquoise1\": \"rgb(187, 255, 255)\",\n  \"paleturquoise2\": \"rgb(174, 238, 238)\",\n  \"paleturquoise3\": \"rgb(150, 205, 205)\",\n  \"paleturquoise4\": \"rgb(102, 139, 139)\",\n  \"palevioletred\": \"rgb(219, 112, 147)\",\n  \"palevioletred1\": \"rgb(255, 130, 171)\",\n  \"palevioletred2\": \"rgb(238, 121, 159)\",\n  \"palevioletred3\": \"rgb(205, 104, 137)\",\n  \"palevioletred4\": \"rgb(139, 71, 93)\",\n  \"papayawhip\": \"rgb(255, 239, 213)\",\n  \"peachpuff\": \"rgb(255, 218, 185)\",\n  \"peachpuff1\": \"rgb(255, 218, 185)\",\n  \"peachpuff2\": \"rgb(238, 203, 173)\",\n  \"peachpuff3\": \"rgb(205, 175, 149)\",\n  \"peachpuff4\": \"rgb(139, 119, 101)\",\n  \"peru\": \"rgb(205, 133, 63)\",\n  \"pink\": \"rgb(255, 192, 203)\",\n  \"pink1\": \"rgb(255, 181, 197)\",\n  \"pink2\": \"rgb(238, 169, 184)\",\n  \"pink3\": \"rgb(205, 145, 158)\",\n  \"pink4\": \"rgb(139, 99, 108)\",\n  \"plum\": \"rgb(221, 160, 221)\",\n  \"plum1\": \"rgb(255, 187, 255)\",\n  \"plum2\": \"rgb(238, 174, 238)\",\n  \"plum3\": \"rgb(205, 150, 205)\",\n  \"plum4\": \"rgb(139, 102, 139)\",\n  \"powderblue\": \"rgb(176, 224, 230)\",\n  \"purple\": \"rgb(160, 32, 240)\",\n  \"purple1\": \"rgb(155, 48, 255)\",\n  \"purple2\": \"rgb(145, 44, 238)\",\n  \"purple3\": \"rgb(125, 38, 205)\",\n  \"purple4\": \"rgb(85, 26, 139)\",\n  \"red\": \"rgb(255, 0, 0)\",\n  \"red1\": \"rgb(255, 0, 0)\",\n  \"red2\": \"rgb(238, 0, 0)\",\n  \"red3\": \"rgb(205, 0, 0)\",\n  \"red4\": \"rgb(139, 0, 0)\",\n  \"rosybrown\": \"rgb(188, 143, 143)\",\n  \"rosybrown1\": \"rgb(255, 193, 193)\",\n  \"rosybrown2\": \"rgb(238, 180, 180)\",\n  \"rosybrown3\": \"rgb(205, 155, 155)\",\n  \"rosybrown4\": \"rgb(139, 105, 105)\",\n  \"royalblue\": \"rgb(65, 105, 225)\",\n  \"royalblue1\": \"rgb(72, 118, 255)\",\n  \"royalblue2\": \"rgb(67, 110, 238)\",\n  \"royalblue3\": \"rgb(58, 95, 205)\",\n  \"royalblue4\": \"rgb(39, 64, 139)\",\n  \"saddlebrown\": \"rgb(139, 69, 19)\",\n  \"salmon\": \"rgb(250, 128, 114)\",\n  \"salmon1\": \"rgb(255, 140, 105)\",\n  \"salmon2\": \"rgb(238, 130, 98)\",\n  \"salmon3\": \"rgb(205, 112, 84)\",\n  \"salmon4\": \"rgb(139, 76, 57)\",\n  \"sandybrown\": \"rgb(244, 164, 96)\",\n  \"seagreen\": \"rgb(46, 139, 87)\",\n  \"seagreen1\": \"rgb(84, 255, 159)\",\n  \"seagreen2\": \"rgb(78, 238, 148)\",\n  \"seagreen3\": \"rgb(67, 205, 128)\",\n  \"seagreen4\": \"rgb(46, 139, 87)\",\n  \"seashell\": \"rgb(255, 245, 238)\",\n  \"seashell1\": \"rgb(255, 245, 238)\",\n  \"seashell2\": \"rgb(238, 229, 222)\",\n  \"seashell3\": \"rgb(205, 197, 191)\",\n  \"seashell4\": \"rgb(139, 134, 130)\",\n  \"sienna\": \"rgb(160, 82, 45)\",\n  \"sienna1\": \"rgb(255, 130, 71)\",\n  \"sienna2\": \"rgb(238, 121, 66)\",\n  \"sienna3\": \"rgb(205, 104, 57)\",\n  \"sienna4\": \"rgb(139, 71, 38)\",\n  \"skyblue\": \"rgb(135, 206, 235)\",\n  \"skyblue1\": \"rgb(135, 206, 255)\",\n  \"skyblue2\": \"rgb(126, 192, 238)\",\n  \"skyblue3\": \"rgb(108, 166, 205)\",\n  \"skyblue4\": \"rgb(74, 112, 139)\",\n  \"slateblue\": \"rgb(106, 90, 205)\",\n  \"slateblue1\": \"rgb(131, 111, 255)\",\n  \"slateblue2\": \"rgb(122, 103, 238)\",\n  \"slateblue3\": \"rgb(105, 89, 205)\",\n  \"slateblue4\": \"rgb(71, 60, 139)\",\n  \"slategray\": \"rgb(112, 128, 144)\",\n  \"slategray1\": \"rgb(198, 226, 255)\",\n  \"slategray2\": \"rgb(185, 211, 238)\",\n  \"slategray3\": \"rgb(159, 182, 205)\",\n  \"slategray4\": \"rgb(108, 123, 139)\",\n  \"slategrey\": \"rgb(112, 128, 144)\",\n  \"snow\": \"rgb(255, 250, 250)\",\n  \"snow1\": \"rgb(255, 250, 250)\",\n  \"snow2\": \"rgb(238, 233, 233)\",\n  \"snow3\": \"rgb(205, 201, 201)\",\n  \"snow4\": \"rgb(139, 137, 137)\",\n  \"springgreen\": \"rgb(0, 255, 127)\",\n  \"springgreen1\": \"rgb(0, 255, 127)\",\n  \"springgreen2\": \"rgb(0, 238, 118)\",\n  \"springgreen3\": \"rgb(0, 205, 102)\",\n  \"springgreen4\": \"rgb(0, 139, 69)\",\n  \"steelblue\": \"rgb(70, 130, 180)\",\n  \"steelblue1\": \"rgb(99, 184, 255)\",\n  \"steelblue2\": \"rgb(92, 172, 238)\",\n  \"steelblue3\": \"rgb(79, 148, 205)\",\n  \"steelblue4\": \"rgb(54, 100, 139)\",\n  \"tan\": \"rgb(210, 180, 140)\",\n  \"tan1\": \"rgb(255, 165, 79)\",\n  \"tan2\": \"rgb(238, 154, 73)\",\n  \"tan3\": \"rgb(205, 133, 63)\",\n  \"tan4\": \"rgb(139, 90, 43)\",\n  \"thistle\": \"rgb(216, 191, 216)\",\n  \"thistle1\": \"rgb(255, 225, 255)\",\n  \"thistle2\": \"rgb(238, 210, 238)\",\n  \"thistle3\": \"rgb(205, 181, 205)\",\n  \"thistle4\": \"rgb(139, 123, 139)\",\n  \"tomato\": \"rgb(255, 99, 71)\",\n  \"tomato1\": \"rgb(255, 99, 71)\",\n  \"tomato2\": \"rgb(238, 92, 66)\",\n  \"tomato3\": \"rgb(205, 79, 57)\",\n  \"tomato4\": \"rgb(139, 54, 38)\",\n  \"turquoise\": \"rgb(64, 224, 208)\",\n  \"turquoise1\": \"rgb(0, 245, 255)\",\n  \"turquoise2\": \"rgb(0, 229, 238)\",\n  \"turquoise3\": \"rgb(0, 197, 205)\",\n  \"turquoise4\": \"rgb(0, 134, 139)\",\n  \"violet\": \"rgb(238, 130, 238)\",\n  \"violetred\": \"rgb(208, 32, 144)\",\n  \"violetred1\": \"rgb(255, 62, 150)\",\n  \"violetred2\": \"rgb(238, 58, 140)\",\n  \"violetred3\": \"rgb(205, 50, 120)\",\n  \"violetred4\": \"rgb(139, 34, 82)\",\n  \"wheat\": \"rgb(245, 222, 179)\",\n  \"wheat1\": \"rgb(255, 231, 186)\",\n  \"wheat2\": \"rgb(238, 216, 174)\",\n  \"wheat3\": \"rgb(205, 186, 150)\",\n  \"wheat4\": \"rgb(139, 126, 102)\",\n  \"white\": \"rgb(255, 255, 255)\",\n  \"whitesmoke\": \"rgb(245, 245, 245)\",\n  \"yellow\": \"rgb(255, 255, 0)\",\n  \"yellow1\": \"rgb(255, 255, 0)\",\n  \"yellow2\": \"rgb(238, 238, 0)\",\n  \"yellow3\": \"rgb(205, 205, 0)\",\n  \"yellow4\": \"rgb(139, 139, 0)\",\n  \"yellowgreen\": \"rgb(154, 205, 50)\"\n};\n// SOURCE FILE: libdot/js/lib_f.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * Grab bag of utility functions.\n */\nlib.f = {};\n\n/**\n * Replace variable references in a string.\n *\n * Variables are of the form %FUNCTION(VARNAME).  FUNCTION is an optional\n * escape function to apply to the value.\n *\n * For example\n *   lib.f.replaceVars(\"%(greeting), %encodeURIComponent(name)\",\n *                     { greeting: \"Hello\",\n *                       name: \"Google+\" });\n *\n * Will result in \"Hello, Google%2B\".\n */\nlib.f.replaceVars = function(str, vars) {\n  return str.replace(/%([a-z]*)\\(([^\\)]+)\\)/gi, function(match, fn, varname) {\n      if (typeof vars[varname] == 'undefined')\n        throw 'Unknown variable: ' + varname;\n\n      var rv = vars[varname];\n\n      if (fn in lib.f.replaceVars.functions) {\n        rv = lib.f.replaceVars.functions[fn](rv);\n      } else if (fn) {\n        throw 'Unknown escape function: ' + fn;\n      }\n\n      return rv;\n    });\n};\n\n/**\n * Functions that can be used with replaceVars.\n *\n * Clients can add to this list to extend lib.f.replaceVars().\n */\nlib.f.replaceVars.functions = {\n  encodeURI: encodeURI,\n  encodeURIComponent: encodeURIComponent,\n  escapeHTML: function(str) {\n    var map = {\n      '<': '&lt;',\n      '>': '&gt;',\n      '&': '&amp;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n\n    return str.replace(/[<>&\\\"\\']/g, function(m) { return map[m] });\n  }\n};\n\n/**\n * Get the list of accepted UI languages.\n *\n * @param {function(Array)} callback Function to invoke with the results.  The\n *     parameter is a list of locale names.\n */\nlib.f.getAcceptLanguages = function(callback) {\n  if (window.chrome && chrome.i18n) {\n    chrome.i18n.getAcceptLanguages(callback);\n  } else {\n    setTimeout(function() {\n        callback([navigator.language.replace(/-/g, '_')]);\n      }, 0);\n  }\n};\n\n/**\n * Parse a query string into a hash.\n *\n * This takes a url query string in the form 'name1=value&name2=value' and\n * converts it into an object of the form { name1: 'value', name2: 'value' }.\n * If a given name appears multiple times in the query string, only the\n * last value will appear in the result.\n *\n * Names and values are passed through decodeURIComponent before being added\n * to the result object.\n *\n * @param {string} queryString The string to parse.  If it starts with a\n *     leading '?', the '?' will be ignored.\n */\nlib.f.parseQuery = function(queryString) {\n  if (queryString.substr(0, 1) == '?')\n    queryString = queryString.substr(1);\n\n  var rv = {};\n\n  var pairs = queryString.split('&');\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split('=');\n    rv[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n  }\n\n  return rv;\n};\n\nlib.f.getURL = function(path) {\n  if (window.chrome && chrome.runtime && chrome.runtime.getURL)\n    return chrome.runtime.getURL(path);\n\n  return path;\n};\n\n/**\n * Clamp a given integer to a specified range.\n *\n * @param {integer} v The value to be clamped.\n * @param {integer} min The minimum acceptable value.\n * @param {integer} max The maximum acceptable value.\n */\nlib.f.clamp = function(v, min, max) {\n  if (v < min)\n    return min;\n  if (v > max)\n    return max;\n  return v;\n};\n\n/**\n * Left pad a string to a given length using a given character.\n *\n * @param {string} str The string to pad.\n * @param {integer} length The desired length.\n * @param {string} opt_ch The optional padding character, defaults to ' '.\n * @return {string} The padded string.\n */\nlib.f.lpad = function(str, length, opt_ch) {\n  str = String(str);\n  opt_ch = opt_ch || ' ';\n\n  while (str.length < length)\n    str = opt_ch + str;\n\n  return str;\n};\n\n/**\n * Left pad a number to a given length with leading zeros.\n *\n * @param {string|integer} number The number to pad.\n * @param {integer} length The desired length.\n * @return {string} The padded number as a string.\n */\nlib.f.zpad = function(number, length) {\n  return lib.f.lpad(number, length, '0');\n};\n\n/**\n * Return a string containing a given number of space characters.\n *\n * This method maintains a static cache of the largest amount of whitespace\n * ever requested.  It shouldn't be used to generate an insanely huge amount of\n * whitespace.\n *\n * @param {integer} length The desired amount of whitespace.\n * @param {string} A string of spaces of the requested length.\n */\nlib.f.getWhitespace = function(length) {\n  if (length == 0)\n    return '';\n\n  var f = this.getWhitespace;\n  if (!f.whitespace)\n    f.whitespace = '          ';\n\n  while (length > f.whitespace.length) {\n    f.whitespace += f.whitespace;\n  }\n\n  return f.whitespace.substr(0, length);\n};\n\n /**\n * Ensure that a function is called within a certain time limit.\n *\n * Simple usage looks like this...\n *\n *  lib.registerInit(lib.f.alarm(onInit));\n *\n * This will log a warning to the console if onInit() is not invoked within\n * 5 seconds.\n *\n * If you're performing some operation that may take longer than 5 seconds you\n * can pass a duration in milliseconds as the optional second parameter.\n *\n * If you pass a string identifier instead of a callback function, you'll get a\n * wrapper generator rather than a single wrapper.  Each call to the\n * generator will return a wrapped version of the callback wired to\n * a shared timeout.  This is for cases where you want to ensure that at least\n * one of a set of callbacks is invoked before a timeout expires.\n *\n *   var alarm = lib.f.alarm('fetch object');\n *   lib.foo.fetchObject(alarm(onSuccess), alarm(onFailure));\n *\n * @param {function(*)} callback The function to wrap in an alarm.\n * @param {int} opt_ms Optional number of milliseconds to wait before raising\n *     an alarm.  Default is 5000 (5 seconds).\n * @return {function} If callback is a function then the return value will be\n *     the wrapped callback.  If callback is a string then the return value will\n *     be a function that generates new wrapped callbacks.\n */\nlib.f.alarm = function(callback, opt_ms) {\n  var ms = opt_ms || 5 * 1000;\n  var stack = lib.f.getStack(1);\n\n  return (function() {\n    // This outer function is called immediately.  It's here to capture a new\n    // scope for the timeout variable.\n\n    // The 'timeout' variable is shared by this timeout function, and the\n    // callback wrapper.\n    var timeout = setTimeout(function() {\n      var name = (typeof callback == 'string') ? name : callback.name;\n      name = name ? (': ' + name) : '';\n      console.warn('lib.f.alarm: timeout expired: ' + (ms / 1000) + 's' + name);\n      console.log(stack);\n      timeout = null;\n    }, ms);\n\n    var wrapperGenerator = function(callback) {\n      return function() {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        return callback.apply(null, arguments);\n      }\n    };\n\n    if (typeof callback == 'string')\n      return wrapperGenerator;\n\n    return wrapperGenerator(callback);\n  })();\n};\n\n/**\n * Return the current call stack after skipping a given number of frames.\n *\n * This method is intended to be used for debugging only.  It returns an\n * Object instead of an Array, because the console stringifies arrays by\n * default and that's not what we want.\n *\n * A typical call might look like...\n *\n *    console.log('Something wicked this way came', lib.f.getStack());\n *    //                         Notice the comma ^\n *\n * This would print the message to the js console, followed by an object\n * which can be clicked to reveal the stack.\n *\n * @param {number} opt_ignoreFrames The optional number of stack frames to\n *     ignore.  The actual 'getStack' call is always ignored.\n */\nlib.f.getStack = function(opt_ignoreFrames) {\n  var ignoreFrames = opt_ignoreFrames ? opt_ignoreFrames + 2 : 2;\n\n  var stackArray;\n\n  try {\n    throw new Error();\n  } catch (ex) {\n    stackArray = ex.stack.split('\\n');\n  }\n\n  var stackObject = {};\n  for (var i = ignoreFrames; i < stackArray.length; i++) {\n    stackObject[i - ignoreFrames] = stackArray[i].replace(/^\\s*at\\s+/, '');\n  }\n\n  return stackObject;\n};\n\n/**\n * Divides the two numbers and floors the results, unless the remainder is less\n * than an incredibly small value, in which case it returns the ceiling.\n * This is useful when the number are truncated approximations of longer\n * values, and so doing division with these numbers yields a result incredibly\n * close to a whole number.\n *\n * @param {number} numerator\n * @param {number} denominator\n * @return {number}\n */\nlib.f.smartFloorDivide = function(numerator,  denominator) {\n  var val = numerator / denominator;\n  var ceiling = Math.ceil(val);\n  if (ceiling - val < .0001) {\n    return ceiling;\n  } else {\n    return Math.floor(val);\n  }\n};\n// SOURCE FILE: libdot/js/lib_message_manager.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * MessageManager class handles internationalized strings.\n *\n * Note: chrome.i18n isn't sufficient because...\n *     1. There's a bug in chrome that makes it unavailable in iframes:\n *        http://crbug.com/130200\n *     2. The client code may not be packaged in a Chrome extension.\n *     3. The client code may be part of a library packaged in a third-party\n *        Chrome extension.\n *\n * @param {Array} languages List of languages to load, in the order they\n *     should be loaded.  Newer messages replace older ones.  'en' is\n *     automatically added as the first language if it is not already present.\n */\nlib.MessageManager = function(languages) {\n  this.languages_ = languages.map(\n      function(el) { return el.replace(/-/g, '_') });\n\n  if (this.languages_.indexOf('en') == -1)\n    this.languages_.unshift('en');\n\n  this.messages = {};\n};\n\n/**\n * Add message definitions to the message manager.\n *\n * This takes an object of the same format of a Chrome messages.json file.  See\n * <http://code.google.com/chrome/extensions/i18n-messages.html>.\n */\nlib.MessageManager.prototype.addMessages = function(defs) {\n  for (var key in defs) {\n    var def = defs[key];\n\n    if (!def.placeholders) {\n      this.messages[key] = def.message;\n    } else {\n      // Replace \"$NAME$\" placeholders with \"$1\", etc.\n      this.messages[key] = def.message.replace(\n          /\\$([a-z][^\\s\\$]+)\\$/ig,\n          function(m, name) {\n            return defs[key].placeholders[name.toLowerCase()].content;\n          });\n    }\n  }\n};\n\n/**\n * Load the first available language message bundle.\n *\n * @param {string} pattern A url pattern containing a \"$1\" where the locale\n *     name should go.\n * @param {function(Array,Array)} onComplete Function to be called when loading\n *     is complete.  The two arrays are the list of successful and failed\n *     locale names.  If the first parameter is length 0, no locales were\n *     loaded.\n */\nlib.MessageManager.prototype.findAndLoadMessages = function(\n    pattern, onComplete) {\n  var languages = this.languages_.concat();\n  var loaded = [];\n  var failed = [];\n\n  function onLanguageComplete(state) {\n    if (state) {\n      loaded = languages.shift();\n    } else {\n      failed = languages.shift();\n    }\n\n    if (languages.length) {\n      tryNextLanguage();\n    } else {\n      onComplete(loaded, failed);\n    }\n  }\n\n  var tryNextLanguage = function() {\n    this.loadMessages(this.replaceReferences(pattern, languages),\n                      onLanguageComplete.bind(this, true),\n                      onLanguageComplete.bind(this, false));\n  }.bind(this);\n\n  tryNextLanguage();\n};\n\n/**\n * Load messages from a messages.json file.\n */\nlib.MessageManager.prototype.loadMessages = function(\n    url, onSuccess, opt_onError) {\n  var xhr = new XMLHttpRequest();\n\n  xhr.onloadend = function() {\n    if (xhr.status != 200) {\n      if (opt_onError)\n        opt_onError(xhr.status);\n\n      return;\n    }\n\n    this.addMessages(JSON.parse(xhr.responseText));\n    onSuccess();\n  }.bind(this);\n\n  xhr.open('GET', url);\n  xhr.send();\n};\n\n/**\n * Replace $1...$n references with the elements of the args array.\n *\n * @param {string} msg String containing the message and argument references.\n * @param {Array} args Array containing the argument values.\n */\nlib.MessageManager.replaceReferences = function(msg, args) {\n  return msg.replace(/\\$(\\d+)/g, function (m, index) {\n      return args[index - 1];\n    });\n};\n\n/**\n * Per-instance copy of replaceReferences.\n */\nlib.MessageManager.prototype.replaceReferences =\n    lib.MessageManager.replaceReferences;\n\n/**\n * Get a message by name, optionally replacing arguments too.\n *\n * @param {string} msgname String containing the name of the message to get.\n * @param {Array} opt_args Optional array containing the argument values.\n * @param {string} opt_default Optional value to return if the msgname is not\n *     found.  Returns the message name by default.\n */\nlib.MessageManager.prototype.get = function(msgname, opt_args, opt_default) {\n  var message;\n\n  if (msgname in this.messages) {\n    message = this.messages[msgname];\n\n  } else {\n    if (window.chrome.i18n)\n      message = chrome.i18n.getMessage(msgname);\n\n    if (!message) {\n      console.warn('Unknown message: ' + msgname);\n      return (typeof opt_default == 'undefined') ? msgname : opt_default;\n    }\n  }\n\n  if (!opt_args)\n    return message;\n\n  if (!(opt_args instanceof Array))\n    opt_args = [opt_args];\n\n  return this.replaceReferences(message, opt_args);\n};\n\n/**\n * Process all of the \"i18n\" html attributes found in a given dom fragment.\n *\n * Each i18n attribute should contain a JSON object.  The keys are taken to\n * be attribute names, and the values are message names.\n *\n * If the JSON object has a \"_\" (underscore) key, it's value is used as the\n * textContent of the element.\n *\n * Message names can refer to other attributes on the same element with by\n * prefixing with a dollar sign.  For example...\n *\n *   <button id='send-button'\n *           i18n='{\"aria-label\": \"$id\", \"_\": \"SEND_BUTTON_LABEL\"}'\n *           ></button>\n *\n * The aria-label message name will be computed as \"SEND_BUTTON_ARIA_LABEL\".\n * Notice that the \"id\" attribute was appended to the target attribute, and\n * the result converted to UPPER_AND_UNDER style.\n */\nlib.MessageManager.prototype.processI18nAttributes = function(dom) {\n  // Convert the \"lower-and-dashes\" attribute names into\n  // \"UPPER_AND_UNDER\" style.\n  function thunk(str) { return str.replace(/-/g, '_').toUpperCase() }\n\n  var nodes = dom.querySelectorAll('[i18n]');\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    var i18n = node.getAttribute('i18n');\n\n    if (!i18n)\n      continue;\n\n    try {\n      i18n = JSON.parse(i18n);\n    } catch (ex) {\n      console.error('Can\\'t parse ' + node.tagName + '#' + node.id + ': ' +\n                    i18n);\n      throw ex;\n    }\n\n    for (var key in i18n) {\n      var msgname = i18n[key];\n      if (msgname.substr(0, 1) == '$')\n        msgname = thunk(node.getAttribute(msgname.substr(1)) + '_' + key);\n\n      var msg = this.get(msgname);\n      if (key == '_') {\n        node.textContent = msg;\n      } else {\n        node.setAttribute(key, msg);\n      }\n    }\n  }\n};\n// SOURCE FILE: libdot/js/lib_preference_manager.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * Constructor for lib.PreferenceManager objects.\n *\n * These objects deal with persisting changes to stable storage and notifying\n * consumers when preferences change.\n *\n * It is intended that the backing store could be something other than HTML5\n * storage, but there aren't any use cases at the moment.  In the future there\n * may be a chrome api to store sync-able name/value pairs, and we'd want\n * that.\n *\n * @param {lib.Storage.*} storage The storage object to use as a backing\n *     store.\n * @param {string} opt_prefix The optional prefix to be used for all preference\n *     names.  The '/' character should be used to separate levels of heirarchy,\n *     if you're going to have that kind of thing.  If provided, the prefix\n *     should start with a '/'.  If not provided, it defaults to '/'.\n */\nlib.PreferenceManager = function(storage, opt_prefix) {\n  this.storage = storage;\n  this.storageObserver_ = this.onStorageChange_.bind(this);\n\n  this.isActive_ = false;\n  this.activate();\n\n  this.trace = false;\n\n  var prefix = opt_prefix || '/';\n  if (prefix.substr(prefix.length - 1) != '/')\n    prefix += '/';\n\n  this.prefix = prefix;\n\n  this.prefRecords_ = {};\n  this.globalObservers_ = [];\n\n  this.childFactories_ = {};\n\n  // Map of list-name to {map of child pref managers}\n  // As in...\n  //\n  //  this.childLists_ = {\n  //    'profile-ids': {\n  //      'one': PreferenceManager,\n  //      'two': PreferenceManager,\n  //      ...\n  //    },\n  //\n  //    'frob-ids': {\n  //      ...\n  //    }\n  //  }\n  this.childLists_ = {};\n};\n\n/**\n * Used internally to indicate that the current value of the preference should\n * be taken from the default value defined with the preference.\n *\n * Equality tests against this value MUST use '===' or '!==' to be accurate.\n */\nlib.PreferenceManager.prototype.DEFAULT_VALUE = new String('DEFAULT');\n\n/**\n * An individual preference.\n *\n * These objects are managed by the PreferenceManager, you shoudn't need to\n * handle them directly.\n */\nlib.PreferenceManager.Record = function(name, defaultValue) {\n  this.name = name;\n  this.defaultValue = defaultValue;\n  this.currentValue = this.DEFAULT_VALUE;\n  this.observers = [];\n};\n\n/**\n * A local copy of the DEFAULT_VALUE constant to make it less verbose.\n */\nlib.PreferenceManager.Record.prototype.DEFAULT_VALUE =\n    lib.PreferenceManager.prototype.DEFAULT_VALUE;\n\n/**\n * Register a callback to be invoked when this preference changes.\n *\n * @param {function(value, string, lib.PreferenceManager} observer The function\n *     to invoke.  It will receive the new value, the name of the preference,\n *     and a reference to the PreferenceManager as parameters.\n */\nlib.PreferenceManager.Record.prototype.addObserver = function(observer) {\n  this.observers.push(observer);\n};\n\n/**\n * Unregister an observer callback.\n *\n * @param {function} observer A previously registered callback.\n */\nlib.PreferenceManager.Record.prototype.removeObserver = function(observer) {\n  var i = this.observers.indexOf(observer);\n  if (i >= 0)\n    this.observers.splice(i, 1);\n};\n\n/**\n * Fetch the value of this preference.\n */\nlib.PreferenceManager.Record.prototype.get = function() {\n  if (this.currentValue === this.DEFAULT_VALUE) {\n    if (/^(string|number)$/.test(typeof this.defaultValue))\n      return this.defaultValue;\n\n    if (typeof this.defaultValue == 'object') {\n      // We want to return a COPY of the default value so that users can\n      // modify the array or object without changing the default value.\n      return JSON.parse(JSON.stringify(this.defaultValue));\n    }\n\n    return this.defaultValue;\n  }\n\n  return this.currentValue;\n};\n\n/**\n * Stop this preference manager from tracking storage changes.\n *\n * Call this if you're going to swap out one preference manager for another so\n * that you don't get notified about irrelevant changes.\n */\nlib.PreferenceManager.prototype.deactivate = function() {\n  if (!this.isActive_)\n    throw new Error('Not activated');\n\n  this.isActive_ = false;\n  this.storage.removeObserver(this.storageObserver_);\n};\n\n/**\n * Start tracking storage changes.\n *\n * If you previously deactivated this preference manager, you can reactivate it\n * with this method.  You don't need to call this at initialization time, as\n * it's automatically called as part of the constructor.\n */\nlib.PreferenceManager.prototype.activate = function() {\n  if (this.isActive_)\n    throw new Error('Already activated');\n\n  this.isActive_ = true;\n  this.storage.addObserver(this.storageObserver_);\n};\n\n/**\n * Read the backing storage for these preferences.\n *\n * You should do this once at initialization time to prime the local cache\n * of preference values.  The preference manager will monitor the backing\n * storage for changes, so you should not need to call this more than once.\n *\n * This function recursively reads storage for all child preference managers as\n * well.\n *\n * This function is asynchronous, if you need to read preference values, you\n * *must* wait for the callback.\n *\n * @param {function()} opt_callback Optional function to invoke when the read\n *     has completed.\n */\nlib.PreferenceManager.prototype.readStorage = function(opt_callback) {\n  var pendingChildren = 0;\n\n  function onChildComplete() {\n    if (--pendingChildren == 0 && opt_callback)\n      opt_callback();\n  }\n\n  var keys = Object.keys(this.prefRecords_).map(\n      function(el) { return this.prefix + el }.bind(this));\n\n  if (this.trace)\n    console.log('Preferences read: ' + this.prefix);\n\n  this.storage.getItems(keys, function(items) {\n      var prefixLength = this.prefix.length;\n\n      for (var key in items) {\n        var value = items[key];\n        var name = key.substr(prefixLength);\n        var needSync = (name in this.childLists_ &&\n                        (JSON.stringify(value) !=\n                         JSON.stringify(this.prefRecords_[name].currentValue)));\n\n        this.prefRecords_[name].currentValue = value;\n\n        if (needSync) {\n          pendingChildren++;\n          this.syncChildList(name, onChildComplete);\n        }\n      }\n\n      if (pendingChildren == 0 && opt_callback)\n        setTimeout(opt_callback);\n    }.bind(this));\n};\n\n/**\n * Define a preference.\n *\n * This registers a name, default value, and onChange handler for a preference.\n *\n * @param {string} name The name of the preference.  This will be prefixed by\n *     the prefix of this PreferenceManager before written to local storage.\n * @param {string|number|boolean|Object|Array|null} value The default value of\n *     this preference.  Anything that can be represented in JSON is a valid\n *     default value.\n * @param {function(value, string, lib.PreferenceManager} opt_observer A\n *     function to invoke when the preference changes.  It will receive the new\n *     value, the name of the preference, and a reference to the\n *     PreferenceManager as parameters.\n */\nlib.PreferenceManager.prototype.definePreference = function(\n    name, value, opt_onChange) {\n\n  var record = this.prefRecords_[name];\n  if (record) {\n    this.changeDefault(name, value);\n  } else {\n    record = this.prefRecords_[name] =\n        new lib.PreferenceManager.Record(name, value);\n  }\n\n  if (opt_onChange)\n    record.addObserver(opt_onChange);\n};\n\n/**\n * Define multiple preferences with a single function call.\n *\n * @param {Array} defaults An array of 3-element arrays.  Each three element\n *     array should contain the [key, value, onChange] parameters for a\n *     preference.\n */\nlib.PreferenceManager.prototype.definePreferences = function(defaults) {\n  for (var i = 0; i < defaults.length; i++) {\n    this.definePreference(defaults[i][0], defaults[i][1], defaults[i][2]);\n  }\n};\n\n/**\n * Define an ordered list of child preferences.\n *\n * Child preferences are different from just storing an array of JSON objects\n * in that each child is an instance of a preference manager.  This means you\n * can observe changes to individual child preferences, and get some validation\n * that you're not reading or writing to an undefined child preference value.\n *\n * @param {string} listName A name for the list of children.  This must be\n *     unique in this preference manager.  The listName will become a\n *     preference on this PreferenceManager used to store the ordered list of\n *     child ids.  It is also used in get/add/remove operations to identify the\n *     list of children to operate on.\n * @param {function} childFactory A function that will be used to generate\n *     instances of these childred.  The factory function will receive the\n *     parent lib.PreferenceManager object and a unique id for the new child\n *     preferences.\n */\nlib.PreferenceManager.prototype.defineChildren = function(\n    listName, childFactory) {\n\n  // Define a preference to hold the ordered list of child ids.\n  this.definePreference(listName, [],\n                        this.onChildListChange_.bind(this, listName));\n  this.childFactories_[listName] = childFactory;\n  this.childLists_[listName] = {};\n};\n\n/**\n * Register to observe preference changes.\n *\n * @param {Function} global A callback that will happen for every preference.\n *     Pass null if you don't need one.\n * @param {Object} map A map of preference specific callbacks.  Pass null if\n *     you don't need any.\n */\nlib.PreferenceManager.prototype.addObservers = function(global, map) {\n  if (global && typeof global != 'function')\n    throw new Error('Invalid param: globals');\n\n  if (global)\n    this.globalObservers_.push(global);\n\n  if (!map)\n    return;\n\n  for (var name in map) {\n    if (!(name in this.prefRecords_))\n      throw new Error('Unknown preference: ' + name);\n\n    this.prefRecords_[name].addObserver(map[name]);\n  }\n};\n\n/**\n * Dispatch the change observers for all known preferences.\n *\n * It may be useful to call this after readStorage completes, in order to\n * get application state in sync with user preferences.\n *\n * This can be used if you've changed a preference manager out from under\n * a live object, for example when switching to a different prefix.\n */\nlib.PreferenceManager.prototype.notifyAll = function() {\n  for (var name in this.prefRecords_) {\n    this.notifyChange_(name);\n  }\n};\n\n/**\n * Notify the change observers for a given preference.\n *\n * @param {string} name The name of the preference that changed.\n */\nlib.PreferenceManager.prototype.notifyChange_ = function(name) {\n  var record = this.prefRecords_[name];\n  if (!record)\n    throw new Error('Unknown preference: ' + name);\n\n  var currentValue = record.get();\n\n  for (var i = 0; i < this.globalObservers_.length; i++)\n    this.globalObservers_[i](name, currentValue);\n\n  for (var i = 0; i < record.observers.length; i++) {\n    record.observers[i](currentValue, name, this);\n  }\n};\n\n/**\n * Create a new child PreferenceManager for the given child list.\n *\n * The optional hint parameter is an opaque prefix added to the auto-generated\n * unique id for this child.  Your child factory can parse out the prefix\n * and use it.\n *\n * @param {string} listName The child list to create the new instance from.\n * @param {string} opt_hint Optional hint to include in the child id.\n * @param {string} opt_id Optional id to override the generated id.\n */\nlib.PreferenceManager.prototype.createChild = function(listName, opt_hint,\n                                                       opt_id) {\n  var ids = this.get(listName);\n  var id;\n\n  if (opt_id) {\n    id = opt_id;\n    if (ids.indexOf(id) != -1)\n      throw new Error('Duplicate child: ' + listName + ': ' + id);\n\n  } else {\n    // Pick a random, unique 4-digit hex identifier for the new profile.\n    while (!id || ids.indexOf(id) != -1) {\n      id = Math.floor(Math.random() * 0xffff + 1).toString(16);\n      id = lib.f.zpad(id, 4);\n      if (opt_hint)\n        id = opt_hint + ':' + id;\n    }\n  }\n\n  var childManager = this.childFactories_[listName](this, id);\n  childManager.trace = this.trace;\n  childManager.resetAll();\n\n  this.childLists_[listName][id] = childManager;\n\n  ids.push(id);\n  this.set(listName, ids);\n\n  return childManager;\n};\n\n/**\n * Remove a child preferences instance.\n *\n * Removes a child preference manager and clears any preferences stored in it.\n *\n * @param {string} listName The name of the child list containing the child to\n *     remove.\n * @param {string} id The child ID.\n */\nlib.PreferenceManager.prototype.removeChild = function(listName, id) {\n  var prefs = this.getChild(listName, id);\n  prefs.resetAll();\n\n  var ids = this.get(listName);\n  var i = ids.indexOf(id);\n  if (i != -1) {\n    ids.splice(i, 1);\n    this.set(listName, ids);\n  }\n\n  delete this.childLists_[listName][id];\n};\n\n/**\n * Return a child PreferenceManager instance for a given id.\n *\n * If the child list or child id is not known this will return the specified\n * default value or throw an exception if no default value is provided.\n *\n * @param {string} listName The child list to look in.\n * @param {string} id The child ID.\n * @param {*} opt_default The optional default value to return if the child\n *     is not found.\n */\nlib.PreferenceManager.prototype.getChild = function(listName, id, opt_default) {\n  if (!(listName in this.childLists_))\n    throw new Error('Unknown child list: ' + listName);\n\n  var childList = this.childLists_[listName];\n  if (!(id in childList)) {\n    if (typeof opt_default == 'undefined')\n      throw new Error('Unknown \"' + listName + '\" child: ' + id);\n\n    return opt_default;\n  }\n\n  return childList[id];\n};\n\n/**\n * Calculate the difference between two lists of child ids.\n *\n * Given two arrays of child ids, this function will return an object\n * with \"added\", \"removed\", and \"common\" properties.  Each property is\n * a map of child-id to `true`.  For example, given...\n *\n *    a = ['child-x', 'child-y']\n *    b = ['child-y']\n *\n *    diffChildLists(a, b) =>\n *      { added: { 'child-x': true }, removed: {}, common: { 'child-y': true } }\n *\n * The added/removed properties assume that `a` is the current list.\n *\n * @param {Array[string]} a The most recent list of child ids.\n * @param {Array[string]} b An older list of child ids.\n * @return {Object} An object with added/removed/common properties.\n */\nlib.PreferenceManager.diffChildLists = function(a, b) {\n  var rv = {\n    added: {},\n    removed: {},\n    common: {},\n  };\n\n  for (var i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) != -1) {\n      rv.common[a[i]] = true;\n    } else {\n      rv.added[a[i]] = true;\n    }\n  }\n\n  for (var i = 0; i < b.length; i++) {\n    if ((b[i] in rv.added) || (b[i] in rv.common))\n      continue;\n\n    rv.removed[b[i]] = true;\n  }\n\n  return rv;\n};\n\n/**\n * Synchronize a list of child PreferenceManagers instances with the current\n * list stored in prefs.\n *\n * This will instantiate any missing managers and read current preference values\n * from storage.  Any active managers that no longer appear in preferences will\n * be deleted.\n *\n * @param {string} listName The child list to synchronize.\n * @param {function()} opt_callback Optional function to invoke when the sync\n *     is complete.\n */\nlib.PreferenceManager.prototype.syncChildList = function(\n    listName, opt_callback) {\n\n  var pendingChildren = 0;\n  function onChildStorage() {\n    if (--pendingChildren == 0 && opt_callback)\n      opt_callback();\n  }\n\n  // The list of child ids that we *should* have a manager for.\n  var currentIds = this.get(listName);\n\n  // The known managers at the start of the sync.  Any manager still in this\n  // list at the end should be discarded.\n  var oldIds = Object.keys(this.childLists_[listName]);\n\n  var rv = lib.PreferenceManager.diffChildLists(currentIds, oldIds);\n\n  for (var i = 0; i < currentIds.length; i++) {\n    var id = currentIds[i];\n\n    var managerIndex = oldIds.indexOf(id);\n    if (managerIndex >= 0)\n      oldIds.splice(managerIndex, 1);\n\n    if (!this.childLists_[listName][id]) {\n      var childManager = this.childFactories_[listName](this, id);\n      if (!childManager) {\n        console.warn('Unable to restore child: ' + listName + ': ' + id);\n        continue;\n      }\n\n      childManager.trace = this.trace;\n      this.childLists_[listName][id] = childManager;\n      pendingChildren++;\n      childManager.readStorage(onChildStorage);\n    }\n  }\n\n  for (var i = 0; i < oldIds.length; i++) {\n    delete this.childLists_[listName][oldIds[i]];\n  }\n\n  if (!pendingChildren && opt_callback)\n    setTimeout(opt_callback);\n};\n\n/**\n * Reset a preference to its default state.\n *\n * This will dispatch the onChange handler if the preference value actually\n * changes.\n *\n * @param {string} name The preference to reset.\n */\nlib.PreferenceManager.prototype.reset = function(name) {\n  var record = this.prefRecords_[name];\n  if (!record)\n    throw new Error('Unknown preference: ' + name);\n\n  this.storage.removeItem(this.prefix + name);\n\n  if (record.currentValue !== this.DEFAULT_VALUE) {\n    record.currentValue = this.DEFAULT_VALUE;\n    this.notifyChange_(name);\n  }\n};\n\n/**\n * Reset all preferences back to their default state.\n */\nlib.PreferenceManager.prototype.resetAll = function() {\n  var changed = [];\n\n  for (var listName in this.childLists_) {\n    var childList = this.childLists_[listName];\n    for (var id in childList) {\n      childList[id].resetAll();\n    }\n  }\n\n  for (var name in this.prefRecords_) {\n    if (this.prefRecords_[name].currentValue !== this.DEFAULT_VALUE) {\n      this.prefRecords_[name].currentValue = this.DEFAULT_VALUE;\n      changed.push(name);\n    }\n  }\n\n  var keys = Object.keys(this.prefRecords_).map(function(el) {\n      return this.prefix + el;\n  }.bind(this));\n\n  this.storage.removeItems(keys);\n\n  changed.forEach(this.notifyChange_.bind(this));\n};\n\n/**\n * Return true if two values should be considered not-equal.\n *\n * If both values are the same scalar type and compare equal this function\n * returns false (no difference), otherwise return true.\n *\n * This is used in places where we want to check if a preference has changed.\n * Rather than take the time to compare complex values we just consider them\n * to always be different.\n *\n * @param {*} a A value to compare.\n * @param {*} b A value to compare.\n */\nlib.PreferenceManager.prototype.diff = function(a, b) {\n  // If the types are different, or the type is not a simple primitive one.\n  if ((typeof a) !== (typeof b) ||\n      !(/^(undefined|boolean|number|string)$/.test(typeof a))) {\n    return true;\n  }\n\n  return a !== b;\n};\n\n/**\n * Change the default value of a preference.\n *\n * This is useful when subclassing preference managers.\n *\n * The function does not alter the current value of the preference, unless\n * it has the old default value.  When that happens, the change observers\n * will be notified.\n *\n * @param {string} name The name of the parameter to change.\n * @param {*} newValue The new default value for the preference.\n */\nlib.PreferenceManager.prototype.changeDefault = function(name, newValue) {\n  var record = this.prefRecords_[name];\n  if (!record)\n    throw new Error('Unknown preference: ' + name);\n\n  if (!this.diff(record.defaultValue, newValue)) {\n    // Default value hasn't changed.\n    return;\n  }\n\n  if (record.currentValue !== this.DEFAULT_VALUE) {\n    // This pref has a specific value, just change the default and we're done.\n    record.defaultValue = newValue;\n    return;\n  }\n\n  record.defaultValue = newValue;\n\n  this.notifyChange_(name);\n};\n\n/**\n * Change the default value of multiple preferences.\n *\n * @param {Object} map A map of name -> value pairs specifying the new default\n *     values.\n */\nlib.PreferenceManager.prototype.changeDefaults = function(map) {\n  for (var key in map) {\n    this.changeDefault(key, map[key]);\n  }\n};\n\n/**\n * Set a preference to a specific value.\n *\n * This will dispatch the onChange handler if the preference value actually\n * changes.\n *\n * @param {string} key The preference to set.\n * @param {*} value The value to set.  Anything that can be represented in\n *     JSON is a valid value.\n */\nlib.PreferenceManager.prototype.set = function(name, newValue) {\n  var record = this.prefRecords_[name];\n  if (!record)\n    throw new Error('Unknown preference: ' + name);\n\n  var oldValue = record.get();\n\n  if (!this.diff(oldValue, newValue))\n    return;\n\n  if (this.diff(record.defaultValue, newValue)) {\n    record.currentValue = newValue;\n    this.storage.setItem(this.prefix + name, newValue);\n  } else {\n    record.currentValue = this.DEFAULT_VALUE;\n    this.storage.removeItem(this.prefix + name);\n  }\n\n  // We need to manually send out the notification on this instance.  If we\n  // The storage event won't fire a notification because we've already changed\n  // the currentValue, so it won't see a difference.  If we delayed changing\n  // currentValue until the storage event, a pref read immediately after a write\n  // would return the previous value.\n  //\n  // The notification is in a timeout so clients don't accidentally depend on\n  // a synchronous notification.\n  setTimeout(this.notifyChange_.bind(this, name), 0);\n};\n\n/**\n * Get the value of a preference.\n *\n * @param {string} key The preference to get.\n */\nlib.PreferenceManager.prototype.get = function(name) {\n  var record = this.prefRecords_[name];\n  if (!record)\n    throw new Error('Unknown preference: ' + name);\n\n  return record.get();\n};\n\n/**\n * Return all non-default preferences as a JSON onject.\n *\n * This includes any nested preference managers as well.\n */\nlib.PreferenceManager.prototype.exportAsJson = function() {\n  var rv = {};\n\n  for (var name in this.prefRecords_) {\n    if (name in this.childLists_) {\n      rv[name] = [];\n      var childIds = this.get(name);\n      for (var i = 0; i < childIds.length; i++) {\n        var id = childIds[i];\n        rv[name].push({id: id, json: this.getChild(name, id).exportAsJson()});\n      }\n\n    } else {\n      var record = this.prefRecords_[name];\n      if (record.currentValue != this.DEFAULT_VALUE)\n        rv[name] = record.currentValue;\n    }\n  }\n\n  return rv;\n};\n\n/**\n * Import a JSON blob of preferences previously generated with exportAsJson.\n *\n * This will create nested preference managers as well.\n */\nlib.PreferenceManager.prototype.importFromJson = function(json) {\n  for (var name in json) {\n    if (name in this.childLists_) {\n      var childList = json[name];\n      for (var i = 0; i < childList.length; i++) {\n        var id = childList[i].id;\n\n        var childPrefManager = this.childLists_[name][id];\n        if (!childPrefManager)\n          childPrefManager = this.createChild(name, null, id);\n\n        childPrefManager.importFromJson(childList[i].json);\n      }\n\n    } else {\n      this.set(name, json[name]);\n    }\n  }\n};\n\n/**\n * Called when one of the child list preferences changes.\n */\nlib.PreferenceManager.prototype.onChildListChange_ = function(listName) {\n  this.syncChildList(listName);\n};\n\n/**\n * Called when a key in the storage changes.\n */\nlib.PreferenceManager.prototype.onStorageChange_ = function(map) {\n  for (var key in map) {\n    if (this.prefix) {\n      if (key.lastIndexOf(this.prefix, 0) != 0)\n        continue;\n    }\n\n    var name = key.substr(this.prefix.length);\n\n    if (!(name in this.prefRecords_)) {\n      // Sometimes we'll get notified about prefs that are no longer defined.\n      continue;\n    }\n\n    var record = this.prefRecords_[name];\n\n    var newValue = map[key].newValue;\n    var currentValue = record.currentValue;\n    if (currentValue === record.DEFAULT_VALUE)\n      currentValue = (void 0);\n\n    if (this.diff(currentValue, newValue)) {\n      if (typeof newValue == 'undefined') {\n        record.currentValue = record.DEFAULT_VALUE;\n      } else {\n        record.currentValue = newValue;\n      }\n\n      this.notifyChange_(name);\n    }\n  }\n};\n// SOURCE FILE: libdot/js/lib_resource.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * Storage for canned resources.\n *\n * These are usually non-JavaScript things that are collected during a build\n * step and converted into a series of 'lib.resource.add(...)' calls.  See\n * the \"@resource\" directive from libdot/bin/concat.sh for the canonical use\n * case.\n *\n * This is global storage, so you should prefix your resource names to avoid\n * collisions.\n */\nlib.resource = {\n  resources_: {}\n};\n\n/**\n * Add a resource.\n *\n * @param {string} name A name for the resource.  You should prefix this to\n *   avoid collisions with resources from a shared library.\n * @param {string} type A mime type for the resource, or \"raw\" if not\n *   applicable.\n * @param {*} data The value of the resource.\n */\nlib.resource.add = function(name, type, data) {\n  lib.resource.resources_[name] = {\n    type: type,\n    name: name,\n    data: data\n  };\n};\n\n/**\n * Retrieve a resource record.\n *\n * The resource data is stored on the \"data\" property of the returned object.\n *\n * @param {string} name The name of the resource to get.\n * @param {*} opt_defaultValue The optional value to return if the resource is\n *   not defined.\n * @return {object} An object with \"type\", \"name\", and \"data\" properties.\n */\nlib.resource.get = function(name, opt_defaultValue) {\n  if (!(name in lib.resource.resources_)) {\n    if (typeof opt_defaultValue == 'undefined')\n      throw 'Unknown resource: ' + name;\n\n    return opt_defaultValue;\n  }\n\n  return lib.resource.resources_[name];\n};\n\n/**\n * Retrieve resource data.\n *\n * @param {string} name The name of the resource to get.\n * @param {*} opt_defaultValue The optional value to return if the resource is\n *   not defined.\n * @return {*} The resource data.\n */\nlib.resource.getData = function(name, opt_defaultValue) {\n  if (!(name in lib.resource.resources_)) {\n    if (typeof opt_defaultValue == 'undefined')\n      throw 'Unknown resource: ' + name;\n\n    return opt_defaultValue;\n  }\n\n  return lib.resource.resources_[name].data;\n};\n\n/**\n * Retrieve resource as a data: url.\n *\n * @param {string} name The name of the resource to get.\n * @param {*} opt_defaultValue The optional value to return if the resource is\n *   not defined.\n * @return {*} A data: url encoded version of the resource.\n */\nlib.resource.getDataUrl = function(name, opt_defaultValue) {\n  var resource = lib.resource.get(name, opt_defaultValue);\n  return 'data:' + resource.type + ',' + resource.data;\n};\n// SOURCE FILE: libdot/js/lib_storage.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * Namespace for implementations of persistent, possibly cloud-backed\n * storage.\n */\nlib.Storage = new Object();\n// SOURCE FILE: libdot/js/lib_storage_chrome.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * chrome.storage based class with an async interface that is interchangeable\n * with other lib.Storage.* implementations.\n */\nlib.Storage.Chrome = function(storage) {\n  this.storage_ = storage;\n  this.observers_ = [];\n\n  chrome.storage.onChanged.addListener(this.onChanged_.bind(this));\n};\n\n/**\n * Called by the storage implementation when the storage is modified.\n */\nlib.Storage.Chrome.prototype.onChanged_ = function(changes, areaname) {\n  if (chrome.storage[areaname] != this.storage_)\n    return;\n\n  for (var i = 0; i < this.observers_.length; i++) {\n    this.observers_[i](changes);\n  }\n};\n\n/**\n * Register a function to observe storage changes.\n *\n * @param {function(map)} callback The function to invoke when the storage\n *     changes.\n */\nlib.Storage.Chrome.prototype.addObserver = function(callback) {\n  this.observers_.push(callback);\n};\n\n/**\n * Unregister a change observer.\n *\n * @param {function} observer A previously registered callback.\n */\nlib.Storage.Chrome.prototype.removeObserver = function(callback) {\n  var i = this.observers_.indexOf(callback);\n  if (i != -1)\n    this.observers_.splice(i, 1);\n};\n\n/**\n * Delete everything in this storage.\n *\n * @param {function(map)} callback The function to invoke when the delete\n *     has completed.\n */\nlib.Storage.Chrome.prototype.clear = function(opt_callback) {\n  this.storage_.clear();\n\n  if (opt_callback)\n    setTimeout(opt_callback, 0);\n};\n\n/**\n * Return the current value of a storage item.\n *\n * @param {string} key The key to look up.\n * @param {function(value) callback The function to invoke when the value has\n *     been retrieved.\n */\nlib.Storage.Chrome.prototype.getItem = function(key, callback) {\n  this.storage_.get(key, callback);\n};\n/**\n * Fetch the values of multiple storage items.\n *\n * @param {Array} keys The keys to look up.\n * @param {function(map) callback The function to invoke when the values have\n *     been retrieved.\n */\n\nlib.Storage.Chrome.prototype.getItems = function(keys, callback) {\n  this.storage_.get(keys, callback);\n};\n\n/**\n * Set a value in storage.\n *\n * @param {string} key The key for the value to be stored.\n * @param {*} value The value to be stored.  Anything that can be serialized\n *     with JSON is acceptable.\n * @param {function()} opt_callback Optional function to invoke when the\n *     set is complete.  You don't have to wait for the set to complete in order\n *     to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Chrome.prototype.setItem = function(key, value, opt_callback) {\n  var obj = {};\n  obj[key] = value;\n  this.storage_.set(obj, opt_callback);\n};\n\n/**\n * Set multiple values in storage.\n *\n * @param {Object} map A map of key/values to set in storage.\n * @param {function()} opt_callback Optional function to invoke when the\n *     set is complete.  You don't have to wait for the set to complete in order\n *     to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Chrome.prototype.setItems = function(obj, opt_callback) {\n  this.storage_.set(obj, opt_callback);\n};\n\n/**\n * Remove an item from storage.\n *\n * @param {string} key The key to be removed.\n * @param {function()} opt_callback Optional function to invoke when the\n *     remove is complete.  You don't have to wait for the set to complete in\n *     order to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Chrome.prototype.removeItem = function(key, opt_callback) {\n  this.storage_.remove(key, opt_callback);\n};\n\n/**\n * Remove multiple items from storage.\n *\n * @param {Array} keys The keys to be removed.\n * @param {function()} opt_callback Optional function to invoke when the\n *     remove is complete.  You don't have to wait for the set to complete in\n *     order to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Chrome.prototype.removeItems = function(keys, opt_callback) {\n  this.storage_.remove(keys, opt_callback);\n};\n// SOURCE FILE: libdot/js/lib_storage_local.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * window.localStorage based class with an async interface that is\n * interchangeable with other lib.Storage.* implementations.\n */\nlib.Storage.Local = function() {\n  this.observers_ = [];\n  this.storage_ = window.localStorage;\n  window.addEventListener('storage', this.onStorage_.bind(this));\n};\n\n/**\n * Called by the storage implementation when the storage is modified.\n */\nlib.Storage.Local.prototype.onStorage_ = function(e) {\n  if (e.storageArea != this.storage_)\n    return;\n\n  // IE throws an exception if JSON.parse is given an empty string.\n  var prevValue = e.oldValue ? JSON.parse(e.oldValue) : \"\";\n  var curValue = e.newValue ? JSON.parse(e.newValue) : \"\";\n  var o = {};\n  o[e.key] = {\n    oldValue: prevValue,\n    newValue: curValue\n  };\n\n  for (var i = 0; i < this.observers_.length; i++) {\n    this.observers_[i](o);\n  }\n};\n\n/**\n * Register a function to observe storage changes.\n *\n * @param {function(map)} callback The function to invoke when the storage\n *     changes.\n */\nlib.Storage.Local.prototype.addObserver = function(callback) {\n  this.observers_.push(callback);\n};\n\n/**\n * Unregister a change observer.\n *\n * @param {function} observer A previously registered callback.\n */\nlib.Storage.Local.prototype.removeObserver = function(callback) {\n  var i = this.observers_.indexOf(callback);\n  if (i != -1)\n    this.observers_.splice(i, 1);\n};\n\n/**\n * Delete everything in this storage.\n *\n * @param {function(map)} callback The function to invoke when the delete\n *     has completed.\n */\nlib.Storage.Local.prototype.clear = function(opt_callback) {\n  this.storage_.clear();\n\n  if (opt_callback)\n    setTimeout(opt_callback, 0);\n};\n\n/**\n * Return the current value of a storage item.\n *\n * @param {string} key The key to look up.\n * @param {function(value) callback The function to invoke when the value has\n *     been retrieved.\n */\nlib.Storage.Local.prototype.getItem = function(key, callback) {\n  var value = this.storage_.getItem(key);\n\n  if (typeof value == 'string') {\n    try {\n      value = JSON.parse(value);\n    } catch (e) {\n      // If we can't parse the value, just return it unparsed.\n    }\n  }\n\n  setTimeout(callback.bind(null, value), 0);\n};\n\n/**\n * Fetch the values of multiple storage items.\n *\n * @param {Array} keys The keys to look up.\n * @param {function(map) callback The function to invoke when the values have\n *     been retrieved.\n */\nlib.Storage.Local.prototype.getItems = function(keys, callback) {\n  var rv = {};\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    var key = keys[i];\n    var value = this.storage_.getItem(key);\n    if (typeof value == 'string') {\n      try {\n        rv[key] = JSON.parse(value);\n      } catch (e) {\n        // If we can't parse the value, just return it unparsed.\n        rv[key] = value;\n      }\n    } else {\n      keys.splice(i, 1);\n    }\n  }\n\n  setTimeout(callback.bind(null, rv), 0);\n};\n\n/**\n * Set a value in storage.\n *\n * @param {string} key The key for the value to be stored.\n * @param {*} value The value to be stored.  Anything that can be serialized\n *     with JSON is acceptable.\n * @param {function()} opt_callback Optional function to invoke when the\n *     set is complete.  You don't have to wait for the set to complete in order\n *     to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Local.prototype.setItem = function(key, value, opt_callback) {\n  this.storage_.setItem(key, JSON.stringify(value));\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n\n/**\n * Set multiple values in storage.\n *\n * @param {Object} map A map of key/values to set in storage.\n * @param {function()} opt_callback Optional function to invoke when the\n *     set is complete.  You don't have to wait for the set to complete in order\n *     to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Local.prototype.setItems = function(obj, opt_callback) {\n  for (var key in obj) {\n    this.storage_.setItem(key, JSON.stringify(obj[key]));\n  }\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n\n/**\n * Remove an item from storage.\n *\n * @param {string} key The key to be removed.\n * @param {function()} opt_callback Optional function to invoke when the\n *     remove is complete.  You don't have to wait for the set to complete in\n *     order to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Local.prototype.removeItem = function(key, opt_callback) {\n  this.storage_.removeItem(key);\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n\n/**\n * Remove multiple items from storage.\n *\n * @param {Array} keys The keys to be removed.\n * @param {function()} opt_callback Optional function to invoke when the\n *     remove is complete.  You don't have to wait for the set to complete in\n *     order to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Local.prototype.removeItems = function(ary, opt_callback) {\n  for (var i = 0; i < ary.length; i++) {\n    this.storage_.removeItem(ary[i]);\n  }\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n// SOURCE FILE: libdot/js/lib_storage_memory.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * In-memory storage class with an async interface that is interchangeable with\n * other lib.Storage.* implementations.\n */\nlib.Storage.Memory = function() {\n  this.observers_ = [];\n  this.storage_ = {};\n};\n\n/**\n * Register a function to observe storage changes.\n *\n * @param {function(map)} callback The function to invoke when the storage\n *     changes.\n */\nlib.Storage.Memory.prototype.addObserver = function(callback) {\n  this.observers_.push(callback);\n};\n\n/**\n * Unregister a change observer.\n *\n * @param {function} observer A previously registered callback.\n */\nlib.Storage.Memory.prototype.removeObserver = function(callback) {\n  var i = this.observers_.indexOf(callback);\n  if (i != -1)\n    this.observers_.splice(i, 1);\n};\n\n/**\n * Delete everything in this storage.\n *\n * @param {function(map)} callback The function to invoke when the delete\n *     has completed.\n */\nlib.Storage.Memory.prototype.clear = function(opt_callback) {\n  var e = {};\n  for (var key in this.storage_) {\n    e[key] = {oldValue: this.storage_[key], newValue: (void 0)};\n  }\n\n  this.storage_ = {};\n\n  setTimeout(function() {\n    for (var i = 0; i < this.observers_.length; i++) {\n      this.observers_[i](e);\n    }\n  }.bind(this), 0);\n\n  if (opt_callback)\n    setTimeout(opt_callback, 0);\n};\n\n/**\n * Return the current value of a storage item.\n *\n * @param {string} key The key to look up.\n * @param {function(value) callback The function to invoke when the value has\n *     been retrieved.\n */\nlib.Storage.Memory.prototype.getItem = function(key, callback) {\n  var value = this.storage_[key];\n\n  if (typeof value == 'string') {\n    try {\n      value = JSON.parse(value);\n    } catch (e) {\n      // If we can't parse the value, just return it unparsed.\n    }\n  }\n\n  setTimeout(callback.bind(null, value), 0);\n};\n\n/**\n * Fetch the values of multiple storage items.\n *\n * @param {Array} keys The keys to look up.\n * @param {function(map) callback The function to invoke when the values have\n *     been retrieved.\n */\nlib.Storage.Memory.prototype.getItems = function(keys, callback) {\n  var rv = {};\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    var key = keys[i];\n    var value = this.storage_[key];\n    if (typeof value == 'string') {\n      try {\n        rv[key] = JSON.parse(value);\n      } catch (e) {\n        // If we can't parse the value, just return it unparsed.\n        rv[key] = value;\n      }\n    } else {\n      keys.splice(i, 1);\n    }\n  }\n\n  setTimeout(callback.bind(null, rv), 0);\n};\n\n/**\n * Set a value in storage.\n *\n * @param {string} key The key for the value to be stored.\n * @param {*} value The value to be stored.  Anything that can be serialized\n *     with JSON is acceptable.\n * @param {function()} opt_callback Optional function to invoke when the\n *     set is complete.  You don't have to wait for the set to complete in order\n *     to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Memory.prototype.setItem = function(key, value, opt_callback) {\n  var oldValue = this.storage_[key];\n  this.storage_[key] = JSON.stringify(value);\n\n  var e = {};\n  e[key] = {oldValue: oldValue, newValue: value};\n\n  setTimeout(function() {\n    for (var i = 0; i < this.observers_.length; i++) {\n      this.observers_[i](e);\n    }\n  }.bind(this), 0);\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n\n/**\n * Set multiple values in storage.\n *\n * @param {Object} map A map of key/values to set in storage.\n * @param {function()} opt_callback Optional function to invoke when the\n *     set is complete.  You don't have to wait for the set to complete in order\n *     to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Memory.prototype.setItems = function(obj, opt_callback) {\n  var e = {};\n\n  for (var key in obj) {\n    e[key] = {oldValue: this.storage_[key], newValue: obj[key]};\n    this.storage_[key] = JSON.stringify(obj[key]);\n  }\n\n  setTimeout(function() {\n    for (var i = 0; i < this.observers_.length; i++) {\n      this.observers_[i](e);\n    }\n  }.bind(this));\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n\n/**\n * Remove an item from storage.\n *\n * @param {string} key The key to be removed.\n * @param {function()} opt_callback Optional function to invoke when the\n *     remove is complete.  You don't have to wait for the set to complete in\n *     order to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Memory.prototype.removeItem = function(key, opt_callback) {\n  delete this.storage_[key];\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n\n/**\n * Remove multiple items from storage.\n *\n * @param {Array} keys The keys to be removed.\n * @param {function()} opt_callback Optional function to invoke when the\n *     remove is complete.  You don't have to wait for the set to complete in\n *     order to read the value, since the local cache is updated synchronously.\n */\nlib.Storage.Memory.prototype.removeItems = function(ary, opt_callback) {\n  for (var i = 0; i < ary.length; i++) {\n    delete this.storage_[ary[i]];\n  }\n\n  if (opt_callback)\n  setTimeout(opt_callback, 0);\n};\n// SOURCE FILE: libdot/js/lib_test_manager.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * @fileoverview JavaScript unit testing framework for synchronous and\n *     asynchronous tests.\n *\n * This file contains the lib.TestManager and related classes.  At the moment\n * it's all collected in a single file since it's reasonably small\n * (=~1k lines), and it's a lot easier to include one file into your test\n * harness than it is to include seven.\n *\n * The following classes are defined...\n *\n *   lib.TestManager - The root class and entrypoint for creating test runs.\n *   lib.TestManager.Log - Logging service.\n *   lib.TestManager.Suite - A collection of tests.\n *   lib.TestManager.Test - A single test.\n *   lib.TestManager.TestRun - Manages the execution of a set of tests.\n *   lib.TestManager.Result - A single test result.\n */\n\n/**\n * Root object in the unit test heirarchy, and keeper of the log object.\n *\n * @param {lib.TestManager.Log} opt_log Optional lib.TestManager.Log object.\n *     Logs to the JavaScript console if ommitted.\n */\nlib.TestManager = function(opt_log) {\n  this.log = opt_log || new lib.TestManager.Log();\n}\n\n/**\n * Create a new test run object for this test manager.\n *\n * @param {Object} opt_cx An object to be passed to test suite setup(),\n *     preamble(), and test cases during this test run.  This object is opaque\n *     to lib.TestManager.* code.  It's entirely up to the test suite what it's\n *     used for.\n */\nlib.TestManager.prototype.createTestRun = function(opt_cx) {\n  return new lib.TestManager.TestRun(this, opt_cx);\n};\n\n/**\n * Called when a test run associated with this test manager completes.\n *\n * Clients may override this to call an appropriate function.\n */\nlib.TestManager.prototype.onTestRunComplete = function(testRun) {};\n\n/**\n * Destination for test case output.\n *\n * @param {function(string)} opt_logFunction Optional function to call to\n *     write a string to the log.  If ommitted, console.log is used.\n */\nlib.TestManager.Log = function(opt_logFunction) {\n  this.logFunction_ = opt_logFunction || function(s) { console.log(s) };\n  this.pending_ = '';\n  this.prefix_ = '';\n  this.prefixStack_ = [];\n};\n\n/**\n * Add a prefix to log messages.\n *\n * This only affects log messages that are added after the prefix is pushed.\n *\n * @param {string} str The prefix to prepend to future log messages.\n */\nlib.TestManager.Log.prototype.pushPrefix = function(str) {\n  this.prefixStack_.push(str);\n  this.prefix_ = this.prefixStack_.join('');\n};\n\n/**\n * Remove the most recently added message prefix.\n */\nlib.TestManager.Log.prototype.popPrefix = function() {\n  this.prefixStack_.pop();\n  this.prefix_ = this.prefixStack_.join('');\n};\n\n/**\n * Queue up a string to print to the log.\n *\n * If a line is already pending, this string is added to it.\n *\n * The string is not actually printed to the log until flush() or println()\n * is called.  The following call sequence will result in TWO lines in the\n * log...\n *\n *   log.print('hello');\n *   log.print(' ');\n *   log.println('world');\n *\n * While a typical stream-like thing would result in 'hello world\\n', this one\n * results in 'hello \\nworld\\n'.\n *\n * @param {string} str The string to add to the log.\n */\nlib.TestManager.Log.prototype.print = function(str) {\n  if (this.pending_) {\n    this.pending_ += str;\n  } else {\n    this.pending_ = this.prefix_ + str;\n  }\n};\n\n/**\n * Print a line to the log and flush it immediately.\n *\n * @param {string} str The string to add to the log.\n */\nlib.TestManager.Log.prototype.println = function(str) {\n  if (this.pending_)\n    this.flush();\n\n  this.logFunction_(this.prefix_ + str);\n};\n\n/**\n * Flush any pending log message.\n */\nlib.TestManager.Log.prototype.flush = function() {\n  if (!this.pending_)\n    return;\n\n  this.logFunction_(this.pending_);\n  this.pending_ = '';\n};\n\n/**\n * Returns a new constructor function that will inherit from\n * lib.TestManager.Suite.\n *\n * Use this function to create a new test suite subclass.  It will return a\n * properly initialized constructor function for the subclass.  You can then\n * override the setup() and preamble() methods if necessary and add test cases\n * to the subclass.\n *\n *   var MyTests = new lib.TestManager.Suite('MyTests');\n *\n *   MyTests.prototype.setup = function(cx) {\n *     // Sets this.size to cx.size if it exists, or the default value of 10\n *     // if not.\n *     this.setDefault(cx, {size: 10});\n *   };\n *\n *   MyTests.prototype.preamble = function(result, cx) {\n *     // Some tests (even successful ones) may side-effect this list, so\n *     // recreate it before every test.\n *     this.list = [];\n *     for (var i = 0; i < this.size; i++) {\n *       this.list[i] = i;\n *     }\n *   };\n *\n *   // Basic synchronous test case.\n *   MyTests.addTest('pop-length', function(result, cx) {\n *       this.list.pop();\n *\n *       // If this assertion fails, the testcase will stop here.\n *       result.assertEQ(this.list.length, this.size - 1);\n *\n *       // A test must indicate it has passed by calling this method.\n *       result.pass();\n *     });\n *\n *   // Sample asynchronous test case.\n *   MyTests.addTest('async-pop-length', function(result, cx) {\n *       var self = this;\n *\n *       var callback = function() {\n *           result.assertEQ(self.list.length, self.size - 1);\n *           result.pass();\n *       };\n *\n *       // Wait 100ms to check the array length for the sake of this example.\n *       setTimeout(callback, 100);\n *\n *       this.list.pop();\n *\n *       // Indicate that this test needs another 200ms to complete.\n *       // If the test does not report pass/fail by then, it is considered to\n *       // have timed out.\n *       result.requestTime(200);\n *     });\n *\n *   ...\n *\n * @param {string} suiteName The name of the test suite.\n */\nlib.TestManager.Suite = function(suiteName) {\n  function ctor(testManager, cx) {\n    this.testManager_ = testManager;\n    this.suiteName = suiteName;\n\n    this.setup(cx);\n  }\n\n  ctor.suiteName = suiteName;\n  ctor.addTest = lib.TestManager.Suite.addTest;\n  ctor.disableTest = lib.TestManager.Suite.disableTest;\n  ctor.getTest = lib.TestManager.Suite.getTest;\n  ctor.getTestList = lib.TestManager.Suite.getTestList;\n  ctor.testList_ = [];\n  ctor.testMap_ = {};\n  ctor.prototype = { __proto__: lib.TestManager.Suite.prototype };\n\n  lib.TestManager.Suite.subclasses.push(ctor);\n\n  return ctor;\n};\n\n/**\n * List of lib.TestManager.Suite subclasses, in the order they were defined.\n */\nlib.TestManager.Suite.subclasses = [];\n\n/**\n * Add a test to a lib.TestManager.Suite.\n *\n * This method is copied to new subclasses when they are created.\n */\nlib.TestManager.Suite.addTest = function(testName, testFunction) {\n  if (testName in this.testMap_)\n    throw 'Duplicate test name: ' + testName;\n\n  var test = new lib.TestManager.Test(this, testName, testFunction);\n  this.testMap_[testName] = test;\n  this.testList_.push(test);\n};\n\n/**\n * Defines a disabled test.\n */\nlib.TestManager.Suite.disableTest = function(testName, testFunction) {\n  if (testName in this.testMap_)\n    throw 'Duplicate test name: ' + testName;\n\n  var test = new lib.TestManager.Test(this, testName, testFunction);\n  console.log('Disabled test: ' + test.fullName);\n};\n\n/**\n * Get a lib.TestManager.Test instance by name.\n *\n * This method is copied to new subclasses when they are created.\n *\n * @param {string} testName The name of the desired test.\n * @return {lib.TestManager.Test} The requested test, or undefined if it was not\n *     found.\n */\nlib.TestManager.Suite.getTest = function(testName) {\n  return this.testMap_[testName];\n};\n\n/**\n * Get an array of lib.TestManager.Tests associated with this Suite.\n *\n * This method is copied to new subclasses when they are created.\n */\nlib.TestManager.Suite.getTestList = function() {\n  return this.testList_;\n};\n\n/**\n * Set properties on a test suite instance, pulling the property value from\n * the context if it exists and from the defaults dictionary if not.\n *\n * This is intended to be used in your test suite's setup() method to\n * define parameters for the test suite which may be overridden through the\n * context object.  For example...\n *\n *   MySuite.prototype.setup = function(cx) {\n *     this.setDefaults(cx, {size: 10});\n *   };\n *\n * If the context object has a 'size' property then this.size will be set to\n * the value of cx.size, otherwise this.size will get a default value of 10.\n *\n * @param {Object} cx The context object for a test run.\n * @param {Object} defaults An object containing name/value pairs to set on\n *     this test suite instance.  The value listed here will be used if the\n *     name is not defined on the context object.\n */\nlib.TestManager.Suite.prototype.setDefaults = function(cx, defaults) {\n  for (var k in defaults) {\n    this[k] = (k in cx) ? cx[k] : defaults[k];\n  }\n};\n\n/**\n * Subclassable method called to set up the test suite.\n *\n * The default implementation of this method is a no-op.  If your test suite\n * requires some kind of suite-wide setup, this is the place to do it.\n *\n * It's fine to store state on the test suite instance, that state will be\n * accessible to all tests in the suite.  If any test case fails, the entire\n * test suite object will be discarded and a new one will be created for\n * the remaining tests.\n *\n * Any side effects outside of this test suite instance must be idempotent.\n * For example, if you're adding DOM nodes to a document, make sure to first\n * test that they're not already there.  If they are, remove them rather than\n * reuse them.  You should not count on their state, since they were probably\n * left behind by a failed testcase.\n *\n * Any exception here will abort the remainder of the test run.\n *\n * @param {Object} cx The context object for a test run.\n */\nlib.TestManager.Suite.prototype.setup = function(cx) {};\n\n/**\n * Subclassable method called to do pre-test set up.\n *\n * The default implementation of this method is a no-op.  If your test suite\n * requires some kind of pre-test setup, this is the place to do it.\n *\n * This can be used to avoid a bunch of boilerplate setup/teardown code in\n * this suite's testcases.\n *\n * Any exception here will abort the remainder of the test run.\n *\n * @param {lib.TestManager.Result} result The result object for the upcoming\n *     test.\n * @param {Object} cx The context object for a test run.\n */\nlib.TestManager.Suite.prototype.preamble = function(result, cx) {};\n\n/**\n * Subclassable method called to do post-test tear-down.\n *\n * The default implementation of this method is a no-op.  If your test suite\n * requires some kind of pre-test setup, this is the place to do it.\n *\n * This can be used to avoid a bunch of boilerplate setup/teardown code in\n * this suite's testcases.\n *\n * Any exception here will abort the remainder of the test run.\n *\n * @param {lib.TestManager.Result} result The result object for the upcoming\n *     test.\n * @param {Object} cx The context object for a test run.\n */\nlib.TestManager.Suite.prototype.postamble = function(result, cx) {};\n\n/**\n * Object representing a single test in a test suite.\n *\n * These are created as part of the lib.TestManager.Suite.addTest() method.\n * You should never have to construct one by hand.\n *\n * @param {lib.TestManager.Suite} suiteClass The test suite class containing\n *     this test.\n * @param {string} testName The local name of this test case, not including the\n *     test suite name.\n * @param {function(lib.TestManager.Result, Object)} testFunction The function\n *     to invoke for this test case.  This is passed a Result instance and the\n *     context object associated with the test run.\n *\n */\nlib.TestManager.Test = function(suiteClass, testName, testFunction) {\n  /**\n   * The test suite class containing this function.\n   */\n  this.suiteClass = suiteClass;\n\n  /**\n   * The local name of this test, not including the test suite name.\n   */\n  this.testName = testName;\n\n  /**\n   * The global name of this test, including the test suite name.\n   */\n  this.fullName = suiteClass.suiteName + '[' + testName + ']';\n\n  // The function to call for this test.\n  this.testFunction_ = testFunction;\n};\n\n/**\n * Execute this test.\n *\n * This is called by a lib.TestManager.Result instance, as part of a\n * lib.TestManager.TestRun.  You should not call it by hand.\n *\n * @param {lib.TestManager.Result} result The result object for the test.\n */\nlib.TestManager.Test.prototype.run = function(result) {\n  try {\n    // Tests are applied to the parent lib.TestManager.Suite subclass.\n    this.testFunction_.apply(result.suite,\n                             [result, result.testRun.cx]);\n  } catch (ex) {\n    if (ex instanceof lib.TestManager.Result.TestComplete)\n      return;\n\n    result.println('Test raised an exception: ' + ex);\n\n    if (ex.stack) {\n      if (ex.stack instanceof Array) {\n        result.println(ex.stack.join('\\n'));\n      } else {\n        result.println(ex.stack);\n      }\n    }\n\n    result.completeTest_(result.FAILED, false);\n  }\n};\n\n/**\n * Used to choose a set of tests and run them.\n *\n * It's slightly more convenient to construct one of these from\n * lib.TestManager.prototype.createTestRun().\n *\n * @param {lib.TestManager} testManager The testManager associated with this\n *     TestRun.\n * @param {Object} cx A context to be passed into the tests.  This can be used\n *     to set parameters for the test suite or individual test cases.\n */\nlib.TestManager.TestRun = function(testManager, cx) {\n  /**\n   * The associated lib.TestManager instance.\n   */\n  this.testManager = testManager;\n\n  /**\n   * Shortcut to the lib.TestManager's log.\n   */\n  this.log = testManager.log;\n\n  /**\n   * The test run context.  It's entirely up to the test suite and test cases\n   * how this is used.  It is opaque to lib.TestManager.* classes.\n   */\n  this.cx = cx || {};\n\n  /**\n   * The list of test cases that encountered failures.\n   */\n  this.failures = [];\n\n  /**\n   * The list of test cases that passed.\n   */\n  this.passes = [];\n\n  /**\n   * The time the test run started, or null if it hasn't been started yet.\n   */\n  this.startDate = null;\n\n  /**\n   * The time in milliseconds that the test run took to complete, or null if\n   * it hasn't completed yet.\n   */\n  this.duration = null;\n\n  /**\n   * The most recent result object, or null if the test run hasn't started\n   * yet.  In order to detect late failures, this is not cleared when the test\n   * completes.\n   */\n  this.currentResult = null;\n\n  /**\n   * Number of maximum failures.  The test run will stop when this number is\n   * reached.  If 0 or ommitted, the entire set of selected tests is run, even\n   * if some fail.\n   */\n  this.maxFailures = 0;\n\n  /**\n   * True if this test run ended early because of an unexpected condition.\n   */\n  this.panic = false;\n\n  // List of pending test cases.\n  this.testQueue_ = [];\n\n};\n\n/**\n * This value can be passed to select() to indicate that all tests should\n * be selected.\n */\nlib.TestManager.TestRun.prototype.ALL_TESTS = new String('<all-tests>');\n\n/**\n * Add a single test to the test run.\n */\nlib.TestManager.TestRun.prototype.selectTest = function(test) {\n  this.testQueue_.push(test);\n};\n\nlib.TestManager.TestRun.prototype.selectSuite = function(\n    suiteClass, opt_pattern) {\n  var pattern = opt_pattern || this.ALL_TESTS;\n  var selectCount = 0;\n  var testList = suiteClass.getTestList();\n\n  for (var j = 0; j < testList.length; j++) {\n    var test = testList[j];\n    // Note that we're using \"!==\" rather than \"!=\" so that we're matching\n    // the ALL_TESTS String object, rather than the contents of the string.\n    if (pattern !== this.ALL_TESTS) {\n      if (pattern instanceof RegExp) {\n        if (!pattern.test(test.testName))\n          continue;\n      } else if (test.testName != pattern) {\n        continue;\n      }\n    }\n\n    this.selectTest(test);\n    selectCount++;\n  }\n\n  return selectCount;\n};\n\n/**\n * Selects one or more tests to gather results for.\n *\n * Selecting the same test more than once is allowed.\n *\n * @param {string|RegExp} pattern Pattern used to select tests.\n *     If TestRun.prototype.ALL_TESTS, all tests are selected.\n *     If a string, only the test that exactly matches is selected.\n *     If a RegExp, only tests matching the RegExp are added.\n *\n * @return {int} The number of additional tests that have been selected into\n *     this TestRun.\n */\nlib.TestManager.TestRun.prototype.selectPattern = function(pattern) {\n  var selectCount = 0;\n\n  for (var i = 0; i < lib.TestManager.Suite.subclasses.length; i++) {\n    selectCount += this.selectSuite(lib.TestManager.Suite.subclasses[i],\n                                    pattern);\n  }\n\n  if (!selectCount) {\n    this.log.println('No tests matched selection criteria: ' + pattern);\n  }\n\n  return selectCount;\n};\n\n/**\n * Hooked up to window.onerror during a test run in order to catch exceptions\n * that would otherwise go uncaught.\n */\nlib.TestManager.TestRun.prototype.onUncaughtException_ = function(\n    message, file, line) {\n\n  if (message.indexOf('Uncaught lib.TestManager.Result.TestComplete') == 0 ||\n      message.indexOf('status: passed') != -1) {\n    // This is a result.pass() or result.fail() call from a callback.  We're\n    // already going to deal with it as part of the completeTest_() call\n    // that raised it.  We can safely squelch this error message.\n    return true;\n  }\n\n  if (!this.currentResult)\n    return;\n\n  if (message == 'Uncaught ' + this.currentResult.expectedErrorMessage_) {\n    // Test cases may need to raise an unhandled exception as part of the test.\n    return;\n  }\n\n  var when = 'during';\n\n  if (this.currentResult.status != this.currentResult.PENDING)\n    when = 'after';\n\n  this.log.println('Uncaught exception ' + when + ' test case: ' +\n                   this.currentResult.test.fullName);\n  this.log.println(message + ', ' + file + ':' + line);\n\n  this.currentResult.completeTest_(this.currentResult.FAILED, false);\n\n  return false;\n};\n\n/**\n * Called to when this test run has completed.\n *\n * This method typically re-runs itself asynchronously, in order to let the\n * DOM stabilize and short-term timeouts to complete before declaring the\n * test run complete.\n *\n * @param {boolean} opt_skipTimeout If true, the timeout is skipped and the\n *     test run is completed immediately.  This should only be used from within\n *     this function.\n */\nlib.TestManager.TestRun.prototype.onTestRunComplete_ = function(\n    opt_skipTimeout) {\n  if (!opt_skipTimeout) {\n    // The final test may have left a lingering setTimeout(..., 0), or maybe\n    // poked at the DOM in a way that will trigger a event to fire at the end\n    // of this stack, so we give things a chance to settle down before our\n    // final cleanup...\n    setTimeout(this.onTestRunComplete_.bind(this), 0, true);\n    return;\n  }\n\n  this.duration = (new Date()) - this.startDate;\n\n  this.log.popPrefix();\n  this.log.println('} ' + this.passes.length + ' passed, ' +\n                   this.failures.length + ' failed, '  +\n                   this.msToSeconds_(this.duration));\n  this.log.println('');\n\n  this.summarize();\n\n  window.onerror = null;\n\n  this.testManager.onTestRunComplete(this);\n};\n\n/**\n * Called by the lib.TestManager.Result object when a test completes.\n *\n * @param {lib.TestManager.Result} result The result object which has just\n *     completed.\n */\nlib.TestManager.TestRun.prototype.onResultComplete = function(result) {\n  try {\n    result.suite.postamble();\n  } catch (ex) {\n    this.log.println('Unexpected exception in postamble: ' +\n                     (ex.stack ? ex.stack : ex));\n    this.panic = true;\n  }\n\n  this.log.popPrefix();\n  this.log.print('} ' + result.status + ', ' +\n                 this.msToSeconds_(result.duration));\n  this.log.flush();\n\n  if (result.status == result.FAILED) {\n    this.failures.push(result);\n    this.currentSuite = null;\n  } else if (result.status == result.PASSED) {\n    this.passes.push(result);\n  } else {\n    this.log.println('Unknown result status: ' + result.test.fullName + ': ' +\n                     result.status);\n    return this.panic = true;\n  }\n\n  this.runNextTest_();\n};\n\n/**\n * Called by the lib.TestManager.Result object when a test which has already\n * completed reports another completion.\n *\n * This is usually indicative of a buggy testcase.  It is probably reporting a\n * result on exit and then again from an asynchronous callback.\n *\n * It may also be the case that the last act of the testcase causes a DOM change\n * which triggers some event to run after the test returns.  If the event\n * handler reports a failure or raises an uncaught exception, the test will\n * fail even though it has already completed.\n *\n * In any case, re-completing a test ALWAYS moves it into the failure pile.\n *\n * @param {lib.TestManager.Result} result The result object which has just\n *     completed.\n * @param {string} lateStatus The status that the test attempted to record this\n *     time around.\n */\nlib.TestManager.TestRun.prototype.onResultReComplete = function(\n    result, lateStatus) {\n  this.log.println('Late complete for test: ' + result.test.fullName + ': ' +\n                   lateStatus);\n\n  // Consider any late completion a failure, even if it's a double-pass, since\n  // it's a misuse of the testing API.\n  var index = this.passes.indexOf(result);\n  if (index >= 0) {\n    this.passes.splice(index, 1);\n    this.failures.push(result);\n  }\n};\n\n/**\n * Run the next test in the queue.\n */\nlib.TestManager.TestRun.prototype.runNextTest_ = function() {\n  if (this.panic || !this.testQueue_.length)\n    return this.onTestRunComplete_();\n\n  if (this.maxFailures && this.failures.length >= this.maxFailures) {\n    this.log.println('Maximum failure count reached, aborting test run.');\n    return this.onTestRunComplete_();\n  }\n\n  // Peek at the top test first.  We remove it later just before it's about\n  // to run, so that we don't disturb the incomplete test count in the\n  // event that we fail before running it.\n  var test = this.testQueue_[0];\n  var suite = this.currentResult ? this.currentResult.suite : null;\n\n  try {\n    if (!suite || !(suite instanceof test.suiteClass)) {\n      this.log.println('Initializing suite: ' + test.suiteClass.suiteName);\n      suite = new test.suiteClass(this.testManager, this.cx);\n    }\n  } catch (ex) {\n    // If test suite setup fails we're not even going to try to run the tests.\n    this.log.println('Exception during setup: ' + (ex.stack ? ex.stack : ex));\n    this.panic = true;\n    this.onTestRunComplete_();\n    return;\n  }\n\n  try {\n    this.log.print('Test: ' + test.fullName + ' {');\n    this.log.pushPrefix('  ');\n\n    this.currentResult = new lib.TestManager.Result(this, suite, test);\n    suite.preamble(this.currentResult, this.cx);\n\n    this.testQueue_.shift();\n  } catch (ex) {\n    this.log.println('Unexpected exception during test preamble: ' +\n                     (ex.stack ? ex.stack : ex));\n    this.log.popPrefix();\n    this.log.println('}');\n\n    this.panic = true;\n    this.onTestRunComplete_();\n    return;\n  }\n\n  try {\n    this.currentResult.run();\n  } catch (ex) {\n    // Result.run() should catch test exceptions and turn them into failures.\n    // If we got here, it means there is trouble in the testing framework.\n    this.log.println('Unexpected exception during test run: ' +\n                     (ex.stack ? ex.stack : ex));\n    this.panic = true;\n  }\n};\n\n/**\n * Run the selected list of tests.\n *\n * Some tests may need to run asynchronously, so you cannot assume the run is\n * complete when this function returns.  Instead, pass in a function to be\n * called back when the run has completed.\n *\n * This function will log the results of the test run as they happen into the\n * log defined by the associated lib.TestManager.  By default this is\n * console.log, which can be viewed in the JavaScript console of most browsers.\n *\n * The browser state is determined by the last test to run.  We intentionally\n * don't do any cleanup so that you can inspect the state of a failed test, or\n * leave the browser ready for manual testing.\n *\n * Any failures in lib.TestManager.* code or test suite setup or test case\n * preamble will cause the test run to abort.\n */\nlib.TestManager.TestRun.prototype.run = function() {\n  this.log.println('Running ' + this.testQueue_.length + ' test(s) {');\n  this.log.pushPrefix('  ');\n\n  window.onerror = this.onUncaughtException_.bind(this);\n  this.startDate = new Date();\n  this.runNextTest_();\n};\n\n/**\n * Format milliseconds as fractional seconds.\n */\nlib.TestManager.TestRun.prototype.msToSeconds_ = function(ms) {\n  var secs = (ms / 1000).toFixed(2);\n  return secs + 's';\n};\n\n/**\n * Log the current result summary.\n */\nlib.TestManager.TestRun.prototype.summarize = function() {\n  if (this.failures.length) {\n    for (var i = 0; i < this.failures.length; i++) {\n      this.log.println('FAILED: ' + this.failures[i].test.fullName);\n    }\n  }\n\n  if (this.testQueue_.length) {\n    this.log.println('Test run incomplete: ' + this.testQueue_.length +\n                     ' test(s) were not run.');\n  }\n};\n\n/**\n * Record of the result of a single test.\n *\n * These are constructed during a test run, you shouldn't have to make one\n * on your own.\n *\n * An instance of this class is passed in to each test function.  It can be\n * used to add messages to the test log, to record a test pass/fail state, to\n * test assertions, or to create exception-proof wrappers for callback\n * functions.\n *\n * @param {lib.TestManager.TestRun} testRun The TestRun instance associated with\n *     this result.\n * @param {lib.TestManager.Suit} suite The Suite containing the test we're\n *     collecting this result for.\n * @param {lib.TestManager.Test} test The test we're collecting this result for.\n */\nlib.TestManager.Result = function(testRun, suite, test) {\n  /**\n   * The TestRun instance associated with this result.\n   */\n  this.testRun = testRun;\n\n  /**\n   * The Suite containing the test we're collecting this result for.\n   */\n  this.suite = suite;\n\n  /**\n   * The test we're collecting this result for.\n   */\n  this.test = test;\n\n  /**\n   * The time we started to collect this result, or null if we haven't started.\n   */\n  this.startDate = null;\n\n  /**\n   * The time in milliseconds that the test took to complete, or null if\n   * it hasn't completed yet.\n   */\n  this.duration = null;\n\n  /**\n   * The current status of this test result.\n   */\n  this.status = this.PENDING;\n\n  // An error message that the test case is expected to generate.\n  this.expectedErrorMessage_ = null;\n};\n\n/**\n * Possible values for this.status.\n */\nlib.TestManager.Result.prototype.PENDING = 'pending';\nlib.TestManager.Result.prototype.FAILED  = 'FAILED';\nlib.TestManager.Result.prototype.PASSED  = 'passed';\n\n/**\n * Exception thrown when a test completes (pass or fail), to ensure no more of\n * the test is run.\n */\nlib.TestManager.Result.TestComplete = function(result) {\n  this.result = result;\n};\n\nlib.TestManager.Result.TestComplete.prototype.toString = function() {\n  return 'lib.TestManager.Result.TestComplete: ' + this.result.test.fullName +\n      ', status: ' + this.result.status;\n}\n\n/**\n * Start the test associated with this result.\n */\nlib.TestManager.Result.prototype.run = function() {\n  var self = this;\n\n  this.startDate = new Date();\n  this.test.run(this);\n\n  if (this.status == this.PENDING && !this.timeout_) {\n    this.println('Test did not return a value and did not request more time.');\n    this.completeTest_(this.FAILED, false);\n  }\n};\n\n/**\n * Unhandled error message this test expects to generate.\n *\n * This must be the exact string that would appear in the JavaScript console,\n * minus the 'Uncaught ' prefix.\n *\n * The test case does *not* automatically fail if the error message is not\n * encountered.\n */\nlib.TestManager.Result.prototype.expectErrorMessage = function(str) {\n  this.expectedErrorMessage_ = str;\n};\n\n/**\n * Function called when a test times out.\n */\nlib.TestManager.Result.prototype.onTimeout_ = function() {\n  this.timeout_ = null;\n\n  if (this.status != this.PENDING)\n    return;\n\n  this.println('Test timed out.');\n  this.completeTest_(this.FAILED, false);\n};\n\n/**\n * Indicate that a test case needs more time to complete.\n *\n * Before a test case returns it must report a pass/fail result, or request more\n * time to do so.\n *\n * If a test does not report pass/fail before the time expires it will\n * be reported as a timeout failure.  Any late pass/fails will be noted in the\n * test log, but will not affect the final result of the test.\n *\n * Test cases may call requestTime more than once.  If you have a few layers\n * of asynchronous API to go through, you should call this once per layer with\n * an estimate of how long each callback will take to complete.\n *\n * @param {int} ms Number of milliseconds requested.\n */\nlib.TestManager.Result.prototype.requestTime = function(ms) {\n  if (this.timeout_)\n    clearTimeout(this.timeout_);\n\n  this.timeout_ = setTimeout(this.onTimeout_.bind(this), ms);\n};\n\n/**\n * Report the completion of a test.\n *\n * @param {string} status The status of the test case.\n * @param {boolean} opt_throw Optional boolean indicating whether or not\n *     to throw the TestComplete exception.\n */\nlib.TestManager.Result.prototype.completeTest_ = function(status, opt_throw) {\n  if (this.status == this.PENDING) {\n    this.duration = (new Date()) - this.startDate;\n    this.status = status;\n\n    this.testRun.onResultComplete(this);\n  } else {\n    this.testRun.onResultReComplete(this, status);\n  }\n\n  if (arguments.length < 2 || opt_throw)\n    throw new lib.TestManager.Result.TestComplete(this);\n};\n\n/**\n * Assert that an actual value is exactly equal to the expected value.\n *\n * This uses the JavaScript '===' operator in order to avoid type coercion.\n *\n * If the assertion fails, the test is marked as a failure and a TestCompleted\n * exception is thrown.\n *\n * @param {*} actual The actual measured value.\n * @param {*} expected The value expected.\n * @param {string} opt_name An optional name used to identify this\n *     assertion in the test log.  If ommitted it will be the file:line\n *     of the caller.\n */\nlib.TestManager.Result.prototype.assertEQ = function(\n    actual, expected, opt_name) {\n  // Utility function to pretty up the log.\n  function format(value) {\n    if (typeof value == 'number')\n      return value;\n\n    var str = String(value);\n    var ary = str.split('\\n').map(function (e) { return JSON.stringify(e) });\n    if (ary.length > 1) {\n      // If the string has newlines, start it off on its own line so that\n      // it's easier to compare against another string with newlines.\n      return '\\n' + ary.join('\\n');\n    } else {\n      return ary.join('\\n');\n    }\n  }\n\n  if (actual === expected)\n    return;\n\n  var name = opt_name ? '[' + opt_name + ']' : '';\n\n  this.fail('assertEQ' + name + ': ' + this.getCallerLocation_(1) + ': ' +\n            format(actual) + ' !== ' + format(expected));\n};\n\n/**\n * Assert that a value is true.\n *\n * This uses the JavaScript '===' operator in order to avoid type coercion.\n * The must be the boolean value `true`, not just some \"truish\" value.\n *\n * If the assertion fails, the test is marked as a failure and a TestCompleted\n * exception is thrown.\n *\n * @param {boolean} actual The actual measured value.\n * @param {string} opt_name An optional name used to identify this\n *     assertion in the test log.  If ommitted it will be the file:line\n *     of the caller.\n */\nlib.TestManager.Result.prototype.assert = function(actual, opt_name) {\n  if (actual === true)\n    return;\n\n  var name = opt_name ? '[' + opt_name + ']' : '';\n\n  this.fail('assert' + name + ': ' + this.getCallerLocation_(1) + ': ' +\n            String(actual));\n};\n\n/**\n * Return the filename:line of a calling stack frame.\n *\n * This uses a dirty hack.  It throws an exception, catches it, and examines\n * the stack property of the caught exception.\n *\n * @param {int} frameIndex The stack frame to return.  0 is the frame that\n *     called this method, 1 is its caller, and so on.\n * @return {string} A string of the format \"filename:linenumber\".\n */\nlib.TestManager.Result.prototype.getCallerLocation_ = function(frameIndex) {\n  try {\n    throw new Error();\n  } catch (ex) {\n    var frame = ex.stack.split('\\n')[frameIndex + 2];\n    var ary = frame.match(/([^/]+:\\d+):\\d+\\)?$/);\n    return ary ? ary[1] : '???';\n  }\n};\n\n/**\n * Write a message to the result log.\n */\nlib.TestManager.Result.prototype.println = function(message) {\n  this.testRun.log.println(message);\n};\n\n/**\n * Mark a failed test and exit out of the rest of the test.\n *\n * This will throw a TestCompleted exception, causing the current test to stop.\n *\n * @param {string} opt_message Optional message to add to the log.\n */\nlib.TestManager.Result.prototype.fail = function(opt_message) {\n  if (arguments.length)\n    this.println(opt_message);\n\n  this.completeTest_(this.FAILED, true);\n};\n\n/**\n * Mark a passed test and exit out of the rest of the test.\n *\n * This will throw a TestCompleted exception, causing the current test to stop.\n */\nlib.TestManager.Result.prototype.pass = function() {\n  this.completeTest_(this.PASSED, true);\n};\n// SOURCE FILE: libdot/js/lib_utf8.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n// TODO(davidben): When the string encoding API is implemented,\n// replace this with the native in-browser implementation.\n//\n// http://wiki.whatwg.org/wiki/StringEncoding\n// http://dvcs.w3.org/hg/encoding/raw-file/tip/Overview.html\n\n/**\n * A stateful UTF-8 decoder.\n */\nlib.UTF8Decoder = function() {\n  // The number of bytes left in the current sequence.\n  this.bytesLeft = 0;\n  // The in-progress code point being decoded, if bytesLeft > 0.\n  this.codePoint = 0;\n  // The lower bound on the final code point, if bytesLeft > 0.\n  this.lowerBound = 0;\n};\n\n/**\n * Decodes a some UTF-8 data, taking into account state from previous\n * data streamed through the encoder.\n *\n * @param {String} str data to decode, represented as a JavaScript\n *     String with each code unit representing a byte between 0x00 to\n *     0xFF.\n * @return {String} The data decoded into a JavaScript UTF-16 string.\n */\nlib.UTF8Decoder.prototype.decode = function(str) {\n  var ret = '';\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    if (this.bytesLeft == 0) {\n      if (c <= 0x7F) {\n        ret += str.charAt(i);\n      } else if (0xC0 <= c && c <= 0xDF) {\n        this.codePoint = c - 0xC0;\n        this.bytesLeft = 1;\n        this.lowerBound = 0x80;\n      } else if (0xE0 <= c && c <= 0xEF) {\n        this.codePoint = c - 0xE0;\n        this.bytesLeft = 2;\n        this.lowerBound = 0x800;\n      } else if (0xF0 <= c && c <= 0xF7) {\n        this.codePoint = c - 0xF0;\n        this.bytesLeft = 3;\n        this.lowerBound = 0x10000;\n      } else if (0xF8 <= c && c <= 0xFB) {\n        this.codePoint = c - 0xF8;\n        this.bytesLeft = 4;\n        this.lowerBound = 0x200000;\n      } else if (0xFC <= c && c <= 0xFD) {\n        this.codePoint = c - 0xFC;\n        this.bytesLeft = 5;\n        this.lowerBound = 0x4000000;\n      } else {\n        ret += '\\ufffd';\n      }\n    } else {\n      if (0x80 <= c && c <= 0xBF) {\n        this.bytesLeft--;\n        this.codePoint = (this.codePoint << 6) + (c - 0x80);\n        if (this.bytesLeft == 0) {\n          // Got a full sequence. Check if it's within bounds and\n          // filter out surrogate pairs.\n          var codePoint = this.codePoint;\n          if (codePoint < this.lowerBound\n              || (0xD800 <= codePoint && codePoint <= 0xDFFF)\n              || codePoint > 0x10FFFF) {\n            ret += '\\ufffd';\n          } else {\n            // Encode as UTF-16 in the output.\n            if (codePoint < 0x10000) {\n              ret += String.fromCharCode(codePoint);\n            } else {\n              // Surrogate pair.\n              codePoint -= 0x10000;\n              ret += String.fromCharCode(\n                0xD800 + ((codePoint >>> 10) & 0x3FF),\n                0xDC00 + (codePoint & 0x3FF));\n            }\n          }\n        }\n      } else {\n        // Too few bytes in multi-byte sequence. Rewind stream so we\n        // don't lose the next byte.\n        ret += '\\ufffd';\n        this.bytesLeft = 0;\n        i--;\n      }\n    }\n  }\n  return ret;\n};\n\n/**\n * Decodes UTF-8 data. This is a convenience function for when all the\n * data is already known.\n *\n * @param {String} str data to decode, represented as a JavaScript\n *     String with each code unit representing a byte between 0x00 to\n *     0xFF.\n * @return {String} The data decoded into a JavaScript UTF-16 string.\n */\nlib.decodeUTF8 = function(utf8) {\n  return (new lib.UTF8Decoder()).decode(utf8);\n};\n\n/**\n * Encodes a UTF-16 string into UTF-8.\n *\n * TODO(davidben): Do we need a stateful version of this that can\n * handle a surrogate pair split in two calls? What happens if a\n * keypress event would have contained a character outside the BMP?\n *\n * @param {String} str The string to encode.\n * @return {String} The string encoded as UTF-8, as a JavaScript\n *     string with bytes represented as code units from 0x00 to 0xFF.\n */\nlib.encodeUTF8 = function(str) {\n  var ret = '';\n  for (var i = 0; i < str.length; i++) {\n    // Get a unicode code point out of str.\n    var c = str.charCodeAt(i);\n    if (0xDC00 <= c && c <= 0xDFFF) {\n      c = 0xFFFD;\n    } else if (0xD800 <= c && c <= 0xDBFF) {\n      if (i+1 < str.length) {\n        var d = str.charCodeAt(i+1);\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // Swallow a surrogate pair.\n          c = 0x10000 + ((c & 0x3FF) << 10) + (d & 0x3FF);\n          i++;\n        } else {\n          c = 0xFFFD;\n        }\n      } else {\n        c = 0xFFFD;\n      }\n    }\n\n    // Encode c in UTF-8.\n    var bytesLeft;\n    if (c <= 0x7F) {\n      ret += str.charAt(i);\n      continue;\n    } else if (c <= 0x7FF) {\n      ret += String.fromCharCode(0xC0 | (c >>> 6));\n      bytesLeft = 1;\n    } else if (c <= 0xFFFF) {\n      ret += String.fromCharCode(0xE0 | (c >>> 12));\n      bytesLeft = 2;\n    } else /* if (c <= 0x10FFFF) */ {\n      ret += String.fromCharCode(0xF0 | (c >>> 18));\n      bytesLeft = 3;\n    }\n\n    while (bytesLeft > 0) {\n      bytesLeft--;\n      ret += String.fromCharCode(0x80 | ((c >>> (6 * bytesLeft)) & 0x3F));\n    }\n  }\n  return ret;\n};\n// SOURCE FILE: libdot/js/lib_wc.js\n// Copyright (c) 2014 The Chromium OS Authors. All rights reserved.\n// Use of lib.wc source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * This JavaScript library is ported from the wcwidth.js module of node.js.\n * The original implementation can be found at:\n * https://npmjs.org/package/wcwidth.js\n */\n\n/**\n * JavaScript porting of Markus Kuhn's wcwidth() implementation\n *\n * The following explanation comes from the original C implementation:\n *\n * This is an implementation of wcwidth() and wcswidth() (defined in\n * IEEE Std 1002.1-2001) for Unicode.\n *\n * http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html\n * http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html\n *\n * In fixed-width output devices, Latin characters all occupy a single\n * \"cell\" position of equal width, whereas ideographic CJK characters\n * occupy two such cells. Interoperability between terminal-line\n * applications and (teletype-style) character terminals using the\n * UTF-8 encoding requires agreement on which character should advance\n * the cursor by how many cell positions. No established formal\n * standards exist at present on which Unicode character shall occupy\n * how many cell positions on character terminals. These routines are\n * a first attempt of defining such behavior based on simple rules\n * applied to data provided by the Unicode Consortium.\n *\n * For some graphical characters, the Unicode standard explicitly\n * defines a character-cell width via the definition of the East Asian\n * FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.\n * In all these cases, there is no ambiguity about which width a\n * terminal shall use. For characters in the East Asian Ambiguous (A)\n * class, the width choice depends purely on a preference of backward\n * compatibility with either historic CJK or Western practice.\n * Choosing single-width for these characters is easy to justify as\n * the appropriate long-term solution, as the CJK practice of\n * displaying these characters as double-width comes from historic\n * implementation simplicity (8-bit encoded characters were displayed\n * single-width and 16-bit ones double-width, even for Greek,\n * Cyrillic, etc.) and not any typographic considerations.\n *\n * Much less clear is the choice of width for the Not East Asian\n * (Neutral) class. Existing practice does not dictate a width for any\n * of these characters. It would nevertheless make sense\n * typographically to allocate two character cells to characters such\n * as for instance EM SPACE or VOLUME INTEGRAL, which cannot be\n * represented adequately with a single-width glyph. The following\n * routines at present merely assign a single-cell width to all\n * neutral characters, in the interest of simplicity. This is not\n * entirely satisfactory and should be reconsidered before\n * establishing a formal standard in lib.wc area. At the moment, the\n * decision which Not East Asian (Neutral) characters should be\n * represented by double-width glyphs cannot yet be answered by\n * applying a simple rule from the Unicode database content. Setting\n * up a proper standard for the behavior of UTF-8 character terminals\n * will require a careful analysis not only of each Unicode character,\n * but also of each presentation form, something the author of these\n * routines has avoided to do so far.\n *\n * http://www.unicode.org/unicode/reports/tr11/\n *\n * Markus Kuhn -- 2007-05-26 (Unicode 5.0)\n *\n * Permission to use, copy, modify, and distribute lib.wc software\n * for any purpose and without fee is hereby granted. The author\n * disclaims all warranties with regard to lib.wc software.\n *\n * Latest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\n */\n\n/**\n * The following function defines the column width of an ISO 10646 character\n * as follows:\n *\n *  - The null character (U+0000) has a column width of 0.\n *  - Other C0/C1 control characters and DEL will lead to a return value of -1.\n *  - Non-spacing and enclosing combining characters (general category code Mn\n *    or Me in the Unicode database) have a column width of 0.\n *  - SOFT HYPHEN (U+00AD) has a column width of 1.\n *  - Other format characters (general category code Cf in the Unicode database)\n *    and ZERO WIDTH SPACE (U+200B) have a column width of 0.\n *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF) have a\n *    column width of 0.\n *  - Spacing characters in the East Asian Wide (W) or East Asian Full-width (F)\n *    category as defined in Unicode Technical Report #11 have a column width of\n *    2.\n *  - East Asian Ambigous characters are taken into account if\n *    regardCjkAmbiguous flag is enabled. They have a column width of 2.\n *  - All remaining characters (including all printable ISO 8859-1 and WGL4\n *    characters, Unicode control characters, etc.) have a column width of 1.\n *\n * This implementation assumes that characters are encoded in ISO 10646.\n */\n\nlib.wc = {};\n\n// Width of a nul character.\nlib.wc.nulWidth = 0;\n\n// Width of a control charater.\nlib.wc.controlWidth = 0;\n\n// Flag whether to consider East Asian Ambiguous characters.\nlib.wc.regardCjkAmbiguous = false;\n\n// Width of an East Asian Ambiguous character.\nlib.wc.cjkAmbiguousWidth = 2;\n\n// Sorted list of non-overlapping intervals of non-spacing characters\n// generated by \"uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c\"\nlib.wc.combining = [\n    [ 0x0300, 0x036F ], [ 0x0483, 0x0486 ], [ 0x0488, 0x0489 ],\n    [ 0x0591, 0x05BD ], [ 0x05BF, 0x05BF ], [ 0x05C1, 0x05C2 ],\n    [ 0x05C4, 0x05C5 ], [ 0x05C7, 0x05C7 ], [ 0x0600, 0x0603 ],\n    [ 0x0610, 0x0615 ], [ 0x064B, 0x065E ], [ 0x0670, 0x0670 ],\n    [ 0x06D6, 0x06E4 ], [ 0x06E7, 0x06E8 ], [ 0x06EA, 0x06ED ],\n    [ 0x070F, 0x070F ], [ 0x0711, 0x0711 ], [ 0x0730, 0x074A ],\n    [ 0x07A6, 0x07B0 ], [ 0x07EB, 0x07F3 ], [ 0x0901, 0x0902 ],\n    [ 0x093C, 0x093C ], [ 0x0941, 0x0948 ], [ 0x094D, 0x094D ],\n    [ 0x0951, 0x0954 ], [ 0x0962, 0x0963 ], [ 0x0981, 0x0981 ],\n    [ 0x09BC, 0x09BC ], [ 0x09C1, 0x09C4 ], [ 0x09CD, 0x09CD ],\n    [ 0x09E2, 0x09E3 ], [ 0x0A01, 0x0A02 ], [ 0x0A3C, 0x0A3C ],\n    [ 0x0A41, 0x0A42 ], [ 0x0A47, 0x0A48 ], [ 0x0A4B, 0x0A4D ],\n    [ 0x0A70, 0x0A71 ], [ 0x0A81, 0x0A82 ], [ 0x0ABC, 0x0ABC ],\n    [ 0x0AC1, 0x0AC5 ], [ 0x0AC7, 0x0AC8 ], [ 0x0ACD, 0x0ACD ],\n    [ 0x0AE2, 0x0AE3 ], [ 0x0B01, 0x0B01 ], [ 0x0B3C, 0x0B3C ],\n    [ 0x0B3F, 0x0B3F ], [ 0x0B41, 0x0B43 ], [ 0x0B4D, 0x0B4D ],\n    [ 0x0B56, 0x0B56 ], [ 0x0B82, 0x0B82 ], [ 0x0BC0, 0x0BC0 ],\n    [ 0x0BCD, 0x0BCD ], [ 0x0C3E, 0x0C40 ], [ 0x0C46, 0x0C48 ],\n    [ 0x0C4A, 0x0C4D ], [ 0x0C55, 0x0C56 ], [ 0x0CBC, 0x0CBC ],\n    [ 0x0CBF, 0x0CBF ], [ 0x0CC6, 0x0CC6 ], [ 0x0CCC, 0x0CCD ],\n    [ 0x0CE2, 0x0CE3 ], [ 0x0D41, 0x0D43 ], [ 0x0D4D, 0x0D4D ],\n    [ 0x0DCA, 0x0DCA ], [ 0x0DD2, 0x0DD4 ], [ 0x0DD6, 0x0DD6 ],\n    [ 0x0E31, 0x0E31 ], [ 0x0E34, 0x0E3A ], [ 0x0E47, 0x0E4E ],\n    [ 0x0EB1, 0x0EB1 ], [ 0x0EB4, 0x0EB9 ], [ 0x0EBB, 0x0EBC ],\n    [ 0x0EC8, 0x0ECD ], [ 0x0F18, 0x0F19 ], [ 0x0F35, 0x0F35 ],\n    [ 0x0F37, 0x0F37 ], [ 0x0F39, 0x0F39 ], [ 0x0F71, 0x0F7E ],\n    [ 0x0F80, 0x0F84 ], [ 0x0F86, 0x0F87 ], [ 0x0F90, 0x0F97 ],\n    [ 0x0F99, 0x0FBC ], [ 0x0FC6, 0x0FC6 ], [ 0x102D, 0x1030 ],\n    [ 0x1032, 0x1032 ], [ 0x1036, 0x1037 ], [ 0x1039, 0x1039 ],\n    [ 0x1058, 0x1059 ], [ 0x1160, 0x11FF ], [ 0x135F, 0x135F ],\n    [ 0x1712, 0x1714 ], [ 0x1732, 0x1734 ], [ 0x1752, 0x1753 ],\n    [ 0x1772, 0x1773 ], [ 0x17B4, 0x17B5 ], [ 0x17B7, 0x17BD ],\n    [ 0x17C6, 0x17C6 ], [ 0x17C9, 0x17D3 ], [ 0x17DD, 0x17DD ],\n    [ 0x180B, 0x180D ], [ 0x18A9, 0x18A9 ], [ 0x1920, 0x1922 ],\n    [ 0x1927, 0x1928 ], [ 0x1932, 0x1932 ], [ 0x1939, 0x193B ],\n    [ 0x1A17, 0x1A18 ], [ 0x1B00, 0x1B03 ], [ 0x1B34, 0x1B34 ],\n    [ 0x1B36, 0x1B3A ], [ 0x1B3C, 0x1B3C ], [ 0x1B42, 0x1B42 ],\n    [ 0x1B6B, 0x1B73 ], [ 0x1DC0, 0x1DCA ], [ 0x1DFE, 0x1DFF ],\n    [ 0x200B, 0x200F ], [ 0x202A, 0x202E ], [ 0x2060, 0x2063 ],\n    [ 0x206A, 0x206F ], [ 0x20D0, 0x20EF ], [ 0x302A, 0x302F ],\n    [ 0x3099, 0x309A ], [ 0xA806, 0xA806 ], [ 0xA80B, 0xA80B ],\n    [ 0xA825, 0xA826 ], [ 0xFB1E, 0xFB1E ], [ 0xFE00, 0xFE0F ],\n    [ 0xFE20, 0xFE23 ], [ 0xFEFF, 0xFEFF ], [ 0xFFF9, 0xFFFB ],\n    [ 0x10A01, 0x10A03 ], [ 0x10A05, 0x10A06 ], [ 0x10A0C, 0x10A0F ],\n    [ 0x10A38, 0x10A3A ], [ 0x10A3F, 0x10A3F ], [ 0x1D167, 0x1D169 ],\n    [ 0x1D173, 0x1D182 ], [ 0x1D185, 0x1D18B ], [ 0x1D1AA, 0x1D1AD ],\n    [ 0x1D242, 0x1D244 ], [ 0xE0001, 0xE0001 ], [ 0xE0020, 0xE007F ],\n    [ 0xE0100, 0xE01EF ]\n];\n\n// Sorted list of non-overlapping intervals of East Asian Ambiguous characters\n// generated by \"uniset +WIDTH-A -cat=Me -cat=Mn -cat=Cf c\"\nlib.wc.ambiguous = [\n    [ 0x00A1, 0x00A1 ], [ 0x00A4, 0x00A4 ], [ 0x00A7, 0x00A8 ],\n    [ 0x00AA, 0x00AA ], [ 0x00AE, 0x00AE ], [ 0x00B0, 0x00B4 ],\n    [ 0x00B6, 0x00BA ], [ 0x00BC, 0x00BF ], [ 0x00C6, 0x00C6 ],\n    [ 0x00D0, 0x00D0 ], [ 0x00D7, 0x00D8 ], [ 0x00DE, 0x00E1 ],\n    [ 0x00E6, 0x00E6 ], [ 0x00E8, 0x00EA ], [ 0x00EC, 0x00ED ],\n    [ 0x00F0, 0x00F0 ], [ 0x00F2, 0x00F3 ], [ 0x00F7, 0x00FA ],\n    [ 0x00FC, 0x00FC ], [ 0x00FE, 0x00FE ], [ 0x0101, 0x0101 ],\n    [ 0x0111, 0x0111 ], [ 0x0113, 0x0113 ], [ 0x011B, 0x011B ],\n    [ 0x0126, 0x0127 ], [ 0x012B, 0x012B ], [ 0x0131, 0x0133 ],\n    [ 0x0138, 0x0138 ], [ 0x013F, 0x0142 ], [ 0x0144, 0x0144 ],\n    [ 0x0148, 0x014B ], [ 0x014D, 0x014D ], [ 0x0152, 0x0153 ],\n    [ 0x0166, 0x0167 ], [ 0x016B, 0x016B ], [ 0x01CE, 0x01CE ],\n    [ 0x01D0, 0x01D0 ], [ 0x01D2, 0x01D2 ], [ 0x01D4, 0x01D4 ],\n    [ 0x01D6, 0x01D6 ], [ 0x01D8, 0x01D8 ], [ 0x01DA, 0x01DA ],\n    [ 0x01DC, 0x01DC ], [ 0x0251, 0x0251 ], [ 0x0261, 0x0261 ],\n    [ 0x02C4, 0x02C4 ], [ 0x02C7, 0x02C7 ], [ 0x02C9, 0x02CB ],\n    [ 0x02CD, 0x02CD ], [ 0x02D0, 0x02D0 ], [ 0x02D8, 0x02DB ],\n    [ 0x02DD, 0x02DD ], [ 0x02DF, 0x02DF ], [ 0x0391, 0x03A1 ],\n    [ 0x03A3, 0x03A9 ], [ 0x03B1, 0x03C1 ], [ 0x03C3, 0x03C9 ],\n    [ 0x0401, 0x0401 ], [ 0x0410, 0x044F ], [ 0x0451, 0x0451 ],\n    [ 0x2010, 0x2010 ], [ 0x2013, 0x2016 ], [ 0x2018, 0x2019 ],\n    [ 0x201C, 0x201D ], [ 0x2020, 0x2022 ], [ 0x2024, 0x2027 ],\n    [ 0x2030, 0x2030 ], [ 0x2032, 0x2033 ], [ 0x2035, 0x2035 ],\n    [ 0x203B, 0x203B ], [ 0x203E, 0x203E ], [ 0x2074, 0x2074 ],\n    [ 0x207F, 0x207F ], [ 0x2081, 0x2084 ], [ 0x20AC, 0x20AC ],\n    [ 0x2103, 0x2103 ], [ 0x2105, 0x2105 ], [ 0x2109, 0x2109 ],\n    [ 0x2113, 0x2113 ], [ 0x2116, 0x2116 ], [ 0x2121, 0x2122 ],\n    [ 0x2126, 0x2126 ], [ 0x212B, 0x212B ], [ 0x2153, 0x2154 ],\n    [ 0x215B, 0x215E ], [ 0x2160, 0x216B ], [ 0x2170, 0x2179 ],\n    [ 0x2190, 0x2199 ], [ 0x21B8, 0x21B9 ], [ 0x21D2, 0x21D2 ],\n    [ 0x21D4, 0x21D4 ], [ 0x21E7, 0x21E7 ], [ 0x2200, 0x2200 ],\n    [ 0x2202, 0x2203 ], [ 0x2207, 0x2208 ], [ 0x220B, 0x220B ],\n    [ 0x220F, 0x220F ], [ 0x2211, 0x2211 ], [ 0x2215, 0x2215 ],\n    [ 0x221A, 0x221A ], [ 0x221D, 0x2220 ], [ 0x2223, 0x2223 ],\n    [ 0x2225, 0x2225 ], [ 0x2227, 0x222C ], [ 0x222E, 0x222E ],\n    [ 0x2234, 0x2237 ], [ 0x223C, 0x223D ], [ 0x2248, 0x2248 ],\n    [ 0x224C, 0x224C ], [ 0x2252, 0x2252 ], [ 0x2260, 0x2261 ],\n    [ 0x2264, 0x2267 ], [ 0x226A, 0x226B ], [ 0x226E, 0x226F ],\n    [ 0x2282, 0x2283 ], [ 0x2286, 0x2287 ], [ 0x2295, 0x2295 ],\n    [ 0x2299, 0x2299 ], [ 0x22A5, 0x22A5 ], [ 0x22BF, 0x22BF ],\n    [ 0x2312, 0x2312 ], [ 0x2460, 0x24E9 ], [ 0x24EB, 0x254B ],\n    [ 0x2550, 0x2573 ], [ 0x2580, 0x258F ], [ 0x2592, 0x2595 ],\n    [ 0x25A0, 0x25A1 ], [ 0x25A3, 0x25A9 ], [ 0x25B2, 0x25B3 ],\n    [ 0x25B6, 0x25B7 ], [ 0x25BC, 0x25BD ], [ 0x25C0, 0x25C1 ],\n    [ 0x25C6, 0x25C8 ], [ 0x25CB, 0x25CB ], [ 0x25CE, 0x25D1 ],\n    [ 0x25E2, 0x25E5 ], [ 0x25EF, 0x25EF ], [ 0x2605, 0x2606 ],\n    [ 0x2609, 0x2609 ], [ 0x260E, 0x260F ], [ 0x2614, 0x2615 ],\n    [ 0x261C, 0x261C ], [ 0x261E, 0x261E ], [ 0x2640, 0x2640 ],\n    [ 0x2642, 0x2642 ], [ 0x2660, 0x2661 ], [ 0x2663, 0x2665 ],\n    [ 0x2667, 0x266A ], [ 0x266C, 0x266D ], [ 0x266F, 0x266F ],\n    [ 0x273D, 0x273D ], [ 0x2776, 0x277F ], [ 0xE000, 0xF8FF ],\n    [ 0xFFFD, 0xFFFD ], [ 0xF0000, 0xFFFFD ], [ 0x100000, 0x10FFFD ]\n];\n\n/**\n * Binary search to check if the given unicode character is a space character.\n *\n * @param {interger} ucs A unicode character code.\n *\n * @return {boolean} True if the given character is a space character; false\n *     otherwise.\n */\nlib.wc.isSpace = function(ucs) {\n  // Auxiliary function for binary search in interval table.\n  var min = 0, max = lib.wc.combining.length - 1;\n  var mid;\n\n  if (ucs < lib.wc.combining[0][0] || ucs > lib.wc.combining[max][1])\n    return false;\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2);\n    if (ucs > lib.wc.combining[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < lib.wc.combining[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Auxiliary function for checking if the given unicode character is a East\n * Asian Ambiguous character.\n *\n * @param {interger} ucs A unicode character code.\n *\n * @return {boolean} True if the given character is a East Asian Ambiguous\n * character.\n */\nlib.wc.isCjkAmbiguous = function(ucs) {\n  var min = 0, max = lib.wc.ambiguous.length - 1;\n  var mid;\n\n  if (ucs < lib.wc.ambiguous[0][0] || ucs > lib.wc.ambiguous[max][1])\n    return false;\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2);\n    if (ucs > lib.wc.ambiguous[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < lib.wc.ambiguous[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Determine the column width of the given character.\n *\n * @param {integer} ucs A unicode character code.\n *\n * @return {integer} The column width of the given character.\n */\nlib.wc.charWidth = function(ucs) {\n  if (lib.wc.regardCjkAmbiguous) {\n    return lib.wc.charWidthRegardAmbiguous(ucs);\n  } else {\n    return lib.wc.charWidthDisregardAmbiguous(ucs);\n  }\n};\n\n/**\n * Determine the column width of the given character without considering East\n * Asian Ambiguous characters.\n *\n * @param {integer} ucs A unicode character code.\n *\n * @return {integer} The column width of the given character.\n */\nlib.wc.charWidthDisregardAmbiguous = function(ucs) {\n  // Test for 8-bit control characters.\n  if (ucs === 0)\n    return lib.wc.nulWidth;\n  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))\n    return lib.wc.controlWidth;\n\n  // Optimize for ASCII characters.\n  if (ucs < 0x7f)\n    return 1;\n\n  // Binary search in table of non-spacing characters.\n  if (lib.wc.isSpace(ucs))\n    return 0;\n\n  // If we arrive here, ucs is not a combining or C0/C1 control character.\n  return 1 +\n    (ucs >= 0x1100 &&\n     (ucs <= 0x115f ||             // Hangul Jamo init. consonants\n      ucs == 0x2329 || ucs == 0x232a ||\n      (ucs >= 0x2e80 && ucs <= 0xa4cf &&\n       ucs != 0x303f) ||           // CJK ... Yi\n      (ucs >= 0xac00 && ucs <= 0xd7a3) ||  // Hangul Syllables\n      (ucs >= 0xf900 && ucs <= 0xfaff) ||  // CJK Compatibility Ideographs\n      (ucs >= 0xfe10 && ucs <= 0xfe19) ||  // Vertical forms\n      (ucs >= 0xfe30 && ucs <= 0xfe6f) ||  // CJK Compatibility Forms\n      (ucs >= 0xff00 && ucs <= 0xff60) ||  // Fullwidth Forms\n      (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n      (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n      (ucs >= 0x30000 && ucs <= 0x3fffd)));\n};\n\n/**\n * Determine the column width of the given character considering East Asian\n * Ambiguous characters.\n *\n * @param {integer} ucs A unicode character code.\n *\n * @return {integer} The column width of the given character.\n */\nlib.wc.charWidthRegardAmbiguous = function(ucs) {\n  if (lib.wc.isCjkAmbiguous(ucs))\n    return lib.wc.cjkAmbiguousWidth;\n\n  return lib.wc.charWidthDisregardAmbiguous(ucs);\n};\n\n/**\n * Determine the column width of the given string.\n *\n * @param {string} str A string.\n *\n * @return {integer} The column width of the given string.\n */\nlib.wc.strWidth = function(str) {\n  var width, rv = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    width = lib.wc.charWidth(str.charCodeAt(i));\n    if (width < 0)\n      return -1;\n    rv += width;\n  }\n\n  return rv;\n};\n\n/**\n * Get the substring at the given column offset of the given column width.\n *\n * @param {string} str The string to get substring from.\n * @param {integer} start The starting column offset to get substring.\n * @param {integer} opt_width The column width of the substring.\n *\n * @return {string} The substring.\n */\nlib.wc.substr = function(str, start, opt_width) {\n  var startIndex, endIndex, width;\n\n  for (startIndex = 0, width = 0; startIndex < str.length; startIndex++) {\n    width += lib.wc.charWidth(str.charCodeAt(startIndex));\n    if (width > start)\n      break;\n  }\n\n  if (opt_width != undefined) {\n    for (endIndex = startIndex, width = 0;\n         endIndex < str.length && width < opt_width;\n         width += lib.wc.charWidth(str.charCodeAt(endIndex)), endIndex++);\n    if (width > opt_width)\n      endIndex--;\n    return str.substring(startIndex, endIndex);\n  }\n\n  return str.substr(startIndex);\n};\n\n/**\n * Get substring at the given start and end column offset.\n *\n * @param {string} str The string to get substring from.\n * @param {integer} start The starting column offset.\n * @param {integer} end The ending column offset.\n *\n * @return {string} The substring.\n */\nlib.wc.substring = function(str, start, end) {\n  return lib.wc.substr(str, start, end - start);\n};\nlib.resource.add('libdot/changelog/version', 'text/plain',\n'1.9' +\n''\n);\n\nlib.resource.add('libdot/changelog/date', 'text/plain',\n'2014-05-27' +\n''\n);\n\n// SOURCE FILE: hterm/js/hterm.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.Storage');\n\n/**\n * @fileoverview Declares the hterm.* namespace and some basic shared utilities\n * that are too small to deserve dedicated files.\n */\nvar hterm = {};\n\n/**\n * The type of window hosting hterm.\n *\n * This is set as part of hterm.init().  The value is invalid until\n * initialization completes.\n */\nhterm.windowType = null;\n\n/**\n * Warning message to display in the terminal when browser zoom is enabled.\n *\n * You can replace it with your own localized message.\n */\nhterm.zoomWarningMessage = 'ZOOM != 100%';\n\n/**\n * Brief overlay message displayed when text is copied to the clipboard.\n *\n * By default it is the unicode BLACK SCISSORS character, but you can\n * replace it with your own localized message.\n *\n * This is only displayed when the 'enable-clipboard-notice' preference\n * is enabled.\n */\nhterm.notifyCopyMessage = '\\u2702';\n\n\n/**\n * Text shown in a desktop notification for the terminal\n * bell.  \\u226a is a unicode EIGHTH NOTE, %(title) will\n * be replaced by the terminal title.\n */\nhterm.desktopNotificationTitle = '\\u266A %(title) \\u266A';\n\n/**\n * List of known hterm test suites.\n *\n * A test harness should ensure that they all exist before running.\n */\nhterm.testDeps = ['hterm.ScrollPort.Tests', 'hterm.Screen.Tests',\n                  'hterm.Terminal.Tests', 'hterm.VT.Tests',\n                  'hterm.VT.CannedTests'];\n\n/**\n * The hterm init function, registered with lib.registerInit().\n *\n * This is called during lib.init().\n *\n * @param {function} onInit The function lib.init() wants us to invoke when\n *     initialization is complete.\n */\nlib.registerInit('hterm', function(onInit) {\n  function onWindow(window) {\n    hterm.windowType = window.type;\n    setTimeout(onInit, 0);\n  }\n\n  function onTab(tab) {\n    if (tab && window.chrome) {\n      chrome.windows.get(tab.windowId, null, onWindow);\n    } else {\n      // TODO(rginda): This is where we end up for a v1 app's background page.\n      // Maybe windowType = 'none' would be more appropriate, or something.\n      hterm.windowType = 'normal';\n      setTimeout(onInit, 0);\n    }\n  }\n\n  if (!hterm.defaultStorage) {\n    var ary = navigator.userAgent.match(/\\sChrome\\/(\\d\\d)/);\n    var version = ary ? parseInt(ary[1]) : -1;\n    if (window.chrome && chrome.storage && chrome.storage.sync &&\n        version > 21) {\n      hterm.defaultStorage = new lib.Storage.Chrome(chrome.storage.sync);\n    } else {\n      hterm.defaultStorage = new lib.Storage.Local();\n    }\n  }\n\n  // The chrome.tabs API is not supported in packaged apps, and detecting if\n  // you're a packaged app is a little awkward.\n  var isPackagedApp = false;\n  if (window.chrome && chrome.runtime && chrome.runtime.getManifest) {\n    var manifest = chrome.runtime.getManifest();\n    var isPackagedApp = manifest.app && manifest.app.background;\n  }\n\n  if (isPackagedApp) {\n    // Packaged apps are never displayed in browser tabs.\n    setTimeout(onWindow.bind(null, {type: 'popup'}), 0);\n  } else {\n    if (window.chrome && chrome.tabs) {\n      // The getCurrent method gets the tab that is \"currently running\", not the\n      // topmost or focused tab.\n      chrome.tabs.getCurrent(onTab);\n    } else {\n      setTimeout(onWindow.bind(null, {type: 'normal'}), 0);\n    }\n  }\n});\n\n/**\n * Return decimal { width, height } for a given dom node.\n */\nhterm.getClientSize = function(dom) {\n  return dom.getBoundingClientRect();\n};\n\n/**\n * Return decimal width for a given dom node.\n */\nhterm.getClientWidth = function(dom) {\n  return dom.getBoundingClientRect().width;\n};\n\n/**\n * Return decimal height for a given dom node.\n */\nhterm.getClientHeight = function(dom) {\n  return dom.getBoundingClientRect().height;\n};\n\n/**\n * Copy the current selection to the system clipboard.\n *\n * @param {HTMLDocument} The document with the selection to copy.\n */\nhterm.copySelectionToClipboard = function(document) {\n  try {\n    document.execCommand('copy');\n  } catch (firefoxException) {\n    // Ignore this. FF throws an exception if there was an error, even though\n    // the spec says just return false.\n  }\n};\n\n/**\n * Paste the system clipboard into the element with focus.\n *\n * @param {HTMLDocument} The document to paste into.\n */\nhterm.pasteFromClipboard = function(document) {\n  try {\n    document.execCommand('paste');\n  } catch (firefoxException) {\n    // Ignore this. FF throws an exception if there was an error, even though\n    // the spec says just return false.\n  }\n};\n\n/**\n * Constructor for a hterm.Size record.\n *\n * Instances of this class have public read/write members for width and height.\n *\n * @param {integer} width The width of this record.\n * @param {integer} height The height of this record.\n */\nhterm.Size = function(width, height) {\n  this.width = width;\n  this.height = height;\n};\n\n/**\n * Adjust the width and height of this record.\n *\n * @param {integer} width The new width of this record.\n * @param {integer} height The new height of this record.\n */\nhterm.Size.prototype.resize = function(width, height) {\n  this.width = width;\n  this.height = height;\n};\n\n/**\n * Return a copy of this record.\n *\n * @return {hterm.Size} A new hterm.Size instance with the same width and\n * height.\n */\nhterm.Size.prototype.clone = function() {\n  return new hterm.Size(this.width, this.height);\n};\n\n/**\n * Set the height and width of this instance based on another hterm.Size.\n *\n * @param {hterm.Size} that The object to copy from.\n */\nhterm.Size.prototype.setTo = function(that) {\n  this.width = that.width;\n  this.height = that.height;\n};\n\n/**\n * Test if another hterm.Size instance is equal to this one.\n *\n * @param {hterm.Size} that The other hterm.Size instance.\n * @return {boolen} True if both instances have the same width/height, false\n *     otherwise.\n */\nhterm.Size.prototype.equals = function(that) {\n  return this.width == that.width && this.height == that.height;\n};\n\n/**\n * Return a string representation of this instance.\n *\n * @return {string} A string that identifies the width and height of this\n *     instance.\n */\nhterm.Size.prototype.toString = function() {\n  return '[hterm.Size: ' + this.width + ', ' + this.height + ']';\n};\n\n/**\n * Constructor for a hterm.RowCol record.\n *\n * Instances of this class have public read/write members for row and column.\n *\n * This class includes an 'overflow' bit which is use to indicate that the an\n * attempt has been made to move the cursor column passed the end of the\n * screen.  When this happens we leave the cursor column set to the last column\n * of the screen but set the overflow bit.  In this state cursor movement\n * happens normally, but any attempt to print new characters causes a cr/lf\n * first.\n *\n * @param {integer} row The row of this record.\n * @param {integer} column The column of this record.\n * @param {boolean} opt_overflow Optional boolean indicating that the RowCol\n *     has overflowed.\n */\nhterm.RowCol = function(row, column, opt_overflow) {\n  this.row = row;\n  this.column = column;\n  this.overflow = !!opt_overflow;\n};\n\n/**\n * Adjust the row and column of this record.\n *\n * @param {integer} row The new row of this record.\n * @param {integer} column The new column of this record.\n * @param {boolean} opt_overflow Optional boolean indicating that the RowCol\n *     has overflowed.\n */\nhterm.RowCol.prototype.move = function(row, column, opt_overflow) {\n  this.row = row;\n  this.column = column;\n  this.overflow = !!opt_overflow;\n};\n\n/**\n * Return a copy of this record.\n *\n * @return {hterm.RowCol} A new hterm.RowCol instance with the same row and\n * column.\n */\nhterm.RowCol.prototype.clone = function() {\n  return new hterm.RowCol(this.row, this.column, this.overflow);\n};\n\n/**\n * Set the row and column of this instance based on another hterm.RowCol.\n *\n * @param {hterm.RowCol} that The object to copy from.\n */\nhterm.RowCol.prototype.setTo = function(that) {\n  this.row = that.row;\n  this.column = that.column;\n  this.overflow = that.overflow;\n};\n\n/**\n * Test if another hterm.RowCol instance is equal to this one.\n *\n * @param {hterm.RowCol} that The other hterm.RowCol instance.\n * @return {boolen} True if both instances have the same row/column, false\n *     otherwise.\n */\nhterm.RowCol.prototype.equals = function(that) {\n  return (this.row == that.row && this.column == that.column &&\n          this.overflow == that.overflow);\n};\n\n/**\n * Return a string representation of this instance.\n *\n * @return {string} A string that identifies the row and column of this\n *     instance.\n */\nhterm.RowCol.prototype.toString = function() {\n  return ('[hterm.RowCol: ' + this.row + ', ' + this.column + ', ' +\n          this.overflow + ']');\n};\n// SOURCE FILE: hterm/js/hterm_frame.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.f');\n\n/**\n * First draft of the interface between the terminal and a third party dialog.\n *\n * This is rough.  It's just the terminal->dialog layer.  To complete things\n * we'll also need a command->terminal layer.  That will have to facilitate\n * command->terminal->dialog or direct command->dialog communication.\n *\n * I imagine this class will change significantly when that happens.\n */\n\n/**\n * Construct a new frame for the given terminal.\n *\n * @param terminal {hterm.Terminal} The parent terminal object.\n * @param url {String} The url to load in the frame.\n * @param opt_options {Object} Optional options for the frame.  Not implemented.\n */\nhterm.Frame = function(terminal, url, opt_options) {\n  this.terminal_ = terminal;\n  this.div_ = terminal.div_;\n  this.url = url;\n  this.options = opt_options || {};\n  this.iframe_ = null;\n  this.container_ = null;\n  this.messageChannel_ = null;\n};\n\n/**\n * Handle messages from the iframe.\n */\nhterm.Frame.prototype.onMessage_ = function(e) {\n  if (e.data.name != 'ipc-init-ok') {\n    console.log('Unknown message from frame:', e.data);\n    return;\n  }\n\n  this.sendTerminalInfo_();\n  this.messageChannel_.port1.onmessage = this.onMessage.bind(this);\n  this.onLoad();\n};\n\n/**\n * Clients could override this, I guess.\n *\n * It doesn't support multiple listeners, but I'm not sure that would make sense\n * here.  It's probably better to speak directly to our parents.\n */\nhterm.Frame.prototype.onMessage = function() {};\n\n/**\n * Handle iframe onLoad event.\n */\nhterm.Frame.prototype.onLoad_ = function() {\n  this.messageChannel_ = new MessageChannel();\n  this.messageChannel_.port1.onmessage = this.onMessage_.bind(this);\n  this.messageChannel_.port1.start();\n  this.iframe_.contentWindow.postMessage(\n      {name: 'ipc-init', argv: [{messagePort: this.messageChannel_.port2}]},\n      [this.messageChannel_.port2], this.url);\n};\n\n/**\n * Clients may override this.\n */\nhterm.Frame.prototype.onLoad = function() {};\n\n/**\n * Sends the terminal-info message to the iframe.\n */\nhterm.Frame.prototype.sendTerminalInfo_ = function() {\n  lib.f.getAcceptLanguages(function(languages) {\n      this.postMessage('terminal-info', [{\n         acceptLanguages: languages,\n         foregroundColor: this.terminal_.getForegroundColor(),\n         backgroundColor: this.terminal_.getBackgroundColor(),\n         cursorColor: this.terminal_.getCursorColor(),\n         fontSize: this.terminal_.getFontSize(),\n         fontFamily: this.terminal_.getFontFamily(),\n         baseURL: lib.f.getURL('/')\n          }]\n        );\n    }.bind(this));\n};\n\n/**\n * User clicked the close button on the frame decoration.\n */\nhterm.Frame.prototype.onCloseClicked_ = function() {\n  this.close();\n};\n\n/**\n * Close this frame.\n */\nhterm.Frame.prototype.close = function() {\n  if (!this.container_ || !this.container_.parentNode)\n      return;\n\n  this.container_.parentNode.removeChild(this.container_);\n  this.onClose();\n};\n\n\n/**\n * Clients may override this.\n */\nhterm.Frame.prototype.onClose = function() {};\n\n/**\n * Send a message to the iframe.\n */\nhterm.Frame.prototype.postMessage = function(name, argv) {\n  if (!this.messageChannel_)\n    throw new Error('Message channel is not set up.');\n\n  this.messageChannel_.port1.postMessage({name: name, argv: argv});\n};\n\n/**\n * Show the UI for this frame.\n *\n * The iframe src is not loaded until this method is called.\n */\nhterm.Frame.prototype.show = function() {\n  var self = this;\n\n  function opt(name, defaultValue) {\n    if (name in self.options)\n      return self.options[name];\n\n    return defaultValue;\n  }\n\n  var self = this;\n\n  if (this.container_ && this.container_.parentNode) {\n    console.error('Frame already visible');\n    return;\n  }\n\n  var headerHeight = '16px';\n\n  var divSize = hterm.getClientSize(this.div_);\n\n  var width = opt('width', 640);\n  var height = opt('height', 480);\n  var left = (divSize.width - width) / 2;\n  var top = (divSize.height - height) / 2;\n\n  var document = this.terminal_.document_;\n\n  var container = this.container_ = document.createElement('div');\n  container.style.cssText = (\n      'position: absolute;' +\n      'display: -webkit-flex;' +\n      '-webkit-flex-direction: column;' +\n      'top: 10%;' +\n      'left: 4%;' +\n      'width: 90%;' +\n      'height: 80%;' +\n      'box-shadow: 0 0 2px ' + this.terminal_.getForegroundColor() + ';' +\n      'border: 2px ' + this.terminal_.getForegroundColor() + ' solid;');\n\n  var header = document.createElement('div');\n  header.style.cssText = (\n      'display: -webkit-flex;' +\n      '-webkit-justify-content: flex-end;' +\n      'height: ' + headerHeight + ';' +\n      'background-color: ' + this.terminal_.getForegroundColor() + ';' +\n      'color: ' + this.terminal_.getBackgroundColor() + ';' +\n      'font-size: 16px;' +\n      'font-family: ' + this.terminal_.getFontFamily());\n  container.appendChild(header);\n\n  if (false) {\n    // No use for the close button.\n    var button = document.createElement('div');\n    button.setAttribute('role', 'button');\n    button.style.cssText = (\n        'margin-top: -3px;' +\n        'margin-right: 3px;' +\n        'cursor: pointer;');\n    button.textContent = '\\u2a2f';\n    button.addEventListener('click', this.onCloseClicked_.bind(this));\n    header.appendChild(button);\n  }\n\n  var iframe = this.iframe_ = document.createElement('iframe');\n  iframe.onload = this.onLoad_.bind(this);\n  iframe.style.cssText = (\n      'display: -webkit-flex;' +\n      '-webkit-flex: 1;' +\n      'width: 100%');\n  iframe.setAttribute('src', this.url);\n  iframe.setAttribute('seamless', true);\n  container.appendChild(iframe);\n\n  this.div_.appendChild(container);\n};\n// SOURCE FILE: hterm/js/hterm_keyboard.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('hterm.Keyboard.KeyMap');\n\n/**\n * Keyboard handler.\n *\n * Consumes onKey* events and invokes onVTKeystroke on the associated\n * hterm.Terminal object.\n *\n * See also: [XTERM] as referenced in vt.js.\n *\n * @param {hterm.Terminal} The Terminal object associated with this keyboard.\n */\nhterm.Keyboard = function(terminal) {\n  // The parent vt interpreter.\n  this.terminal = terminal;\n\n  // The element we're currently capturing keyboard events for.\n  this.keyboardElement_ = null;\n\n  // The event handlers we are interested in, and their bound callbacks, saved\n  // so they can be uninstalled with removeEventListener, when required.\n  this.handlers_ = [\n      ['blur', this.onBlur_.bind(this)],\n      ['keydown', this.onKeyDown_.bind(this)],\n      ['keypress', this.onKeyPress_.bind(this)],\n      ['keyup', this.onKeyUp_.bind(this)],\n      ['textInput', this.onTextInput_.bind(this)]\n  ];\n\n  /**\n   * The current key map.\n   */\n  this.keyMap = new hterm.Keyboard.KeyMap(this);\n\n  /**\n   * none: Disable any AltGr related munging.\n   * ctrl-alt: Assume Ctrl+Alt means AltGr.\n   * left-alt: Assume left Alt means AltGr.\n   * right-alt: Assume right Alt means AltGr.\n   */\n  this.altGrMode = 'none';\n\n  /**\n   * If true, Shift-Insert will fall through to the browser as a paste.\n   * If false, the keystroke will be sent to the host.\n   */\n  this.shiftInsertPaste = true;\n\n  /**\n   * If true, home/end will control the terminal scrollbar and shift home/end\n   * will send the VT keycodes.  If false then home/end sends VT codes and\n   * shift home/end scrolls.\n   */\n  this.homeKeysScroll = false;\n\n  /**\n   * Same as above, except for page up/page down.\n   */\n  this.pageKeysScroll = false;\n\n  /**\n   * If true, Ctrl-Plus/Minus/Zero controls zoom.\n   * If false, Ctrl-Shift-Plus/Minus/Zero controls zoom, Ctrl-Minus sends ^_,\n   * Ctrl-Plus/Zero do nothing.\n   */\n  this.ctrlPlusMinusZeroZoom = true;\n\n  /**\n   * Ctrl+C copies if true, sends ^C to host if false.\n   * Ctrl+Shift+C sends ^C to host if true, copies if false.\n   */\n  this.ctrlCCopy = false;\n\n  /**\n   * Ctrl+V pastes if true, sends ^V to host if false.\n   * Ctrl+Shift+V sends ^V to host if true, pastes if false.\n   */\n  this.ctrlVPaste = false;\n\n  /**\n   * Enable/disable application keypad.\n   *\n   * This changes the way numeric keys are sent from the keyboard.\n   */\n  this.applicationKeypad = false;\n\n  /**\n   * Enable/disable the application cursor mode.\n   *\n   * This changes the way cursor keys are sent from the keyboard.\n   */\n  this.applicationCursor = false;\n\n  /**\n   * If true, the backspace should send BS ('\\x08', aka ^H).  Otherwise\n   * the backspace key should send '\\x7f'.\n   */\n  this.backspaceSendsBackspace = false;\n\n  /**\n   * The encoding method for data sent to the host.\n   */\n  this.characterEncoding = 'utf-8';\n\n  /**\n   * Set whether the meta key sends a leading escape or not.\n   */\n  this.metaSendsEscape = true;\n\n  /**\n   * Set whether meta-V gets passed to host.\n   */\n  this.passMetaV = true;\n\n  /**\n   * Controls how the alt key is handled.\n   *\n   *  escape....... Send an ESC prefix.\n   *  8-bit........ Add 128 to the unshifted character as in xterm.\n   *  browser-key.. Wait for the keypress event and see what the browser says.\n   *                (This won't work well on platforms where the browser\n   *                 performs a default action for some alt sequences.)\n   *\n   * This setting only matters when alt is distinct from meta (altIsMeta is\n   * false.)\n   */\n  this.altSendsWhat = 'escape';\n\n  /**\n   * Set whether the alt key acts as a meta key, instead of producing 8-bit\n   * characters.\n   *\n   * True to enable, false to disable, null to autodetect based on platform.\n   */\n  this.altIsMeta = false;\n\n  /**\n   * If true, tries to detect DEL key events that are from alt-backspace on\n   * Chrome OS vs from a true DEL key press.\n   *\n   * Background: At the time of writing, on Chrome OS, alt-backspace is mapped\n   * to DEL. Some users may be happy with this, but others may be frustrated\n   * that it's impossible to do meta-backspace. If the user enables this pref,\n   * we use a trick to tell a true DEL keypress from alt-backspace: on\n   * alt-backspace, we will see the alt key go down, then get a DEL keystroke\n   * that indicates that alt is not pressed. See http://crbug.com/174410 .\n   */\n  this.altBackspaceIsMetaBackspace = false;\n\n  /**\n   * Used to keep track of the current alt-key state, which is necessary for\n   * the altBackspaceIsMetaBackspace preference above and for the altGrMode\n   * preference.  This is a bitmap with where bit positions correspond to the\n   * \"location\" property of the key event.\n   */\n  this.altKeyPressed = 0;\n\n  /**\n   * If true, Chrome OS media keys will be mapped to their F-key equivalent.\n   * E.g. \"Back\" will be mapped to F1. If false, Chrome will handle the keys.\n   */\n  this.mediaKeysAreFKeys = false;\n\n  /**\n   * Holds the previous setting of altSendsWhat when DECSET 1039 is used. When\n   * DECRST 1039 is used, altSendsWhat is changed back to this and this is\n   * nulled out.\n   */\n  this.previousAltSendsWhat_ = null;\n};\n\n/**\n * Special handling for keyCodes in a keyboard layout.\n */\nhterm.Keyboard.KeyActions = {\n  /**\n   * Call preventDefault and stopPropagation for this key event and nothing\n   * else.\n   */\n  CANCEL: new String('CANCEL'),\n\n  /**\n   * This performs the default terminal action for the key.  If used in the\n   * 'normal' action and the the keystroke represents a printable key, the\n   * character will be sent to the host.  If used in one of the modifier\n   * actions, the terminal will perform the normal action after (possibly)\n   * altering it.\n   *\n   *  - If the normal sequence starts with CSI, the sequence will be adjusted\n   *    to include the modifier parameter as described in [XTERM] in the final\n   *    table of the \"PC-Style Function Keys\" section.\n   *\n   *  - If the control key is down and the key represents a printable character,\n   *    and the uppercase version of the unshifted keycap is between\n   *    64 (ASCII '@') and 95 (ASCII '_'), then the uppercase version of the\n   *    unshifted keycap minus 64 is sent.  This makes '^@' send '\\x00' and\n   *    '^_' send '\\x1f'.  (Note that one higher that 0x1f is 0x20, which is\n   *    the first printable ASCII value.)\n   *\n   *  - If the alt key is down and the key represents a printable character then\n   *    the value of the character is shifted up by 128.\n   *\n   *  - If meta is down and configured to send an escape, '\\x1b' will be sent\n   *    before the normal action is performed.\n   */\n  DEFAULT: new String('DEFAULT'),\n\n  /**\n   * Causes the terminal to opt out of handling the key event, instead letting\n   * the browser deal with it.\n   */\n  PASS: new String('PASS'),\n\n  /**\n   * Insert the first or second character of the keyCap, based on e.shiftKey.\n   * The key will be handled in onKeyDown, and e.preventDefault() will be\n   * called.\n   *\n   * It is useful for a modified key action, where it essentially strips the\n   * modifier while preventing the browser from reacting to the key.\n   */\n  STRIP: new String('STRIP')\n};\n\n/**\n * Encode a string according to the 'send-encoding' preference.\n */\nhterm.Keyboard.prototype.encode = function(str) {\n  if (this.characterEncoding == 'utf-8')\n    return this.terminal.vt.encodeUTF8(str);\n\n  return str;\n};\n\n/**\n * Capture keyboard events sent to the associated element.\n *\n * This enables the keyboard.  Captured events are consumed by this class\n * and will not perform their default action or bubble to other elements.\n *\n * Passing a null element will uninstall the keyboard handlers.\n *\n * @param {HTMLElement} element The element whose events should be captured, or\n *     null to disable the keyboard.\n */\nhterm.Keyboard.prototype.installKeyboard = function(element) {\n  if (element == this.keyboardElement_)\n    return;\n\n  if (element && this.keyboardElement_)\n    this.installKeyboard(null);\n\n  for (var i = 0; i < this.handlers_.length; i++) {\n    var handler = this.handlers_[i];\n    if (element) {\n      element.addEventListener(handler[0], handler[1]);\n    } else {\n      this.keyboardElement_.removeEventListener(handler[0], handler[1]);\n    }\n  }\n\n  this.keyboardElement_ = element;\n};\n\n/**\n * Disable keyboard event capture.\n *\n * This will allow the browser to process key events normally.\n */\nhterm.Keyboard.prototype.uninstallKeyboard = function() {\n  this.installKeyboard(null);\n};\n\n/**\n * Handle onTextInput events.\n *\n * We're not actually supposed to get these, but we do on the Mac in the case\n * where a third party app sends synthetic keystrokes to Chrome.\n */\nhterm.Keyboard.prototype.onTextInput_ = function(e) {\n  if (!e.data)\n    return;\n\n  e.data.split('').forEach(this.terminal.onVTKeystroke.bind(this.terminal));\n};\n\n/**\n * Handle onKeyPress events.\n */\nhterm.Keyboard.prototype.onKeyPress_ = function(e) {\n  var code;\n\n  var key = String.fromCharCode(e.which);\n  var lowerKey = key.toLowerCase();\n  if ((e.ctrlKey || e.metaKey) && (lowerKey == 'c' || lowerKey == 'v')) {\n    // On FF the key press (not key down) event gets fired for copy/paste.\n    // Let it fall through for the default browser behaviour.\n    return;\n  }\n\n  if (e.altKey && this.altSendsWhat == 'browser-key' && e.charCode == 0) {\n    // If we got here because we were expecting the browser to handle an\n    // alt sequence but it didn't do it, then we might be on an OS without\n    // an enabled IME system.  In that case we fall back to xterm-like\n    // behavior.\n    //\n    // This happens here only as a fallback.  Typically these platforms should\n    // set altSendsWhat to either 'escape' or '8-bit'.\n    var ch = String.fromCharCode(e.keyCode);\n    if (!e.shiftKey)\n      ch = ch.toLowerCase();\n    code = ch.charCodeAt(0) + 128;\n\n  } else if (e.charCode >= 32) {\n    ch = e.charCode;\n  }\n\n  if (ch)\n    this.terminal.onVTKeystroke(String.fromCharCode(ch));\n\n  e.preventDefault();\n  e.stopPropagation();\n};\n\n/**\n * Prevent default handling for non-shifted event.\n *\n * When combined with Chrome permission 'app.window.fullscreen.overrideEsc',\n * and called for both key down and key up events,\n * the ESC key remains usable within fullscreen Chrome app windows.\n */\nhterm.Keyboard.prototype.preventChromeAppNonShiftDefault_ = function(e) {\n  if (!window.chrome || !window.chrome.app || !window.chrome.app.window)\n    return;\n  if (!e.shiftKey)\n    e.preventDefault();\n};\n\nhterm.Keyboard.prototype.onBlur_ = function(e) {\n  this.altKeyPressed = 0;\n};\n\nhterm.Keyboard.prototype.onKeyUp_ = function(e) {\n  if (e.keyCode == 18)\n    this.altKeyPressed = this.altKeyPressed & ~(1 << (e.location - 1));\n\n  if (e.keyCode == 27)\n    this.preventChromeAppNonShiftDefault_(e);\n};\n\n/**\n * Handle onKeyDown events.\n */\nhterm.Keyboard.prototype.onKeyDown_ = function(e) {\n  if (e.keyCode == 18)\n    this.altKeyPressed = this.altKeyPressed | (1 << (e.location - 1));\n\n  if (e.keyCode == 27)\n    this.preventChromeAppNonShiftDefault_(e);\n\n  var keyDef = this.keyMap.keyDefs[e.keyCode];\n  if (!keyDef) {\n    console.warn('No definition for keyCode: ' + e.keyCode);\n    return;\n  }\n\n  // The type of action we're going to use.\n  var resolvedActionType = null;\n\n  var self = this;\n  function getAction(name) {\n    // Get the key action for the given action name.  If the action is a\n    // function, dispatch it.  If the action defers to the normal action,\n    // resolve that instead.\n\n    resolvedActionType = name;\n\n    var action = keyDef[name];\n    if (typeof action == 'function')\n      action = action.apply(self.keyMap, [e, keyDef]);\n\n    if (action === DEFAULT && name != 'normal')\n      action = getAction('normal');\n\n    return action;\n  }\n\n  // Note that we use the triple-equals ('===') operator to test equality for\n  // these constants, in order to distingush usage of the constant from usage\n  // of a literal string that happens to contain the same bytes.\n  var CANCEL = hterm.Keyboard.KeyActions.CANCEL;\n  var DEFAULT = hterm.Keyboard.KeyActions.DEFAULT;\n  var PASS = hterm.Keyboard.KeyActions.PASS;\n  var STRIP = hterm.Keyboard.KeyActions.STRIP;\n\n  var control = e.ctrlKey;\n  var alt = this.altIsMeta ? false : e.altKey;\n  var meta = this.altIsMeta ? (e.altKey || e.metaKey) : e.metaKey;\n\n  // In the key-map, we surround the keyCap for non-printables in \"[...]\"\n  var isPrintable = !(/^\\[\\w+\\]$/.test(keyDef.keyCap));\n\n  switch (this.altGrMode) {\n    case 'ctrl-alt':\n    if (isPrintable && control && alt) {\n      // ctrl-alt-printable means altGr.  We clear out the control and\n      // alt modifiers and wait to see the charCode in the keydown event.\n      control = false;\n      alt = false;\n    }\n    break;\n\n    case 'right-alt':\n    if (isPrintable && (this.terminal.keyboard.altKeyPressed & 2)) {\n      control = false;\n      alt = false;\n    }\n    break;\n\n    case 'left-alt':\n    if (isPrintable && (this.terminal.keyboard.altKeyPressed & 1)) {\n      control = false;\n      alt = false;\n    }\n    break;\n  }\n\n  var action;\n\n  if (control) {\n    action = getAction('control');\n  } else if (alt) {\n    action = getAction('alt');\n  } else if (meta) {\n    action = getAction('meta');\n  } else {\n    action = getAction('normal');\n  }\n\n  if (alt && this.altSendsWhat == 'browser-key' && action == DEFAULT) {\n    // When altSendsWhat is 'browser-key', we wait for the keypress event.\n    // In keypress, the browser should have set the event.charCode to the\n    // appropriate character.\n    // TODO(rginda): Character compositions will need some black magic.\n    action = PASS;\n  }\n\n  if (action === PASS || (action === DEFAULT && !(control || alt || meta))) {\n    // If this key is supposed to be handled by the browser, or it is an\n    // unmodified key with the default action, then exit this event handler.\n    // If it's an unmodified key, it'll be handled in onKeyPress where we\n    // can tell for sure which ASCII code to insert.\n    //\n    // This block needs to come before the STRIP test, otherwise we'll strip\n    // the modifier and think it's ok to let the browser handle the keypress.\n    // The browser won't know we're trying to ignore the modifiers and might\n    // perform some default action.\n    return;\n  }\n\n  if (action === STRIP) {\n    alt = control = false;\n    action = keyDef.normal;\n    if (typeof action == 'function')\n      action = action.apply(this.keyMap, [e, keyDef]);\n\n    if (action == DEFAULT && keyDef.keyCap.length == 2)\n      action = keyDef.keyCap.substr((e.shiftKey ? 1 : 0), 1);\n  }\n\n  e.preventDefault();\n  e.stopPropagation();\n\n  if (action === CANCEL)\n    return;\n\n  if (action !== DEFAULT && typeof action != 'string') {\n    console.warn('Invalid action: ' + JSON.stringify(action));\n    return;\n  }\n\n  // Strip the modifier that is associated with the action, since we assume that\n  // modifier has already been accounted for in the action.\n  if (resolvedActionType == 'control') {\n    control = false;\n  } else if (resolvedActionType == 'alt') {\n    alt = false;\n  } else if (resolvedActionType == 'meta') {\n    meta = false;\n  }\n\n  // Maybe strip the shift modifier too, for the same reason as above.\n  // This is only used for Ctrl-Shift-Tab, which should send \"CSI Z\", not\n  // \"CSI 1 ; 2 Z\".\n  var shift = !e.maskShiftKey && e.shiftKey;\n\n  if (action.substr(0, 2) == '\\x1b[' && (alt || control || shift)) {\n    // The action is an escape sequence that and it was triggered in the\n    // presence of a keyboard modifier, we may need to alter the action to\n    // include the modifier before sending it.\n\n    var mod;\n\n    if (shift && !(alt || control)) {\n      mod = ';2';\n    } else if (alt && !(shift || control)) {\n      mod = ';3';\n    } else if (shift && alt && !control) {\n      mod = ';4';\n    } else if (control && !(shift || alt)) {\n      mod = ';5';\n    } else if (shift && control && !alt) {\n      mod = ';6';\n    } else if (alt && control && !shift) {\n      mod = ';7';\n    } else if (shift && alt && control) {\n      mod = ';8';\n    }\n\n    if (action.length == 3) {\n      // Some of the CSI sequences have zero parameters unless modified.\n      action = '\\x1b[1' + mod + action.substr(2, 1);\n    } else {\n      // Others always have at least one parameter.\n      action = action.substr(0, action.length - 1) + mod +\n          action.substr(action.length - 1);\n    }\n\n  } else {\n    if (action === DEFAULT) {\n      action = keyDef.keyCap.substr((e.shiftKey ? 1 : 0), 1);\n\n      if (control) {\n        var unshifted = keyDef.keyCap.substr(0, 1);\n        var code = unshifted.charCodeAt(0);\n        if (code >= 64 && code <= 95) {\n          action = String.fromCharCode(code - 64);\n        }\n      }\n    }\n\n    if (alt && this.altSendsWhat == '8-bit' && action.length == 1) {\n      var code = action.charCodeAt(0) + 128;\n      action = String.fromCharCode(code);\n    }\n\n    // We respect alt/metaSendsEscape even if the keymap action was a literal\n    // string.  Otherwise, every overridden alt/meta action would have to\n    // check alt/metaSendsEscape.\n    if ((alt && this.altSendsWhat == 'escape') ||\n        (meta && this.metaSendsEscape)) {\n      action = '\\x1b' + action;\n    }\n  }\n\n  this.terminal.onVTKeystroke(action);\n};\n// SOURCE FILE: hterm/js/hterm_keyboard_keymap.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('hterm.Keyboard.KeyActions');\n\n/**\n * The default key map for hterm.\n *\n * Contains a mapping of keyCodes to keyDefs (aka key definitions).  The key\n * definition tells the hterm.Keyboard class how to handle keycodes.\n *\n * This should work for most cases, as the printable characters get handled\n * in the keypress event.  In that case, even if the keycap is wrong in the\n * key map, the correct character should be sent.\n *\n * Different layouts, such as Dvorak should work with this keymap, as those\n * layouts typically move keycodes around on the keyboard without disturbing\n * the actual keycaps.\n *\n * There may be issues with control keys on non-US keyboards or with keyboards\n * that very significantly from the expectations here, in which case we may\n * have to invent new key maps.\n *\n * The sequences defined in this key map come from [XTERM] as referenced in\n * vt.js, starting with the section titled \"Alt and Meta Keys\".\n */\nhterm.Keyboard.KeyMap = function(keyboard) {\n  this.keyboard = keyboard;\n  this.keyDefs = {};\n  this.reset();\n};\n\n/**\n * Add a single key definition.\n *\n * The definition is a hash containing the following keys: 'keyCap', 'normal',\n * 'control', and 'alt'.\n *\n *  - keyCap is a string identifying the key.  For printable\n *    keys, the key cap should be exactly two characters, starting with the\n *    unshifted version.  For example, 'aA', 'bB', '1!' and '=+'.  For\n *    non-printable the key cap should be surrounded in square braces, as in\n *    '[INS]', '[LEFT]'.  By convention, non-printable keycaps are in uppercase\n *    but this is not a strict requirement.\n *\n *  - Normal is the action that should be performed when they key is pressed\n *    in the absence of any modifier.  See below for the supported actions.\n *\n *  - Control is the action that should be performed when they key is pressed\n *    along with the control modifier.  See below for the supported actions.\n *\n *  - Alt is the action that should be performed when they key is pressed\n *    along with the alt modifier.  See below for the supported actions.\n *\n *  - Meta is the action that should be performed when they key is pressed\n *    along with the meta modifier.  See below for the supported actions.\n *\n * Actions can be one of the hterm.Keyboard.KeyActions as documented below,\n * a literal string, or an array.  If the action is a literal string then\n * the string is sent directly to the host.  If the action is an array it\n * is taken to be an escape sequence that may be altered by modifier keys.\n * The second-to-last element of the array will be overwritten with the\n * state of the modifier keys, as specified in the final table of \"PC-Style\n * Function Keys\" from [XTERM].\n */\nhterm.Keyboard.KeyMap.prototype.addKeyDef = function(keyCode, def) {\n  if (keyCode in this.keyDefs)\n    console.warn('Duplicate keyCode: ' + keyCode);\n\n  this.keyDefs[keyCode] = def;\n};\n\n/**\n * Add mutiple key definitions in a single call.\n *\n * This function takes the key definitions as variable argument list.  Each\n * argument is the key definition specified as an array.\n *\n * (If the function took everything as one big hash we couldn't detect\n * duplicates, and there would be a lot more typing involved.)\n *\n * Each key definition should have 6 elements: (keyCode, keyCap, normal action,\n * control action, alt action and meta action).  See KeyMap.addKeyDef for the\n * meaning of these elements.\n */\nhterm.Keyboard.KeyMap.prototype.addKeyDefs = function(var_args) {\n  for (var i = 0; i < arguments.length; i++) {\n    this.addKeyDef(arguments[i][0],\n                   { keyCap: arguments[i][1],\n                     normal: arguments[i][2],\n                     control: arguments[i][3],\n                     alt: arguments[i][4],\n                     meta: arguments[i][5]\n                   });\n  }\n};\n\n/**\n * Inherit from hterm.Keyboard.KeyMap, as defined in keyboard.js.\n */\nhterm.Keyboard.KeyMap.prototype = {\n  __proto__: hterm.Keyboard.KeyMap.prototype\n};\n\n/**\n * Set up the default state for this keymap.\n */\nhterm.Keyboard.KeyMap.prototype.reset = function() {\n  this.keyDefs = {};\n\n  var self = this;\n\n  // This function is used by the \"macro\" functions below.  It makes it\n  // possible to use the call() macro as an argument to any other macro.\n  function resolve(action, e, k) {\n    if (typeof action == 'function')\n      return action.apply(self, [e, k]);\n\n    return action;\n  }\n\n  // If not application keypad a, else b.  The keys that care about\n  // application keypad ignore it when the key is modified.\n  function ak(a, b) {\n    return function(e, k) {\n      var action = (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey ||\n                    !self.keyboard.applicationKeypad) ? a : b;\n      return resolve(action, e, k);\n    };\n  }\n\n  // If mod or not application cursor a, else b.  The keys that care about\n  // application cursor ignore it when the key is modified.\n  function ac(a, b) {\n    return function(e, k) {\n      var action = (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey ||\n                    !self.keyboard.applicationCursor) ? a : b;\n      return resolve(action, e, k);\n    };\n  }\n\n  // If not backspace-sends-backspace keypad a, else b.\n  function bs(a, b) {\n    return function(e, k) {\n      var action = !self.keyboard.backspaceSendsBackspace ? a : b;\n      return resolve(action, e, k);\n    };\n  }\n\n  // If not e.shiftKey a, else b.\n  function sh(a, b) {\n    return function(e, k) {\n      var action = !e.shiftKey ? a : b;\n      e.maskShiftKey = true;\n      return resolve(action, e, k);\n    };\n  }\n\n  // If not e.altKey a, else b.\n  function alt(a, b) {\n    return function(e, k) {\n      var action = !e.altKey ? a : b;\n      return resolve(action, e, k);\n    };\n  }\n\n  // If no modifiers a, else b.\n  function mod(a, b) {\n    return function(e, k) {\n      var action = !(e.shiftKey || e.ctrlKey || e.altKey || e.metaKey) ? a : b;\n      return resolve(action, e, k);\n    };\n  }\n\n  // Compute a control character for a given character.\n  function ctl(ch) { return String.fromCharCode(ch.charCodeAt(0) - 64) }\n\n  // Call a method on the keymap instance.\n  function c(m) { return function (e, k) { return this[m](e, k) } }\n\n  // Ignore if not trapping media keys.\n  function med(fn) {\n    return function(e, k) {\n      if (!self.keyboard.mediaKeysAreFKeys) {\n        // Block Back, Forward, and Reload keys to avoid navigating away from\n        // the current page.\n        return (e.keyCode == 166 || e.keyCode == 167 || e.keyCode == 168) ?\n            hterm.Keyboard.KeyActions.CANCEL :\n            hterm.Keyboard.KeyActions.PASS;\n      }\n      return resolve(fn, e, k);\n    };\n  }\n\n  var ESC = '\\x1b';\n  var CSI = '\\x1b[';\n  var SS3 = '\\x1bO';\n\n  var CANCEL = hterm.Keyboard.KeyActions.CANCEL;\n  var DEFAULT = hterm.Keyboard.KeyActions.DEFAULT;\n  var PASS = hterm.Keyboard.KeyActions.PASS;\n  var STRIP = hterm.Keyboard.KeyActions.STRIP;\n\n  this.addKeyDefs(\n    // These fields are: [keycode, keycap, normal, control, alt, meta]\n\n    // The browser sends the keycode 0 for some keys.  We'll just assume it's\n    // going to do the right thing by default for those keys.\n    [0,   '[UNKNOWN]', PASS, PASS, PASS, PASS],\n\n    // First row.\n    [27,  '[ESC]', ESC,                       DEFAULT, DEFAULT,     DEFAULT],\n    [112, '[F1]',  mod(SS3 + 'P', CSI + 'P'), DEFAULT, CSI + \"23~\", DEFAULT],\n    [113, '[F2]',  mod(SS3 + 'Q', CSI + 'Q'), DEFAULT, CSI + \"24~\", DEFAULT],\n    [114, '[F3]',  mod(SS3 + 'R', CSI + 'R'), DEFAULT, CSI + \"25~\", DEFAULT],\n    [115, '[F4]',  mod(SS3 + 'S', CSI + 'S'), DEFAULT, CSI + \"26~\", DEFAULT],\n    [116, '[F5]',  CSI + '15~',               DEFAULT, CSI + \"28~\", DEFAULT],\n    [117, '[F6]',  CSI + '17~',               DEFAULT, CSI + \"29~\", DEFAULT],\n    [118, '[F7]',  CSI + '18~',               DEFAULT, CSI + \"31~\", DEFAULT],\n    [119, '[F8]',  CSI + '19~',               DEFAULT, CSI + \"32~\", DEFAULT],\n    [120, '[F9]',  CSI + '20~',               DEFAULT, CSI + \"33~\", DEFAULT],\n    [121, '[F10]', CSI + '21~',               DEFAULT, CSI + \"34~\", DEFAULT],\n    [122, '[F11]', CSI + '23~',               DEFAULT, CSI + \"42~\", DEFAULT],\n    [123, '[F12]', CSI + '24~',               DEFAULT, CSI + \"43~\", DEFAULT],\n\n    // Second row.\n    [192, '`~', DEFAULT, sh(ctl('@'), ctl('^')),     DEFAULT,           PASS],\n    [49,  '1!', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [50,  '2@', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [51,  '3#', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [52,  '4$', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [53,  '5%', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [54,  '6^', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [55,  '7&', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [56,  '8*', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [57,  '9(', DEFAULT, c('onCtrlNum_'),    c('onAltNum_'), c('onMetaNum_')],\n    [48,  '0)', DEFAULT, c('onPlusMinusZero_'),c('onAltNum_'),c('onPlusMinusZero_')],\n    [189, '-_', DEFAULT, c('onPlusMinusZero_'), DEFAULT, c('onPlusMinusZero_')],\n    [187, '=+', DEFAULT, c('onPlusMinusZero_'), DEFAULT, c('onPlusMinusZero_')],\n    // Firefox -_ and =+\n    [173, '-_', DEFAULT, c('onPlusMinusZero_'), DEFAULT, c('onPlusMinusZero_')],\n    [61, '=+', DEFAULT, c('onPlusMinusZero_'), DEFAULT, c('onPlusMinusZero_')],\n    // Firefox Italian +*\n    [171, '+*', DEFAULT, c('onPlusMinusZero_'), DEFAULT, c('onPlusMinusZero_')],\n\n    [8,   '[BKSP]', bs('\\x7f', '\\b'), bs('\\b', '\\x7f'), DEFAULT,     DEFAULT],\n\n    // Third row.\n    [9,   '[TAB]', sh('\\t', CSI + 'Z'), STRIP,     PASS,    DEFAULT],\n    [81,  'qQ',    DEFAULT,             ctl('Q'),  DEFAULT, DEFAULT],\n    [87,  'wW',    DEFAULT,             ctl('W'),  DEFAULT, DEFAULT],\n    [69,  'eE',    DEFAULT,             ctl('E'),  DEFAULT, DEFAULT],\n    [82,  'rR',    DEFAULT,             ctl('R'),  DEFAULT, DEFAULT],\n    [84,  'tT',    DEFAULT,             ctl('T'),  DEFAULT, DEFAULT],\n    [89,  'yY',    DEFAULT,             ctl('Y'),  DEFAULT, DEFAULT],\n    [85,  'uU',    DEFAULT,             ctl('U'),  DEFAULT, DEFAULT],\n    [73,  'iI',    DEFAULT,             ctl('I'),  DEFAULT, DEFAULT],\n    [79,  'oO',    DEFAULT,             ctl('O'),  DEFAULT, DEFAULT],\n    [80,  'pP',    DEFAULT,             ctl('P'),  DEFAULT, DEFAULT],\n    [219, '[{',    DEFAULT,             ctl('['),  DEFAULT, DEFAULT],\n    [221, ']}',    DEFAULT,             ctl(']'),  DEFAULT, DEFAULT],\n    [220, '\\\\|',   DEFAULT,             ctl('\\\\'), DEFAULT, DEFAULT],\n\n    // Fourth row. (We let Ctrl-Shift-J pass for Chrome DevTools.)\n    [20,  '[CAPS]',  PASS,    PASS,                           PASS,    DEFAULT],\n    [65,  'aA',      DEFAULT, ctl('A'),                       DEFAULT, DEFAULT],\n    [83,  'sS',      DEFAULT, ctl('S'),                       DEFAULT, DEFAULT],\n    [68,  'dD',      DEFAULT, ctl('D'),                       DEFAULT, DEFAULT],\n    [70,  'fF',      DEFAULT, ctl('F'),                       DEFAULT, DEFAULT],\n    [71,  'gG',      DEFAULT, ctl('G'),                       DEFAULT, DEFAULT],\n    [72,  'hH',      DEFAULT, ctl('H'),                       DEFAULT, DEFAULT],\n    [74,  'jJ',      DEFAULT, sh(ctl('J'), PASS),             DEFAULT, DEFAULT],\n    [75,  'kK',      DEFAULT, sh(ctl('K'), c('onClear_')),    DEFAULT, DEFAULT],\n    [76,  'lL',      DEFAULT, sh(ctl('L'), PASS),             DEFAULT, DEFAULT],\n    [186, ';:',      DEFAULT, STRIP,                          DEFAULT, DEFAULT],\n    [222, '\\'\"',     DEFAULT, STRIP,                          DEFAULT, DEFAULT],\n    [13,  '[ENTER]', '\\r',    CANCEL,                         CANCEL,  DEFAULT],\n\n    // Fifth row.  This includes the copy/paste shortcuts.  On some\n    // platforms it's Ctrl-C/V, on others it's Meta-C/V.  We assume either\n    // Ctrl-C/Meta-C should pass to the browser when there is a selection,\n    // and Ctrl-Shift-V/Meta-*-V should always pass to the browser (since\n    // these seem to be recognized as paste too).\n    [16,  '[SHIFT]', PASS, PASS,                   PASS,    DEFAULT],\n    [90,  'zZ',   DEFAULT, ctl('Z'),               DEFAULT, DEFAULT],\n    [88,  'xX',   DEFAULT, ctl('X'),               DEFAULT, DEFAULT],\n    [67,  'cC',   DEFAULT, c('onCtrlC_'),          DEFAULT, c('onMetaC_')],\n    [86,  'vV',   DEFAULT, c('onCtrlV_'),          DEFAULT, c('onMetaV_')],\n    [66,  'bB',   DEFAULT, sh(ctl('B'), PASS),     DEFAULT, sh(DEFAULT, PASS)],\n    [78,  'nN',   DEFAULT, c('onCtrlN_'),          DEFAULT, c('onMetaN_')],\n    [77,  'mM',   DEFAULT, ctl('M'),               DEFAULT, DEFAULT],\n    [188, ',<',   DEFAULT, alt(STRIP, PASS),       DEFAULT, DEFAULT],\n    [190, '.>',   DEFAULT, alt(STRIP, PASS),       DEFAULT, DEFAULT],\n    [191, '/?',   DEFAULT, sh(ctl('_'), ctl('?')), DEFAULT, DEFAULT],\n\n    // Sixth and final row.\n    [17,  '[CTRL]',  PASS,    PASS,     PASS,    PASS],\n    [18,  '[ALT]',   PASS,    PASS,     PASS,    PASS],\n    [91,  '[LAPL]',  PASS,    PASS,     PASS,    PASS],\n    [32,  ' ',       DEFAULT, ctl('@'), DEFAULT, DEFAULT],\n    [92,  '[RAPL]',  PASS,    PASS,     PASS,    PASS],\n    [93,  '[RMENU]', PASS,    PASS,     PASS,    PASS],\n\n    // These things.\n    [42,  '[PRTSCR]', PASS, PASS, PASS, PASS],\n    [145, '[SCRLK]',  PASS, PASS, PASS, PASS],\n    [19,  '[BREAK]',  PASS, PASS, PASS, PASS],\n\n    // The block of six keys above the arrows.\n    [45,  '[INSERT]', c('onKeyInsert_'),   DEFAULT, DEFAULT, DEFAULT],\n    [36,  '[HOME]',   c('onKeyHome_'),     DEFAULT, DEFAULT, DEFAULT],\n    [33,  '[PGUP]',   c('onKeyPageUp_'),   DEFAULT, DEFAULT, DEFAULT],\n    [46,  '[DEL]',    c('onKeyDel_'),      DEFAULT, DEFAULT, DEFAULT],\n    [35,  '[END]',    c('onKeyEnd_'),      DEFAULT, DEFAULT, DEFAULT],\n    [34,  '[PGDOWN]', c('onKeyPageDown_'), DEFAULT, DEFAULT, DEFAULT],\n\n    // Arrow keys.  When unmodified they respect the application cursor state,\n    // otherwise they always send the CSI codes.\n    [38, '[UP]',    ac(CSI + 'A', SS3 + 'A'), DEFAULT, DEFAULT, DEFAULT],\n    [40, '[DOWN]',  ac(CSI + 'B', SS3 + 'B'), DEFAULT, DEFAULT, DEFAULT],\n    [39, '[RIGHT]', ac(CSI + 'C', SS3 + 'C'), DEFAULT, DEFAULT, DEFAULT],\n    [37, '[LEFT]',  ac(CSI + 'D', SS3 + 'D'), DEFAULT, DEFAULT, DEFAULT],\n\n    [144, '[NUMLOCK]', PASS, PASS, PASS, PASS],\n\n    // With numlock off, the keypad generates the same key codes as the arrows\n    // and 'block of six' for some keys, and null key codes for the rest.\n\n    // Keypad with numlock on generates unique key codes...\n    [96,  '[KP0]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [97,  '[KP1]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [98,  '[KP2]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [99,  '[KP3]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [100, '[KP4]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [101, '[KP5]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [102, '[KP6]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [103, '[KP7]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [104, '[KP8]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [105, '[KP9]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [107, '[KP+]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [109, '[KP-]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [106, '[KP*]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [111, '[KP/]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n    [110, '[KP.]', DEFAULT, DEFAULT, DEFAULT, DEFAULT],\n\n    // Chrome OS keyboard top row.\n    [166, '[BACK]',   med(mod(SS3+'P', CSI+'P')), DEFAULT, CSI+\"23~\", DEFAULT],\n    [167, '[FWD]',    med(mod(SS3+'Q', CSI+'Q')), DEFAULT, CSI+\"24~\", DEFAULT],\n    [168, '[RELOAD]', med(mod(SS3+'R', CSI+'R')), DEFAULT, CSI+\"25~\", DEFAULT],\n    [183, '[FSCR]',   med(mod(SS3+'S', CSI+'S')), DEFAULT, CSI+\"26~\", DEFAULT],\n    [182, '[WINS]',   med(CSI + '15~'),           DEFAULT, CSI+\"28~\", DEFAULT],\n    [216, '[BRIT-]',  med(CSI + '17~'),           DEFAULT, CSI+\"29~\", DEFAULT],\n    [217, '[BRIT+]',  med(CSI + '18~'),           DEFAULT, CSI+\"31~\", DEFAULT]\n\n    // 173 [MUTE], 174 [VOL-] and 175 [VOL+] are trapped by the Chrome OS\n    // window manager, so we'll never see them. Note that 173 is also\n    // Firefox's -_ keycode.\n  );\n};\n\n/**\n * Either allow the paste or send a key sequence.\n */\nhterm.Keyboard.KeyMap.prototype.onKeyInsert_ = function(e) {\n  if (this.keyboard.shiftInsertPaste && e.shiftKey)\n    return hterm.Keyboard.KeyActions.PASS;\n\n  return '\\x1b[2~';\n};\n\n/**\n * Either scroll the scrollback buffer or send a key sequence.\n */\nhterm.Keyboard.KeyMap.prototype.onKeyHome_ = function(e) {\n  if (!this.keyboard.homeKeysScroll ^ e.shiftKey) {\n    if ((e.altey || e.ctrlKey || e.shiftKey) ||\n        !this.keyboard.applicationCursor) {\n      return '\\x1b[H';\n    }\n\n    return '\\x1bOH';\n  }\n\n  this.keyboard.terminal.scrollHome();\n  return hterm.Keyboard.KeyActions.CANCEL;\n};\n\n/**\n * Either scroll the scrollback buffer or send a key sequence.\n */\nhterm.Keyboard.KeyMap.prototype.onKeyEnd_ = function(e) {\n  if (!this.keyboard.homeKeysScroll ^ e.shiftKey) {\n    if ((e.altKey || e.ctrlKey || e.shiftKey) ||\n        !this.keyboard.applicationCursor) {\n      return '\\x1b[F';\n    }\n\n    return '\\x1bOF';\n  }\n\n  this.keyboard.terminal.scrollEnd();\n  return hterm.Keyboard.KeyActions.CANCEL;\n};\n\n/**\n * Either scroll the scrollback buffer or send a key sequence.\n */\nhterm.Keyboard.KeyMap.prototype.onKeyPageUp_ = function(e) {\n  if (!this.keyboard.pageKeysScroll ^ e.shiftKey)\n    return '\\x1b[5~';\n\n  this.keyboard.terminal.scrollPageUp();\n  return hterm.Keyboard.KeyActions.CANCEL;\n};\n\n/**\n * Either send a true DEL, or sub in meta-backspace.\n *\n * On Chrome OS, if we know the alt key is down, but we get a DEL event that\n * claims that the alt key is not pressed, we know the DEL was a synthetic\n * one from a user that hit alt-backspace. Based on a user pref, we can sub\n * in meta-backspace in this case.\n */\nhterm.Keyboard.KeyMap.prototype.onKeyDel_ = function(e) {\n  if (this.keyboard.altBackspaceIsMetaBackspace &&\n      this.keyboard.altKeyPressed && !e.altKey)\n    return '\\x1b\\x7f';\n  return '\\x1b[3~';\n};\n\n/**\n * Either scroll the scrollback buffer or send a key sequence.\n */\nhterm.Keyboard.KeyMap.prototype.onKeyPageDown_ = function(e) {\n  if (!this.keyboard.pageKeysScroll ^ e.shiftKey)\n    return '\\x1b[6~';\n\n  this.keyboard.terminal.scrollPageDown();\n  return hterm.Keyboard.KeyActions.CANCEL;\n};\n\n/**\n * Clear the primary/alternate screens and the scrollback buffer.\n */\nhterm.Keyboard.KeyMap.prototype.onClear_ = function(e, keyDef) {\n  this.keyboard.terminal.wipeContents();\n  return hterm.Keyboard.KeyActions.CANCEL;\n};\n\n/**\n * Either pass Ctrl-1..9 to the browser or send them to the host.\n *\n * Note that Ctrl-1 and Ctrl-9 don't actually have special sequences mapped\n * to them in xterm or gnome-terminal.  The range is really Ctrl-2..8, but\n * we handle 1..9 since Chrome treats the whole range special.\n */\nhterm.Keyboard.KeyMap.prototype.onCtrlNum_ = function(e, keyDef) {\n  // Compute a control character for a given character.\n  function ctl(ch) { return String.fromCharCode(ch.charCodeAt(0) - 64) }\n\n  if (this.keyboard.terminal.passCtrlNumber && !e.shiftKey)\n    return hterm.Keyboard.KeyActions.PASS;\n\n  switch (keyDef.keyCap.substr(0, 1)) {\n    case '1': return '1';\n    case '2': return ctl('@');\n    case '3': return ctl('[');\n    case '4': return ctl('\\\\');\n    case '5': return ctl(']');\n    case '6': return ctl('^');\n    case '7': return ctl('_');\n    case '8': return '\\x7f';\n    case '9': return '9';\n  }\n};\n\n/**\n * Either pass Alt-1..9 to the browser or send them to the host.\n */\nhterm.Keyboard.KeyMap.prototype.onAltNum_ = function(e, keyDef) {\n  if (this.keyboard.terminal.passAltNumber && !e.shiftKey)\n    return hterm.Keyboard.KeyActions.PASS;\n\n  return hterm.Keyboard.KeyActions.DEFAULT;\n};\n\n/**\n * Either pass Meta-1..9 to the browser or send them to the host.\n */\nhterm.Keyboard.KeyMap.prototype.onMetaNum_ = function(e, keyDef) {\n  if (this.keyboard.terminal.passMetaNumber && !e.shiftKey)\n    return hterm.Keyboard.KeyActions.PASS;\n\n  return hterm.Keyboard.KeyActions.DEFAULT;\n};\n\n/**\n * Either send a ^C or interpret the keystroke as a copy command.\n */\nhterm.Keyboard.KeyMap.prototype.onCtrlC_ = function(e, keyDef) {\n  var selection = this.keyboard.terminal.getDocument().getSelection();\n\n  if (!selection.isCollapsed) {\n    if (this.keyboard.ctrlCCopy && !e.shiftKey) {\n      // Ctrl-C should copy if there is a selection, send ^C otherwise.\n      // Perform the copy by letting the browser handle Ctrl-C.  On most\n      // browsers, this is the *only* way to place text on the clipboard from\n      // the 'drive-by' web.\n      if (this.keyboard.terminal.clearSelectionAfterCopy) {\n        setTimeout(selection.collapseToEnd.bind(selection), 50);\n      }\n      if (this.keyboard.terminal.prefs_.get('enable-clipboard-notice'))\n        setTimeout(this.keyboard.terminal.showOverlay.bind(this.keyboard.terminal, hterm.notifyCopyMessage, 500), 200);\n      return hterm.Keyboard.KeyActions.PASS;\n    }\n\n    if (!this.keyboard.ctrlCCopy && e.shiftKey) {\n      // Ctrl-Shift-C should copy if there is a selection, send ^C otherwise.\n      // Perform the copy manually.  This only works in situations where\n      // document.execCommand('copy') is allowed.\n      if (this.keyboard.terminal.clearSelectionAfterCopy) {\n        setTimeout(selection.collapseToEnd.bind(selection), 50);\n      }\n      this.keyboard.terminal.copySelectionToClipboard();\n      return hterm.Keyboard.KeyActions.CANCEL;\n    }\n  }\n\n  return '\\x03';\n};\n\n/**\n * Either send a ^N or open a new window to the same location.\n */\nhterm.Keyboard.KeyMap.prototype.onCtrlN_ = function(e, keyDef) {\n  if (e.shiftKey) {\n    window.open(document.location.href, '',\n                'chrome=no,close=yes,resize=yes,scrollbars=yes,' +\n                'minimizable=yes,width=' + window.innerWidth +\n                ',height=' + window.innerHeight);\n    return hterm.Keyboard.KeyActions.CANCEL;\n  }\n\n  return '\\x0e';\n};\n\n/**\n * Either send a ^V or allow the browser to interpret the keystroke as a paste\n * command.\n *\n * The default behavior is to paste if the user presses Ctrl-Shift-V, and send\n * a ^V if the user presses Ctrl-V. This can be flipped with the\n * 'ctrl-v-paste' preference.\n */\nhterm.Keyboard.KeyMap.prototype.onCtrlV_ = function(e, keyDef) {\n  if ((!e.shiftKey && this.keyboard.ctrlVPaste) ||\n      (e.shiftKey && !this.keyboard.ctrlVPaste)) {\n    return hterm.Keyboard.KeyActions.PASS;\n  }\n\n  return '\\x16';\n};\n\n/**\n * Either the default action or open a new window to the same location.\n */\nhterm.Keyboard.KeyMap.prototype.onMetaN_ = function(e, keyDef) {\n  if (e.shiftKey) {\n    window.open(document.location.href, '',\n                'chrome=no,close=yes,resize=yes,scrollbars=yes,' +\n                'minimizable=yes,width=' + window.outerWidth +\n                ',height=' + window.outerHeight);\n    return hterm.Keyboard.KeyActions.CANCEL;\n  }\n\n  return hterm.Keyboard.KeyActions.DEFAULT;\n};\n\n/**\n * Either send a Meta-C or allow the browser to interpret the keystroke as a\n * copy command.\n *\n * If there is no selection, or if the user presses Meta-Shift-C, then we'll\n * transmit an '\\x1b' (if metaSendsEscape is on) followed by 'c' or 'C'.\n *\n * If there is a selection, we defer to the browser.  In this case we clear out\n * the selection so the user knows we heard them, and also to give them a\n * chance to send a Meta-C by just hitting the key again.\n */\nhterm.Keyboard.KeyMap.prototype.onMetaC_ = function(e, keyDef) {\n  var document = this.keyboard.terminal.getDocument();\n  if (e.shiftKey || document.getSelection().isCollapsed) {\n    // If the shift key is being held, or there is no document selection, send\n    // a Meta-C.  The keyboard code will add the ESC if metaSendsEscape is true,\n    // we just have to decide between 'c' and 'C'.\n    return keyDef.keyCap.substr(e.shiftKey ? 1 : 0, 1);\n  }\n\n  // Otherwise let the browser handle it as a copy command.\n  if (this.keyboard.terminal.clearSelectionAfterCopy) {\n    setTimeout(function() { document.getSelection().collapseToEnd() }, 50);\n  }\n  return hterm.Keyboard.KeyActions.PASS;\n};\n\n/**\n * Either PASS or DEFAULT Meta-V, depending on preference.\n *\n * Always PASS Meta-Shift-V to allow browser to interpret the keystroke as\n * a paste command.\n */\nhterm.Keyboard.KeyMap.prototype.onMetaV_ = function(e, keyDef) {\n  if (e.shiftKey)\n    return hterm.Keyboard.KeyActions.PASS;\n\n  return this.keyboard.passMetaV ?\n      hterm.Keyboard.KeyActions.PASS :\n      hterm.Keyboard.KeyActions.DEFAULT;\n};\n\n/**\n * Handle font zooming.\n *\n * The browser's built-in zoom has a bit of an issue at certain zoom levels.\n * At some magnifications, the measured height of a row of text differs from\n * the height that was explicitly set.\n *\n * We override the browser zoom keys to change the ScrollPort's font size to\n * avoid the issue.\n */\nhterm.Keyboard.KeyMap.prototype.onPlusMinusZero_ = function(e, keyDef) {\n  if (!(this.keyboard.ctrlPlusMinusZeroZoom ^ e.shiftKey)) {\n    // If ctrl-PMZ controls zoom and the shift key is pressed, or\n    // ctrl-shift-PMZ controls zoom and this shift key is not pressed,\n    // then we want to send the control code instead of affecting zoom.\n    if (keyDef.keyCap == '-_')\n      return '\\x1f';  // ^_\n\n    // Only ^_ is valid, the other sequences have no meaning.\n    return hterm.Keyboard.KeyActions.CANCEL;\n  }\n\n  if (this.keyboard.terminal.getZoomFactor() != 1) {\n    // If we're not at 1:1 zoom factor, let the Ctrl +/-/0 keys control the\n    // browser zoom, so it's easier to for the user to get back to 100%.\n    return hterm.Keyboard.KeyActions.PASS;\n  }\n\n  var cap = keyDef.keyCap.substr(0, 1);\n  if (cap == '0') {\n      this.keyboard.terminal.setFontSize(0);\n  } else {\n    var size = this.keyboard.terminal.getFontSize();\n\n    if (cap == '-') {\n      size -= 1;\n    } else {\n      size += 1;\n    }\n\n    this.keyboard.terminal.setFontSize(size);\n  }\n\n  return hterm.Keyboard.KeyActions.CANCEL;\n};\n// SOURCE FILE: hterm/js/hterm_options.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * @fileoverview This file implements the hterm.Options class,\n * which stores current operating conditions for the terminal.  This object is\n * used instead of a series of parameters to allow saving/restoring of cursor\n * conditions easily, and to provide an easy place for common configuration\n * options.\n *\n * Original code by Cory Maccarrone.\n */\n\n/**\n * Constructor for the hterm.Options class, optionally acting as a copy\n * constructor.\n *\n * The defaults are as defined in http://www.vt100.net/docs/vt510-rm/DECSTR\n * except that we enable autowrap (wraparound) by defaut since that seems to\n * be what xterm does.\n *\n * @param {hterm.Options=} opt_copy Optional instance to copy.\n * @constructor\n */\nhterm.Options = function(opt_copy) {\n  // All attributes in this class are public to allow easy access by the\n  // terminal.\n\n  this.wraparound = opt_copy ? opt_copy.wraparound : true;\n  this.reverseWraparound = opt_copy ? opt_copy.reverseWraparound : false;\n  this.originMode = opt_copy ? opt_copy.originMode : false;\n  this.autoCarriageReturn = opt_copy ? opt_copy.autoCarriageReturn : false;\n  this.cursorVisible = opt_copy ? opt_copy.cursorVisible : false;\n  this.cursorBlink = opt_copy ? opt_copy.cursorBlink : false;\n  this.insertMode = opt_copy ? opt_copy.insertMode : false;\n  this.reverseVideo = opt_copy ? opt_copy.reverseVideo : false;\n  this.bracketedPaste = opt_copy ? opt_copy.bracketedPaste : false;\n};\n// SOURCE FILE: hterm/js/hterm_preference_manager.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.f', 'lib.Storage');\n\n/**\n * PreferenceManager subclass managing global NaSSH preferences.\n *\n * This is currently just an ordered list of known connection profiles.\n */\nhterm.PreferenceManager = function(profileId) {\n  lib.PreferenceManager.call(this, hterm.defaultStorage,\n                             '/hterm/profiles/' + profileId);\n  var defs = hterm.PreferenceManager.defaultPreferences;\n  Object.keys(defs).forEach(function(key) {\n    this.definePreference(key, defs[key]);\n  }.bind(this));\n};\n\nhterm.PreferenceManager.defaultPreferences = {\n  /**\n   * Select an AltGr detection hack^Wheuristic.\n   *\n   * null: Autodetect based on navigator.language:\n   *       'en-us' => 'none', else => 'right-alt'\n   * 'none': Disable any AltGr related munging.\n   * 'ctrl-alt': Assume Ctrl+Alt means AltGr.\n   * 'left-alt': Assume left Alt means AltGr.\n   * 'right-alt': Assume right Alt means AltGr.\n   */\n  'alt-gr-mode': null,\n\n  /**\n   * If set, undoes the Chrome OS Alt-Backspace->DEL remap, so that\n   * alt-backspace indeed is alt-backspace.\n   */\n  'alt-backspace-is-meta-backspace': false,\n\n  /**\n   * Set whether the alt key acts as a meta key or as a distinct alt key.\n   */\n  'alt-is-meta': false,\n\n  /**\n   * Controls how the alt key is handled.\n   *\n   *  escape....... Send an ESC prefix.\n   *  8-bit........ Add 128 to the unshifted character as in xterm.\n   *  browser-key.. Wait for the keypress event and see what the browser says.\n   *                (This won't work well on platforms where the browser\n   *                 performs a default action for some alt sequences.)\n   */\n  'alt-sends-what': 'escape',\n\n  /**\n   * Terminal bell sound.  Empty string for no audible bell.\n   */\n  'audible-bell-sound': 'lib-resource:hterm/audio/bell',\n\n  /**\n   * If true, terminal bells in the background will create a Web\n   * Notification. http://www.w3.org/TR/notifications/\n   *\n   * Displaying notifications requires permission from the user. When this\n   * option is set to true, hterm will attempt to ask the user for permission\n   * if necessary. Note browsers may not show this permission request if it\n   * did not originate from a user action.\n   *\n   * Chrome extensions with the \"notfications\" permission have permission to\n   * display notifications.\n   */\n  'desktop-notification-bell': false,\n\n  /**\n   * The background color for text with no other color attributes.\n   */\n  'background-color': 'rgb(16, 16, 16)',\n\n  /**\n   * The background image.\n   */\n  'background-image': '',\n\n  /**\n   * The background image size,\n   *\n   * Defaults to none.\n   */\n  'background-size': '',\n\n  /**\n   * The background image position,\n   *\n   * Defaults to none.\n   */\n  'background-position': '',\n\n  /**\n   * If true, the backspace should send BS ('\\x08', aka ^H).  Otherwise\n   * the backspace key should send '\\x7f'.\n   */\n  'backspace-sends-backspace': false,\n\n  /**\n   * Character map overrides.\n   *\n   * This is specified as an object. It is a sparse array, where each property\n   * is the character set code and the value is an object that is a sparse array\n   * itself. In that sparse array, each property is the received character and\n   * the value is the displayed character.\n   *\n   * For example:\n   *   {\"0\":{\"+\":\"\\u2192\",\",\":\"\\u2190\",\"-\":\"\\u2191\",\".\":\"\\u2193\",\"0\":\"\\u2588\"}}\n   */\n  'character-map-overrides': null,\n\n  /**\n   * Whether or not to close the window when the command exits.\n   */\n  'close-on-exit': true,\n\n  /**\n   * Whether or not to blink the cursor by default.\n   */\n  'cursor-blink': false,\n\n  /**\n   * The cursor blink rate in milliseconds.\n   *\n   * A two element array, the first of which is how long the cursor should be\n   * on, second is how long it should be off.\n   */\n  'cursor-blink-cycle': [1000, 500],\n\n  /**\n   * The color of the visible cursor.\n   */\n  'cursor-color': 'rgba(255, 0, 0, 0.5)',\n\n  /**\n   * Override colors in the default palette.\n   *\n   * This can be specified as an array or an object.  If specified as an\n   * object it is assumed to be a sparse array, where each property\n   * is a numeric index into the color palette.\n   *\n   * Values can be specified as css almost any css color value.  This\n   * includes #RGB, #RRGGBB, rgb(...), rgba(...), and any color names\n   * that are also part of the stock X11 rgb.txt file.\n   *\n   * You can use 'null' to specify that the default value should be not\n   * be changed.  This is useful for skipping a small number of indicies\n   * when the value is specified as an array.\n   */\n  'color-palette-overrides': null,\n\n  /**\n   * Automatically copy mouse selection to the clipboard.\n   */\n  'copy-on-select': true,\n\n  /**\n   * Whether to use the default window copy behaviour.\n   */\n  'use-default-window-copy': false,\n\n  /**\n   * Whether to clear the selection after copying.\n   */\n  'clear-selection-after-copy': true,\n\n  /**\n   * If true, Ctrl-Plus/Minus/Zero controls zoom.\n   * If false, Ctrl-Shift-Plus/Minus/Zero controls zoom, Ctrl-Minus sends ^_,\n   * Ctrl-Plus/Zero do nothing.\n   */\n  'ctrl-plus-minus-zero-zoom': true,\n\n  /**\n   * Ctrl+C copies if true, send ^C to host if false.\n   * Ctrl+Shift+C sends ^C to host if true, copies if false.\n   */\n  'ctrl-c-copy': false,\n\n  /**\n   * Ctrl+V pastes if true, send ^V to host if false.\n   * Ctrl+Shift+V sends ^V to host if true, pastes if false.\n   */\n  'ctrl-v-paste': false,\n\n  /**\n   * Set whether East Asian Ambiguous characters have two column width.\n   */\n  'east-asian-ambiguous-as-two-column': false,\n\n  /**\n   * True to enable 8-bit control characters, false to ignore them.\n   *\n   * We'll respect the two-byte versions of these control characters\n   * regardless of this setting.\n   */\n  'enable-8-bit-control': false,\n\n  /**\n   * True if we should use bold weight font for text with the bold/bright\n   * attribute.  False to use the normal weight font.  Null to autodetect.\n   */\n  'enable-bold': null,\n\n  /**\n   * True if we should use bright colors (8-15 on a 16 color palette)\n   * for any text with the bold attribute.  False otherwise.\n   */\n  'enable-bold-as-bright': true,\n\n  /**\n   * Allow the host to write directly to the system clipboard.\n   */\n  'enable-clipboard-notice': true,\n\n  /**\n   * Allow the host to write directly to the system clipboard.\n   */\n  'enable-clipboard-write': true,\n\n  /**\n   * Respect the host's attempt to change the cursor blink status using\n   * DEC Private Mode 12.\n   */\n  'enable-dec12': false,\n\n  /**\n   * The default environment variables.\n   */\n  'environment': {'TERM': 'xterm-256color'},\n\n  /**\n   * Default font family for the terminal text.\n   */\n  'font-family': ('\"DejaVu Sans Mono\", \"Everson Mono\", ' +\n                  'FreeMono, \"Menlo\", \"Terminal\", ' +\n                  'monospace'),\n\n  /**\n   * The default font size in pixels.\n   */\n  'font-size': 15,\n\n  /**\n   * Anti-aliasing.\n   */\n  'font-smoothing': 'antialiased',\n\n  /**\n   * The foreground color for text with no other color attributes.\n   */\n  'foreground-color': 'rgb(240, 240, 240)',\n\n  /**\n   * If true, home/end will control the terminal scrollbar and shift home/end\n   * will send the VT keycodes.  If false then home/end sends VT codes and\n   * shift home/end scrolls.\n   */\n  'home-keys-scroll': false,\n\n  /**\n   * Max length of a DCS, OSC, PM, or APS sequence before we give up and\n   * ignore the code.\n   */\n  'max-string-sequence': 100000,\n\n  /**\n   * If true, convert media keys to their Fkey equivalent. If false, let\n   * Chrome handle the keys.\n   */\n  'media-keys-are-fkeys': false,\n\n  /**\n   * Set whether the meta key sends a leading escape or not.\n   */\n  'meta-sends-escape': true,\n\n  /**\n   * Mouse paste button, or null to autodetect.\n   *\n   * For autodetect, we'll try to enable middle button paste for non-X11\n   * platforms.\n   *\n   * On X11 we move it to button 3, but that'll probably be a context menu\n   * in the future.\n   */\n  'mouse-paste-button': null,\n\n  /**\n   * If true, page up/down will control the terminal scrollbar and shift\n   * page up/down will send the VT keycodes.  If false then page up/down\n   * sends VT codes and shift page up/down scrolls.\n   */\n  'page-keys-scroll': false,\n\n  /**\n   * Set whether we should pass Alt-1..9 to the browser.\n   *\n   * This is handy when running hterm in a browser tab, so that you don't lose\n   * Chrome's \"switch to tab\" keyboard accelerators.  When not running in a\n   * tab it's better to send these keys to the host so they can be used in\n   * vim or emacs.\n   *\n   * If true, Alt-1..9 will be handled by the browser.  If false, Alt-1..9\n   * will be sent to the host.  If null, autodetect based on browser platform\n   * and window type.\n   */\n  'pass-alt-number': null,\n\n  /**\n   * Set whether we should pass Ctrl-1..9 to the browser.\n   *\n   * This is handy when running hterm in a browser tab, so that you don't lose\n   * Chrome's \"switch to tab\" keyboard accelerators.  When not running in a\n   * tab it's better to send these keys to the host so they can be used in\n   * vim or emacs.\n   *\n   * If true, Ctrl-1..9 will be handled by the browser.  If false, Ctrl-1..9\n   * will be sent to the host.  If null, autodetect based on browser platform\n   * and window type.\n   */\n  'pass-ctrl-number': null,\n\n  /**\n   * Set whether we should pass Meta-1..9 to the browser.\n   *\n   * This is handy when running hterm in a browser tab, so that you don't lose\n   * Chrome's \"switch to tab\" keyboard accelerators.  When not running in a\n   * tab it's better to send these keys to the host so they can be used in\n   * vim or emacs.\n   *\n   * If true, Meta-1..9 will be handled by the browser.  If false, Meta-1..9\n   * will be sent to the host.  If null, autodetect based on browser platform\n   * and window type.\n   */\n  'pass-meta-number': null,\n\n  /**\n   * Set whether meta-V gets passed to host.\n   */\n  'pass-meta-v': true,\n\n  /**\n   * Set the expected encoding for data received from the host.\n   *\n   * Valid values are 'utf-8' and 'raw'.\n   */\n  'receive-encoding': 'utf-8',\n\n  /**\n   * If true, scroll to the bottom on any keystroke.\n   */\n  'scroll-on-keystroke': true,\n\n  /**\n   * If true, scroll to the bottom on terminal output.\n   */\n  'scroll-on-output': false,\n\n  /**\n   * The vertical scrollbar mode.\n   */\n  'scrollbar-visible': true,\n\n  /**\n   * The multiplier for the pixel delta in mousewheel event caused by the scroll\n   * wheel. Alters how fast the page scrolls.\n   */\n  'scroll-wheel-move-multiplier': 1,\n\n  /**\n   * Set the encoding for data sent to host.\n   *\n   * Valid values are 'utf-8' and 'raw'.\n   */\n  'send-encoding': 'utf-8',\n\n  /**\n   * Shift + Insert pastes if true, sent to host if false.\n   */\n  'shift-insert-paste': true,\n\n  /**\n   * User stylesheet to include in the terminal document.\n   */\n  'user-css': ''\n};\n\nhterm.PreferenceManager.prototype = {\n  __proto__: lib.PreferenceManager.prototype\n};\n// SOURCE FILE: hterm/js/hterm_pubsub.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\n/**\n * Utility class used to add publish/subscribe/unsubscribe functionality to\n * an existing object.\n */\nhterm.PubSub = function() {\n  this.observers_ = {};\n};\n\n/**\n * Add publish, subscribe, and unsubscribe methods to an existing object.\n *\n * No other properties of the object are touched, so there is no need to\n * worry about clashing private properties.\n *\n * @param {Object} obj The object to add this behavior to.\n */\nhterm.PubSub.addBehavior = function(obj) {\n  var pubsub = new hterm.PubSub();\n  for (var m in hterm.PubSub.prototype) {\n    obj[m] = hterm.PubSub.prototype[m].bind(pubsub);\n  }\n};\n\n/**\n * Subscribe to be notified of messages about a subject.\n *\n * @param {string} subject The subject to subscribe to.\n * @param {function(Object)} callback The function to invoke for notifications.\n */\nhterm.PubSub.prototype.subscribe = function(subject, callback) {\n  if (!(subject in this.observers_))\n    this.observers_[subject] = [];\n\n  this.observers_[subject].push(callback);\n};\n\n/**\n * Unsubscribe from a subject.\n *\n * @param {string} subject The subject to unsubscribe from.\n * @param {function(Object)} callback A callback previously registered via\n *     subscribe().\n */\nhterm.PubSub.prototype.unsubscribe = function(subject, callback) {\n  var list = this.observers_[subject];\n  if (!list)\n    throw 'Invalid subject: ' + subject;\n\n  var i = list.indexOf(callback);\n  if (i < 0)\n    throw 'Not subscribed: ' + subject;\n\n  list.splice(i, 1);\n};\n\n/**\n * Publish a message about a subject.\n *\n * Subscribers (and the optional final callback) are invoked asynchronously.\n * This method will return before anyone is actually notified.\n *\n * @param {string} subject The subject to publish about.\n * @param {Object} e An arbitrary object associated with this notification.\n * @param {function(Object)} opt_lastCallback An optional function to call after\n *     all subscribers have been notified.\n */\nhterm.PubSub.prototype.publish = function(subject, e, opt_lastCallback) {\n  function notifyList(i) {\n    // Set this timeout before invoking the callback, so we don't have to\n    // concern ourselves with exceptions.\n    if (i < list.length - 1)\n      setTimeout(notifyList, 0, i + 1);\n\n    list[i](e);\n  }\n\n  var list = this.observers_[subject];\n  if (list) {\n    // Copy the list, in case it changes while we're notifying.\n    list = [].concat(list);\n  }\n\n  if (opt_lastCallback) {\n    if (list) {\n      list.push(opt_lastCallback);\n    } else {\n      list = [opt_lastCallback];\n    }\n  }\n\n  if (list)\n    setTimeout(notifyList, 0, 0);\n};\n// SOURCE FILE: hterm/js/hterm_screen.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.f', 'lib.wc',\n          'hterm.RowCol', 'hterm.Size', 'hterm.TextAttributes');\n\n/**\n * @fileoverview This class represents a single terminal screen full of text.\n *\n * It maintains the current cursor position and has basic methods for text\n * insert and overwrite, and adding or removing rows from the screen.\n *\n * This class has no knowledge of the scrollback buffer.\n *\n * The number of rows on the screen is determined only by the number of rows\n * that the caller inserts into the screen.  If a caller wants to ensure a\n * constant number of rows on the screen, it's their responsibility to remove a\n * row for each row inserted.\n *\n * The screen width, in contrast, is enforced locally.\n *\n *\n * In practice...\n * - The hterm.Terminal class holds two hterm.Screen instances.  One for the\n * primary screen and one for the alternate screen.\n *\n * - The html.Screen class only cares that rows are HTMLElements.  In the\n * larger context of hterm, however, the rows happen to be displayed by an\n * hterm.ScrollPort and have to follow a few rules as a result.  Each\n * row must be rooted by the custom HTML tag 'x-row', and each must have a\n * rowIndex property that corresponds to the index of the row in the context\n * of the scrollback buffer.  These invariants are enforced by hterm.Terminal\n * because that is the class using the hterm.Screen in the context of an\n * hterm.ScrollPort.\n */\n\n/**\n * Create a new screen instance.\n *\n * The screen initially has no rows and a maximum column count of 0.\n *\n * @param {integer} opt_columnCount The maximum number of columns for this\n *    screen.  See insertString() and overwriteString() for information about\n *    what happens when too many characters are added too a row.  Defaults to\n *    0 if not provided.\n */\nhterm.Screen = function(opt_columnCount) {\n  /**\n   * Public, read-only access to the rows in this screen.\n   */\n  this.rowsArray = [];\n\n  // The max column width for this screen.\n  this.columnCount_ = opt_columnCount || 80;\n\n  // The current color, bold, underline and blink attributes.\n  this.textAttributes = new hterm.TextAttributes(window.document);\n\n  // Current zero-based cursor coordinates.\n  this.cursorPosition = new hterm.RowCol(0, 0);\n\n  // The node containing the row that the cursor is positioned on.\n  this.cursorRowNode_ = null;\n\n  // The node containing the span of text that the cursor is positioned on.\n  this.cursorNode_ = null;\n\n  // The offset in column width into cursorNode_ where the cursor is positioned.\n  this.cursorOffset_ = null;\n};\n\n/**\n * Return the screen size as an hterm.Size object.\n *\n * @return {hterm.Size} hterm.Size object representing the current number\n *     of rows and columns in this screen.\n */\nhterm.Screen.prototype.getSize = function() {\n  return new hterm.Size(this.columnCount_, this.rowsArray.length);\n};\n\n/**\n * Return the current number of rows in this screen.\n *\n * @return {integer} The number of rows in this screen.\n */\nhterm.Screen.prototype.getHeight = function() {\n  return this.rowsArray.length;\n};\n\n/**\n * Return the current number of columns in this screen.\n *\n * @return {integer} The number of columns in this screen.\n */\nhterm.Screen.prototype.getWidth = function() {\n  return this.columnCount_;\n};\n\n/**\n * Set the maximum number of columns per row.\n *\n * @param {integer} count The maximum number of columns per row.\n */\nhterm.Screen.prototype.setColumnCount = function(count) {\n  this.columnCount_ = count;\n\n  if (this.cursorPosition.column >= count)\n    this.setCursorPosition(this.cursorPosition.row, count - 1);\n};\n\n/**\n * Remove the first row from the screen and return it.\n *\n * @return {HTMLElement} The first row in this screen.\n */\nhterm.Screen.prototype.shiftRow = function() {\n  return this.shiftRows(1)[0];\n};\n\n/**\n * Remove rows from the top of the screen and return them as an array.\n *\n * @param {integer} count The number of rows to remove.\n * @return {Array.<HTMLElement>} The selected rows.\n */\nhterm.Screen.prototype.shiftRows = function(count) {\n  return this.rowsArray.splice(0, count);\n};\n\n/**\n * Insert a row at the top of the screen.\n *\n * @param {HTMLElement} The row to insert.\n */\nhterm.Screen.prototype.unshiftRow = function(row) {\n  this.rowsArray.splice(0, 0, row);\n};\n\n/**\n * Insert rows at the top of the screen.\n *\n * @param {Array.<HTMLElement>} The rows to insert.\n */\nhterm.Screen.prototype.unshiftRows = function(rows) {\n  this.rowsArray.unshift.apply(this.rowsArray, rows);\n};\n\n/**\n * Remove the last row from the screen and return it.\n *\n * @return {HTMLElement} The last row in this screen.\n */\nhterm.Screen.prototype.popRow = function() {\n  return this.popRows(1)[0];\n};\n\n/**\n * Remove rows from the bottom of the screen and return them as an array.\n *\n * @param {integer} count The number of rows to remove.\n * @return {Array.<HTMLElement>} The selected rows.\n */\nhterm.Screen.prototype.popRows = function(count) {\n  return this.rowsArray.splice(this.rowsArray.length - count, count);\n};\n\n/**\n * Insert a row at the bottom of the screen.\n *\n * @param {HTMLElement} The row to insert.\n */\nhterm.Screen.prototype.pushRow = function(row) {\n  this.rowsArray.push(row);\n};\n\n/**\n * Insert rows at the bottom of the screen.\n *\n * @param {Array.<HTMLElement>} The rows to insert.\n */\nhterm.Screen.prototype.pushRows = function(rows) {\n  rows.push.apply(this.rowsArray, rows);\n};\n\n/**\n * Insert a row at the specified column of the screen.\n *\n * @param {HTMLElement} The row to insert.\n */\nhterm.Screen.prototype.insertRow = function(index, row) {\n  this.rowsArray.splice(index, 0, row);\n};\n\n/**\n * Insert rows at the specified column of the screen.\n *\n * @param {Array.<HTMLElement>} The rows to insert.\n */\nhterm.Screen.prototype.insertRows = function(index, rows) {\n  for (var i = 0; i < rows.length; i++) {\n    this.rowsArray.splice(index + i, 0, rows[i]);\n  }\n};\n\n/**\n * Remove a last row from the specified column of the screen and return it.\n *\n * @return {HTMLElement} The selected row.\n */\nhterm.Screen.prototype.removeRow = function(index) {\n  return this.rowsArray.splice(index, 1)[0];\n};\n\n/**\n * Remove rows from the bottom of the screen and return them as an array.\n *\n * @param {integer} count The number of rows to remove.\n * @return {Array.<HTMLElement>} The selected rows.\n */\nhterm.Screen.prototype.removeRows = function(index, count) {\n  return this.rowsArray.splice(index, count);\n};\n\n/**\n * Invalidate the current cursor position.\n *\n * This sets this.cursorPosition to (0, 0) and clears out some internal\n * data.\n *\n * Attempting to insert or overwrite text while the cursor position is invalid\n * will raise an obscure exception.\n */\nhterm.Screen.prototype.invalidateCursorPosition = function() {\n  this.cursorPosition.move(0, 0);\n  this.cursorRowNode_ = null;\n  this.cursorNode_ = null;\n  this.cursorOffset_ = null;\n};\n\n/**\n * Clear the contents of the cursor row.\n */\nhterm.Screen.prototype.clearCursorRow = function() {\n  this.cursorRowNode_.innerHTML = '';\n  this.cursorRowNode_.removeAttribute('line-overflow');\n  this.cursorOffset_ = 0;\n  this.cursorPosition.column = 0;\n  this.cursorPosition.overflow = false;\n\n  var text;\n  if (this.textAttributes.isDefault()) {\n    text = '';\n  } else {\n    text = lib.f.getWhitespace(this.columnCount_);\n  }\n\n  // We shouldn't honour inverse colors when clearing an area, to match\n  // xterm's back color erase behaviour.\n  var inverse = this.textAttributes.inverse;\n  this.textAttributes.inverse = false;\n  this.textAttributes.syncColors();\n\n  var node = this.textAttributes.createContainer(text);\n  this.cursorRowNode_.appendChild(node);\n  this.cursorNode_ = node;\n\n  this.textAttributes.inverse = inverse;\n  this.textAttributes.syncColors();\n};\n\n/**\n * Mark the current row as having overflowed to the next line.\n *\n * The line overflow state is used when converting a range of rows into text.\n * It makes it possible to recombine two or more overflow terminal rows into\n * a single line.\n *\n * This is distinct from the cursor being in the overflow state.  Cursor\n * overflow indicates that printing at the cursor position will commit a\n * line overflow, unless it is preceded by a repositioning of the cursor\n * to a non-overflow state.\n */\nhterm.Screen.prototype.commitLineOverflow = function() {\n  this.cursorRowNode_.setAttribute('line-overflow', true);\n};\n\n/**\n * Relocate the cursor to a give row and column.\n *\n * @param {integer} row The zero based row.\n * @param {integer} column The zero based column.\n */\nhterm.Screen.prototype.setCursorPosition = function(row, column) {\n  if (!this.rowsArray.length) {\n    console.warn('Attempt to set cursor position on empty screen.');\n    return;\n  }\n\n  if (row >= this.rowsArray.length) {\n    console.error('Row out of bounds: ' + row);\n    row = this.rowsArray.length - 1;\n  } else if (row < 0) {\n    console.error('Row out of bounds: ' + row);\n    row = 0;\n  }\n\n  if (column >= this.columnCount_) {\n    console.error('Column out of bounds: ' + column);\n    column = this.columnCount_ - 1;\n  } else if (column < 0) {\n    console.error('Column out of bounds: ' + column);\n    column = 0;\n  }\n\n  this.cursorPosition.overflow = false;\n\n  var rowNode = this.rowsArray[row];\n  var node = rowNode.firstChild;\n\n  if (!node) {\n    node = rowNode.ownerDocument.createTextNode('');\n    rowNode.appendChild(node);\n  }\n\n  var currentColumn = 0;\n\n  if (rowNode == this.cursorRowNode_) {\n    if (column >= this.cursorPosition.column - this.cursorOffset_) {\n      node = this.cursorNode_;\n      currentColumn = this.cursorPosition.column - this.cursorOffset_;\n    }\n  } else {\n    this.cursorRowNode_ = rowNode;\n  }\n\n  this.cursorPosition.move(row, column);\n\n  while (node) {\n    var offset = column - currentColumn;\n    var width = hterm.TextAttributes.nodeWidth(node);\n    if (!node.nextSibling || width > offset) {\n      this.cursorNode_ = node;\n      this.cursorOffset_ = offset;\n      return;\n    }\n\n    currentColumn += width;\n    node = node.nextSibling;\n  }\n};\n\n/**\n * Set the provided selection object to be a caret selection at the current\n * cursor position.\n */\nhterm.Screen.prototype.syncSelectionCaret = function(selection) {\n  try {\n    selection.collapse(this.cursorNode_, this.cursorOffset_);\n  } catch (firefoxIgnoredException) {\n    // FF can throw an exception if the range is off, rather than just not\n    // performing the collapse.\n  }\n};\n\n/**\n * Split a single node into two nodes at the given offset.\n *\n * For example:\n * Given the DOM fragment '<div><span>Hello World</span></div>', call splitNode_\n * passing the span and an offset of 6.  This would modifiy the fragment to\n * become: '<div><span>Hello </span><span>World</span></div>'.  If the span\n * had any attributes they would have been copied to the new span as well.\n *\n * The to-be-split node must have a container, so that the new node can be\n * placed next to it.\n *\n * @param {HTMLNode} node The node to split.\n * @param {integer} offset The offset into the node where the split should\n *     occur.\n */\nhterm.Screen.prototype.splitNode_ = function(node, offset) {\n  var afterNode = node.cloneNode(false);\n\n  var textContent = node.textContent;\n  node.textContent = hterm.TextAttributes.nodeSubstr(node, 0, offset);\n  afterNode.textContent = lib.wc.substr(textContent, offset);\n\n  if (afterNode.textContent)\n    node.parentNode.insertBefore(afterNode, node.nextSibling);\n  if (!node.textContent)\n    node.parentNode.removeChild(node);\n};\n\n/**\n * Ensure that text is clipped and the cursor is clamped to the column count.\n */\nhterm.Screen.prototype.maybeClipCurrentRow = function() {\n  var width = hterm.TextAttributes.nodeWidth(this.cursorRowNode_);\n\n  if (width <= this.columnCount_) {\n    // Current row does not need clipping, but may need clamping.\n    if (this.cursorPosition.column >= this.columnCount_) {\n      this.setCursorPosition(this.cursorPosition.row, this.columnCount_ - 1);\n      this.cursorPosition.overflow = true;\n    }\n\n    return;\n  }\n\n  // Save off the current column so we can maybe restore it later.\n  var currentColumn = this.cursorPosition.column;\n\n  // Move the cursor to the final column.\n  this.setCursorPosition(this.cursorPosition.row, this.columnCount_ - 1);\n\n  // Remove any text that partially overflows.\n  width = hterm.TextAttributes.nodeWidth(this.cursorNode_);\n\n  if (this.cursorOffset_ < width - 1) {\n    this.cursorNode_.textContent = hterm.TextAttributes.nodeSubstr(\n        this.cursorNode_, 0, this.cursorOffset_ + 1);\n  }\n\n  // Remove all nodes after the cursor.\n  var rowNode = this.cursorRowNode_;\n  var node = this.cursorNode_.nextSibling;\n\n  while (node) {\n    rowNode.removeChild(node);\n    node = this.cursorNode_.nextSibling;\n  }\n\n  if (currentColumn < this.columnCount_) {\n    // If the cursor was within the screen before we started then restore its\n    // position.\n    this.setCursorPosition(this.cursorPosition.row, currentColumn);\n  } else {\n    // Otherwise leave it at the the last column in the overflow state.\n    this.cursorPosition.overflow = true;\n  }\n};\n\n/**\n * Insert a string at the current character position using the current\n * text attributes.\n *\n * You must call maybeClipCurrentRow() after in order to clip overflowed\n * text and clamp the cursor.\n *\n * It is also up to the caller to properly maintain the line overflow state\n * using hterm.Screen..commitLineOverflow().\n */\nhterm.Screen.prototype.insertString = function(str) {\n  var cursorNode = this.cursorNode_;\n  var cursorNodeText = cursorNode.textContent;\n\n  this.cursorRowNode_.removeAttribute('line-overflow');\n\n  // We may alter the width of the string by prepending some missing\n  // whitespaces, so we need to record the string width ahead of time.\n  var strWidth = lib.wc.strWidth(str);\n\n  // No matter what, before this function exits the cursor column will have\n  // moved this much.\n  this.cursorPosition.column += strWidth;\n\n  // Local cache of the cursor offset.\n  var offset = this.cursorOffset_;\n\n  // Reverse offset is the offset measured from the end of the string.\n  // Zero implies that the cursor is at the end of the cursor node.\n  var reverseOffset = hterm.TextAttributes.nodeWidth(cursorNode) - offset;\n\n  if (reverseOffset < 0) {\n    // A negative reverse offset means the cursor is positioned past the end\n    // of the characters on this line.  We'll need to insert the missing\n    // whitespace.\n    var ws = lib.f.getWhitespace(-reverseOffset);\n\n    // This whitespace should be completely unstyled.  Underline, background\n    // color, and strikethrough would be visible on whitespace, so we can't use\n    // one of those spans to hold the text.\n    if (!(this.textAttributes.underline ||\n          this.textAttributes.strikethrough ||\n          this.textAttributes.background ||\n          this.textAttributes.wcNode ||\n          this.textAttributes.tileData != null)) {\n      // Best case scenario, we can just pretend the spaces were part of the\n      // original string.\n      str = ws + str;\n    } else if (cursorNode.nodeType == 3 ||\n               !(cursorNode.wcNode ||\n                 cursorNode.tileNode ||\n                 cursorNode.style.textDecoration ||\n                 cursorNode.style.backgroundColor)) {\n      // Second best case, the current node is able to hold the whitespace.\n      cursorNode.textContent = (cursorNodeText += ws);\n    } else {\n      // Worst case, we have to create a new node to hold the whitespace.\n      var wsNode = cursorNode.ownerDocument.createTextNode(ws);\n      this.cursorRowNode_.insertBefore(wsNode, cursorNode.nextSibling);\n      this.cursorNode_ = cursorNode = wsNode;\n      this.cursorOffset_ = offset = -reverseOffset;\n      cursorNodeText = ws;\n    }\n\n    // We now know for sure that we're at the last character of the cursor node.\n    reverseOffset = 0;\n  }\n\n  if (this.textAttributes.matchesContainer(cursorNode)) {\n    // The new text can be placed directly in the cursor node.\n    if (reverseOffset == 0) {\n      cursorNode.textContent = cursorNodeText + str;\n    } else if (offset == 0) {\n      cursorNode.textContent = str + cursorNodeText;\n    } else {\n      cursorNode.textContent =\n          hterm.TextAttributes.nodeSubstr(cursorNode, 0, offset) +\n          str + hterm.TextAttributes.nodeSubstr(cursorNode, offset);\n    }\n\n    this.cursorOffset_ += strWidth;\n    return;\n  }\n\n  // The cursor node is the wrong style for the new text.  If we're at the\n  // beginning or end of the cursor node, then the adjacent node is also a\n  // potential candidate.\n\n  if (offset == 0) {\n    // At the beginning of the cursor node, the check the previous sibling.\n    var previousSibling = cursorNode.previousSibling;\n    if (previousSibling &&\n        this.textAttributes.matchesContainer(previousSibling)) {\n      previousSibling.textContent += str;\n      this.cursorNode_ = previousSibling;\n      this.cursorOffset_ = lib.wc.strWidth(previousSibling.textContent);\n      return;\n    }\n\n    var newNode = this.textAttributes.createContainer(str);\n    this.cursorRowNode_.insertBefore(newNode, cursorNode);\n    this.cursorNode_ = newNode;\n    this.cursorOffset_ = strWidth;\n    return;\n  }\n\n  if (reverseOffset == 0) {\n    // At the end of the cursor node, the check the next sibling.\n    var nextSibling = cursorNode.nextSibling;\n    if (nextSibling &&\n        this.textAttributes.matchesContainer(nextSibling)) {\n      nextSibling.textContent = str + nextSibling.textContent;\n      this.cursorNode_ = nextSibling;\n      this.cursorOffset_ = lib.wc.strWidth(str);\n      return;\n    }\n\n    var newNode = this.textAttributes.createContainer(str);\n    this.cursorRowNode_.insertBefore(newNode, nextSibling);\n    this.cursorNode_ = newNode;\n    // We specifically need to include any missing whitespace here, since it's\n    // going in a new node.\n    this.cursorOffset_ = hterm.TextAttributes.nodeWidth(newNode);\n    return;\n  }\n\n  // Worst case, we're somewhere in the middle of the cursor node.  We'll\n  // have to split it into two nodes and insert our new container in between.\n  this.splitNode_(cursorNode, offset);\n  var newNode = this.textAttributes.createContainer(str);\n  this.cursorRowNode_.insertBefore(newNode, cursorNode.nextSibling);\n  this.cursorNode_ = newNode;\n  this.cursorOffset_ = strWidth;\n};\n\n/**\n * Overwrite the text at the current cursor position.\n *\n * You must call maybeClipCurrentRow() after in order to clip overflowed\n * text and clamp the cursor.\n *\n * It is also up to the caller to properly maintain the line overflow state\n * using hterm.Screen..commitLineOverflow().\n */\nhterm.Screen.prototype.overwriteString = function(str) {\n  var maxLength = this.columnCount_ - this.cursorPosition.column;\n  if (!maxLength)\n    return [str];\n\n  var width = lib.wc.strWidth(str);\n  if (this.textAttributes.matchesContainer(this.cursorNode_) &&\n      this.cursorNode_.textContent.substr(this.cursorOffset_) == str) {\n    // This overwrite would be a no-op, just move the cursor and return.\n    this.cursorOffset_ += width;\n    this.cursorPosition.column += width;\n    return;\n  }\n\n  this.deleteChars(Math.min(width, maxLength));\n  this.insertString(str);\n};\n\n/**\n * Forward-delete one or more characters at the current cursor position.\n *\n * Text to the right of the deleted characters is shifted left.  Only affects\n * characters on the same row as the cursor.\n *\n * @param {integer} count The column width of characters to delete.  This is\n *     clamped to the column width minus the cursor column.\n * @return {integer} The column width of the characters actually deleted.\n */\nhterm.Screen.prototype.deleteChars = function(count) {\n  var node = this.cursorNode_;\n  var offset = this.cursorOffset_;\n\n  var currentCursorColumn = this.cursorPosition.column;\n  count = Math.min(count, this.columnCount_ - currentCursorColumn);\n  if (!count)\n    return 0;\n\n  var rv = count;\n  var startLength, endLength;\n\n  while (node && count) {\n    startLength = hterm.TextAttributes.nodeWidth(node);\n    node.textContent = hterm.TextAttributes.nodeSubstr(node, 0, offset) +\n        hterm.TextAttributes.nodeSubstr(node, offset + count);\n    endLength = hterm.TextAttributes.nodeWidth(node);\n    count -= startLength - endLength;\n    if (offset < startLength && endLength && startLength == endLength) {\n      // No characters were deleted when there should be.  We're probably trying\n      // to delete one column width from a wide character node.  We remove the\n      // wide character node here and replace it with a single space.\n      var spaceNode = this.textAttributes.createContainer(' ');\n      node.parentNode.insertBefore(spaceNode, node.nextSibling);\n      node.textContent = '';\n      endLength = 0;\n      count -= 1;\n    }\n\n    var nextNode = node.nextSibling;\n    if (endLength == 0 && node != this.cursorNode_) {\n      node.parentNode.removeChild(node);\n    }\n    node = nextNode;\n    offset = 0;\n  }\n\n  // Remove this.cursorNode_ if it is an empty non-text node.\n  if (this.cursorNode_.nodeType != 3 && !this.cursorNode_.textContent) {\n    var cursorNode = this.cursorNode_;\n    if (cursorNode.previousSibling) {\n      this.cursorNode_ = cursorNode.previousSibling;\n      this.cursorOffset_ = hterm.TextAttributes.nodeWidth(\n          cursorNode.previousSibling);\n    } else if (cursorNode.nextSibling) {\n      this.cursorNode_ = cursorNode.nextSibling;\n      this.cursorOffset_ = 0;\n    } else {\n      var emptyNode = this.cursorRowNode_.ownerDocument.createTextNode('');\n      this.cursorRowNode_.appendChild(emptyNode);\n      this.cursorNode_ = emptyNode;\n      this.cursorOffset_ = 0;\n    }\n    this.cursorRowNode_.removeChild(cursorNode);\n  }\n\n  return rv;\n};\n\n/**\n * Finds first X-ROW of a line containing specified X-ROW.\n * Used to support line overflow.\n *\n * @param {Node} row X-ROW to begin search for first row of line.\n * @return {Node} The X-ROW that is at the beginning of the line.\n **/\nhterm.Screen.prototype.getLineStartRow_ = function(row) {\n  while (row.previousSibling &&\n         row.previousSibling.hasAttribute('line-overflow')) {\n    row = row.previousSibling;\n  }\n  return row;\n};\n\n/**\n * Gets text of a line beginning with row.\n * Supports line overflow.\n *\n * @param {Node} row First X-ROW of line.\n * @return {string} Text content of line.\n **/\nhterm.Screen.prototype.getLineText_ = function(row) {\n  var rowText = \"\";\n  while (row) {\n    rowText += row.textContent;\n    if (row.hasAttribute('line-overflow')) {\n      row = row.nextSibling;\n    } else {\n      break;\n    }\n  }\n  return rowText;\n};\n\n/**\n * Returns X-ROW that is ancestor of the node.\n *\n * @param {Node} node Node to get X-ROW ancestor for.\n * @return {Node} X-ROW ancestor of node, or null if not found.\n **/\nhterm.Screen.prototype.getXRowAncestor_ = function(node) {\n  while (node) {\n    if (node.nodeName === 'X-ROW')\n      break;\n    node = node.parentNode;\n  }\n  return node;\n};\n\n/**\n * Returns position within line of character at offset within node.\n * Supports line overflow.\n *\n * @param {Node} row X-ROW at beginning of line.\n * @param {Node} node Node to get position of.\n * @param {integer} offset Offset into node.\n *\n * @return {integer} Position within line of character at offset within node.\n **/\nhterm.Screen.prototype.getPositionWithOverflow_ = function(row, node, offset) {\n  if (!node)\n    return -1;\n  var ancestorRow = this.getXRowAncestor_(node);\n  if (!ancestorRow)\n    return -1;\n  var position = 0;\n  while (ancestorRow != row) {\n    position += hterm.TextAttributes.nodeWidth(row);\n    if (row.hasAttribute('line-overflow') && row.nextSibling) {\n      row = row.nextSibling;\n    } else {\n      return -1;\n    }\n  }\n  return position + this.getPositionWithinRow_(row, node, offset);\n};\n\n/**\n * Returns position within row of character at offset within node.\n * Does not support line overflow.\n *\n * @param {Node} row X-ROW to get position within.\n * @param {Node} node Node to get position for.\n * @param {integer} offset Offset within node to get position for.\n * @return {integer} Position within row of character at offset within node.\n **/\nhterm.Screen.prototype.getPositionWithinRow_ = function(row, node, offset) {\n  if (node.parentNode != row) {\n    return this.getPositionWithinRow_(node.parentNode, node, offset) +\n           this.getPositionWithinRow_(row, node.parentNode, 0);\n  }\n  var position = 0;\n  for (var i = 0; i < row.childNodes.length; i++) {\n    var currentNode = row.childNodes[i];\n    if (currentNode == node)\n      return position + offset;\n    position += hterm.TextAttributes.nodeWidth(currentNode);\n  }\n  return -1;\n};\n\n/**\n * Returns the node and offset corresponding to position within line.\n * Supports line overflow.\n *\n * @param {Node} row X-ROW at beginning of line.\n * @param {integer} position Position within line to retrieve node and offset.\n * @return {Array} Two element array containing node and offset respectively.\n **/\nhterm.Screen.prototype.getNodeAndOffsetWithOverflow_ = function(row, position) {\n  while (row && position > hterm.TextAttributes.nodeWidth(row)) {\n    if (row.hasAttribute('line-overflow') && row.nextSibling) {\n      position -= hterm.TextAttributes.nodeWidth(row);\n      row = row.nextSibling;\n    } else {\n      return -1;\n    }\n  }\n  return this.getNodeAndOffsetWithinRow_(row, position);\n};\n\n/**\n * Returns the node and offset corresponding to position within row.\n * Does not support line overflow.\n *\n * @param {Node} row X-ROW to get position within.\n * @param {integer} position Position within row to retrieve node and offset.\n * @return {Array} Two element array containing node and offset respectively.\n **/\nhterm.Screen.prototype.getNodeAndOffsetWithinRow_ = function(row, position) {\n  for (var i = 0; i < row.childNodes.length; i++) {\n    var node = row.childNodes[i];\n    var nodeTextWidth = hterm.TextAttributes.nodeWidth(node);\n    if (position <= nodeTextWidth) {\n      if (node.nodeName === 'SPAN') {\n        /** Drill down to node contained by SPAN. **/\n        return this.getNodeAndOffsetWithinRow_(node, position);\n      } else {\n        return [node, position];\n      }\n    }\n    position -= nodeTextWidth;\n  }\n  return null;\n};\n\n/**\n * Returns the node and offset corresponding to position within line.\n * Supports line overflow.\n *\n * @param {Node} row X-ROW at beginning of line.\n * @param {integer} start Start position of range within line.\n * @param {integer} end End position of range within line.\n * @param {Range} range Range to modify.\n **/\nhterm.Screen.prototype.setRange_ = function(row, start, end, range) {\n  var startNodeAndOffset = this.getNodeAndOffsetWithOverflow_(row, start);\n  if (startNodeAndOffset == null)\n    return;\n  var endNodeAndOffset = this.getNodeAndOffsetWithOverflow_(row, end);\n  if (endNodeAndOffset == null)\n    return;\n  range.setStart(startNodeAndOffset[0], startNodeAndOffset[1]);\n  range.setEnd(endNodeAndOffset[0], endNodeAndOffset[1]);\n};\n\n/**\n * Expands selection to surround URLs.\n *\n * @param {Selection} selection Selection to expand.\n **/\nhterm.Screen.prototype.expandSelection = function(selection) {\n  if (!selection)\n    return;\n\n  var range = selection.getRangeAt(0);\n  if (!range || range.toString().match(/\\s/))\n    return;\n\n  var row = this.getLineStartRow_(this.getXRowAncestor_(range.startContainer));\n  if (!row)\n    return;\n\n  var startPosition = this.getPositionWithOverflow_(row,\n                                                    range.startContainer,\n                                                    range.startOffset);\n  if (startPosition == -1)\n    return;\n  var endPosition = this.getPositionWithOverflow_(row,\n                                                  range.endContainer,\n                                                  range.endOffset);\n  if (endPosition == -1)\n    return;\n\n  // Matches can start with '~' or '.', since paths frequently do.\n  var leftMatch   = '[^\\\\s\\\\[\\\\](){}<>\"\\'\\\\^!@#$%&*,;:`]';\n  var rightMatch  = '[^\\\\s\\\\[\\\\](){}<>\"\\'\\\\^!@#$%&*,;:~.`]';\n  var insideMatch = '[^\\\\s\\\\[\\\\](){}<>\"\\'\\\\^]*';\n\n  //Move start to the left.\n  var rowText = this.getLineText_(row);\n  var lineUpToRange = lib.wc.substring(rowText, 0, endPosition);\n  var leftRegularExpression = new RegExp(leftMatch + insideMatch + \"$\");\n  var expandedStart = lineUpToRange.search(leftRegularExpression);\n  if (expandedStart == -1 || expandedStart > startPosition)\n    return;\n\n  //Move end to the right.\n  var lineFromRange = lib.wc.substring(rowText, startPosition,\n                                       lib.wc.strWidth(rowText));\n  var rightRegularExpression = new RegExp(\"^\" + insideMatch + rightMatch);\n  var found = lineFromRange.match(rightRegularExpression);\n  if (!found)\n    return;\n  var expandedEnd = startPosition + lib.wc.strWidth(found[0]);\n  if (expandedEnd == -1 || expandedEnd < endPosition)\n    return;\n\n  this.setRange_(row, expandedStart, expandedEnd, range);\n  selection.addRange(range);\n};\n// SOURCE FILE: hterm/js/hterm_scrollport.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.f', 'hterm.PubSub', 'hterm.Size');\n\n/**\n * A 'viewport' view of fixed-height rows with support for selection and\n * copy-to-clipboard.\n *\n * 'Viewport' in this case means that only the visible rows are in the DOM.\n * If the rowProvider has 100,000 rows, but the ScrollPort is only 25 rows\n * tall, then only 25 dom nodes are created.  The ScrollPort will ask the\n * RowProvider to create new visible rows on demand as they are scrolled in\n * to the visible area.\n *\n * This viewport is designed so that select and copy-to-clipboard still works,\n * even when all or part of the selection is scrolled off screen.\n *\n * Note that the X11 mouse clipboard does not work properly when all or part\n * of the selection is off screen.  It would be difficult to fix this without\n * adding significant overhead to pathologically large selection cases.\n *\n * The RowProvider should return rows rooted by the custom tag name 'x-row'.\n * This ensures that we can quickly assign the correct display height\n * to the rows with css.\n *\n * @param {RowProvider} rowProvider An object capable of providing rows as\n *     raw text or row nodes.\n */\nhterm.ScrollPort = function(rowProvider) {\n  hterm.PubSub.addBehavior(this);\n\n  this.rowProvider_ = rowProvider;\n\n  // SWAG the character size until we can measure it.\n  this.characterSize = new hterm.Size(10, 10);\n\n  // DOM node used for character measurement.\n  this.ruler_ = null;\n\n  this.selection = new hterm.ScrollPort.Selection(this);\n\n  // A map of rowIndex => rowNode for each row that is drawn as part of a\n  // pending redraw_() call.  Null if there is no pending redraw_ call.\n  this.currentRowNodeCache_ = null;\n\n  // A map of rowIndex => rowNode for each row that was drawn as part of the\n  // previous redraw_() call.\n  this.previousRowNodeCache_ = {};\n\n  // Used during scroll events to detect when the underlying cause is a resize.\n  this.lastScreenWidth_ = null;\n  this.lastScreenHeight_ = null;\n\n  // True if the user should be allowed to select text in the terminal.\n  // This is disabled when the host requests mouse drag events so that we don't\n  // end up with two notions of selection.\n  this.selectionEnabled_ = true;\n\n  // The last row count returned by the row provider, re-populated during\n  // syncScrollHeight().\n  this.lastRowCount_ = 0;\n\n  // The scroll wheel pixel delta multiplier to increase/descrease\n  // the scroll speed of mouse wheel events. See: http://goo.gl/sXelnq\n  this.scrollWheelMultiplier_ = 1;\n\n  /**\n   * True if the last scroll caused the scrollport to show the final row.\n   */\n  this.isScrolledEnd = true;\n\n  // The css rule that we use to control the height of a row.\n  this.xrowCssRule_ = null;\n\n  /**\n   * A guess at the current scrollbar width, fixed in resize().\n   */\n  this.currentScrollbarWidthPx = 16;\n\n  /**\n   * Whether the ctrl-v key on the screen should paste.\n   */\n  this.ctrlVPaste = false;\n\n  this.div_ = null;\n  this.document_ = null;\n\n  // Collection of active timeout handles.\n  this.timeouts_ = {};\n\n  this.observers_ = {};\n\n  this.DEBUG_ = false;\n}\n\n/**\n * Proxy for the native selection object which understands how to walk up the\n * DOM to find the containing row node and sort out which comes first.\n *\n * @param {hterm.ScrollPort} scrollPort The parent hterm.ScrollPort instance.\n */\nhterm.ScrollPort.Selection = function(scrollPort) {\n  this.scrollPort_ = scrollPort;\n\n  /**\n   * The row containing the start of the selection.\n   *\n   * This may be partially or fully selected.  It may be the selection anchor\n   * or the focus, but its rowIndex is guaranteed to be less-than-or-equal-to\n   * that of the endRow.\n   *\n   * If only one row is selected then startRow == endRow.  If there is no\n   * selection or the selection is collapsed then startRow == null.\n   */\n  this.startRow = null;\n\n  /**\n   * The row containing the end of the selection.\n   *\n   * This may be partially or fully selected.  It may be the selection anchor\n   * or the focus, but its rowIndex is guaranteed to be greater-than-or-equal-to\n   * that of the startRow.\n   *\n   * If only one row is selected then startRow == endRow.  If there is no\n   * selection or the selection is collapsed then startRow == null.\n   */\n  this.endRow = null;\n\n  /**\n   * True if startRow != endRow.\n   */\n  this.isMultiline = null;\n\n  /**\n   * True if the selection is just a point rather than a range.\n   */\n  this.isCollapsed = null;\n};\n\n/**\n * Given a list of DOM nodes and a container, return the DOM node that\n * is first according to a depth-first search.\n *\n * Returns null if none of the children are found.\n */\nhterm.ScrollPort.Selection.prototype.findFirstChild = function(\n    parent, childAry) {\n  var node = parent.firstChild;\n\n  while (node) {\n    if (childAry.indexOf(node) != -1)\n      return node;\n\n    if (node.childNodes.length) {\n      var rv = this.findFirstChild(node, childAry);\n      if (rv)\n        return rv;\n    }\n\n    node = node.nextSibling;\n  }\n\n  return null;\n};\n\n/**\n * Synchronize this object with the current DOM selection.\n *\n * This is a one-way synchronization, the DOM selection is copied to this\n * object, not the other way around.\n */\nhterm.ScrollPort.Selection.prototype.sync = function() {\n  var self = this;\n\n  // The dom selection object has no way to tell which nodes come first in\n  // the document, so we have to figure that out.\n  //\n  // This function is used when we detect that the \"anchor\" node is first.\n  function anchorFirst() {\n    self.startRow = anchorRow;\n    self.startNode = selection.anchorNode;\n    self.startOffset = selection.anchorOffset;\n    self.endRow = focusRow;\n    self.endNode = selection.focusNode;\n    self.endOffset = selection.focusOffset;\n  }\n\n  // This function is used when we detect that the \"focus\" node is first.\n  function focusFirst() {\n    self.startRow = focusRow;\n    self.startNode = selection.focusNode;\n    self.startOffset = selection.focusOffset;\n    self.endRow = anchorRow;\n    self.endNode = selection.anchorNode;\n    self.endOffset = selection.anchorOffset;\n  }\n\n  var selection = this.scrollPort_.getDocument().getSelection();\n\n  this.startRow = null;\n  this.endRow = null;\n  this.isMultiline = null;\n  this.isCollapsed = !selection || selection.isCollapsed;\n\n  if (this.isCollapsed)\n    return;\n\n  var anchorRow = selection.anchorNode;\n  while (anchorRow && !('rowIndex' in anchorRow)) {\n    anchorRow = anchorRow.parentNode;\n  }\n\n  if (!anchorRow) {\n    console.error('Selection anchor is not rooted in a row node: ' +\n                  selection.anchorNode.nodeName);\n    return;\n  }\n\n  var focusRow = selection.focusNode;\n  while (focusRow && !('rowIndex' in focusRow)) {\n    focusRow = focusRow.parentNode;\n  }\n\n  if (!focusRow) {\n    console.error('Selection focus is not rooted in a row node: ' +\n                  selection.focusNode.nodeName);\n    return;\n  }\n\n  if (anchorRow.rowIndex < focusRow.rowIndex) {\n    anchorFirst();\n\n  } else if (anchorRow.rowIndex > focusRow.rowIndex) {\n    focusFirst();\n\n  } else if (selection.focusNode == selection.anchorNode) {\n    if (selection.anchorOffset < selection.focusOffset) {\n      anchorFirst();\n    } else {\n      focusFirst();\n    }\n\n  } else {\n    // The selection starts and ends in the same row, but isn't contained all\n    // in a single node.\n    var firstNode = this.findFirstChild(\n        anchorRow, [selection.anchorNode, selection.focusNode]);\n\n    if (!firstNode)\n      throw new Error('Unexpected error syncing selection.');\n\n    if (firstNode == selection.anchorNode) {\n      anchorFirst();\n    } else {\n      focusFirst();\n    }\n  }\n\n  this.isMultiline = anchorRow.rowIndex != focusRow.rowIndex;\n};\n\n\n/**\n * Turn a div into this hterm.ScrollPort.\n */\nhterm.ScrollPort.prototype.decorate = function(div) {\n  this.div_ = div;\n\n  this.iframe_ = div.ownerDocument.createElement('iframe');\n  this.iframe_.style.cssText = (\n      'border: 0;' +\n      'height: 100%;' +\n      'position: absolute;' +\n      'width: 100%');\n\n  // Set the iframe src to # in FF.  Otherwise when the frame's\n  // load event fires in FF it clears out the content of the iframe.\n  if ('mozInnerScreenX' in window)  // detect a FF only property\n    this.iframe_.src = '#';\n\n  div.appendChild(this.iframe_);\n\n  this.iframe_.contentWindow.addEventListener('resize',\n                                              this.onResize_.bind(this));\n\n  var doc = this.document_ = this.iframe_.contentDocument;\n  doc.body.style.cssText = (\n      'margin: 0px;' +\n      'padding: 0px;' +\n      'height: 100%;' +\n      'width: 100%;' +\n      'overflow: hidden;' +\n      '-webkit-user-select: none;' +\n      '-moz-user-select: none;');\n\n  var style = doc.createElement('style');\n  style.textContent = 'x-row {}';\n  doc.head.appendChild(style);\n\n  this.xrowCssRule_ = doc.styleSheets[0].cssRules[0];\n  this.xrowCssRule_.style.display = 'block';\n\n  this.userCssLink_ = doc.createElement('link');\n  this.userCssLink_.setAttribute('rel', 'stylesheet');\n\n  // TODO(rginda): Sorry, this 'screen_' isn't the same thing as hterm.Screen\n  // from screen.js.  I need to pick a better name for one of them to avoid\n  // the collision.\n  this.screen_ = doc.createElement('x-screen');\n  this.screen_.setAttribute('role', 'textbox');\n  this.screen_.setAttribute('tabindex', '-1');\n  this.screen_.style.cssText = (\n      'display: block;' +\n      'font-family: monospace;' +\n      'font-size: 15px;' +\n      'height: 100%;' +\n      'overflow-y: scroll; overflow-x: hidden;' +\n      'white-space: pre;' +\n      'width: 100%;' +\n      'outline: none !important');\n\n  doc.body.appendChild(this.screen_);\n\n  this.screen_.addEventListener('scroll', this.onScroll_.bind(this));\n  this.screen_.addEventListener('mousewheel', this.onScrollWheel_.bind(this));\n  this.screen_.addEventListener(\n      'DOMMouseScroll', this.onScrollWheel_.bind(this));\n  this.screen_.addEventListener('copy', this.onCopy_.bind(this));\n  this.screen_.addEventListener('paste', this.onPaste_.bind(this));\n\n  doc.body.addEventListener('keydown', this.onBodyKeyDown_.bind(this));\n\n  // This is the main container for the fixed rows.\n  this.rowNodes_ = doc.createElement('div');\n  this.rowNodes_.style.cssText = (\n      'display: block;' +\n      'position: fixed;' +\n      'overflow: hidden;' +\n      '-webkit-user-select: text;' +\n      '-moz-user-select: text;');\n  this.screen_.appendChild(this.rowNodes_);\n\n  // Two nodes to hold offscreen text during the copy event.\n  this.topSelectBag_ = doc.createElement('x-select-bag');\n  this.topSelectBag_.style.cssText = (\n      'display: block;' +\n      'overflow: hidden;' +\n      'white-space: pre;');\n\n  this.bottomSelectBag_ = this.topSelectBag_.cloneNode();\n\n  // Nodes above the top fold and below the bottom fold are hidden.  They are\n  // only used to hold rows that are part of the selection but are currently\n  // scrolled off the top or bottom of the visible range.\n  this.topFold_ = doc.createElement('x-fold');\n  this.topFold_.style.cssText = 'display: block;';\n  this.rowNodes_.appendChild(this.topFold_);\n\n  this.bottomFold_ = this.topFold_.cloneNode();\n  this.rowNodes_.appendChild(this.bottomFold_);\n\n  // This hidden div accounts for the vertical space that would be consumed by\n  // all the rows in the buffer if they were visible.  It's what causes the\n  // scrollbar to appear on the 'x-screen', and it moves within the screen when\n  // the scrollbar is moved.\n  //\n  // It is set 'visibility: hidden' to keep the browser from trying to include\n  // it in the selection when a user 'drag selects' upwards (drag the mouse to\n  // select and scroll at the same time).  Without this, the selection gets\n  // out of whack.\n  this.scrollArea_ = doc.createElement('div');\n  this.scrollArea_.style.cssText = 'visibility: hidden';\n  this.screen_.appendChild(this.scrollArea_);\n\n  // This svg element is used to detect when the browser is zoomed.  It must be\n  // placed in the outermost document for currentScale to be correct.\n  // TODO(rginda): This means that hterm nested in an iframe will not correctly\n  // detect browser zoom level.  We should come up with a better solution.\n  this.svg_ = this.div_.ownerDocument.createElementNS(\n      'http://www.w3.org/2000/svg', 'svg');\n  this.svg_.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  this.svg_.setAttribute('version', '1.1');\n  this.svg_.style.cssText = (\n      'position: absolute;' +\n      'top: 0;' +\n      'left: 0;' +\n      'visibility: hidden');\n\n\n  // We send focus to this element just before a paste happens, so we can\n  // capture the pasted text and forward it on to someone who cares.\n  this.pasteTarget_ = doc.createElement('textarea');\n  this.pasteTarget_.setAttribute('tabindex', '-1');\n  this.pasteTarget_.style.cssText = (\n    'position: absolute;' +\n    'height: 1px;' +\n    'width: 1px;' +\n    'left: 0px; ' +\n    'bottom: 0px;' +\n    'opacity: 0');\n  this.pasteTarget_.contentEditable = true;\n\n  this.screen_.appendChild(this.pasteTarget_);\n  this.pasteTarget_.addEventListener(\n      'textInput', this.handlePasteTargetTextInput_.bind(this));\n\n  this.resize();\n};\n\n/**\n * Select the font-family and font-smoothing for this scrollport.\n *\n * @param {string} fontFamily Value of the CSS 'font-family' to use for this\n *     scrollport.  Should be a monospace font.\n * @param {string} opt_smoothing Optional value for '-webkit-font-smoothing'.\n *     Defaults to an empty string if not specified.\n */\nhterm.ScrollPort.prototype.setFontFamily = function(fontFamily, opt_smoothing) {\n  this.screen_.style.fontFamily = fontFamily;\n  if (opt_smoothing) {\n    this.screen_.style.webkitFontSmoothing = opt_smoothing;\n  } else {\n    this.screen_.style.webkitFontSmoothing = '';\n  }\n\n  this.syncCharacterSize();\n};\n\nhterm.ScrollPort.prototype.getFontFamily = function() {\n  return this.screen_.style.fontFamily;\n};\n\n/**\n * Set a custom stylesheet to include in the scrollport.\n *\n * Defaults to null, meaning no custom css is loaded.  Set it back to null or\n * the empty string to remove a previously applied custom css.\n */\nhterm.ScrollPort.prototype.setUserCss = function(url) {\n  if (url) {\n    this.userCssLink_.setAttribute('href', url);\n\n    if (!this.userCssLink_.parentNode)\n      this.document_.head.appendChild(this.userCssLink_);\n  } else if (this.userCssLink_.parentNode) {\n    this.document_.head.removeChild(this.userCssLink_);\n  }\n};\n\nhterm.ScrollPort.prototype.focus = function() {\n  this.iframe_.focus();\n  this.screen_.focus();\n};\n\nhterm.ScrollPort.prototype.getForegroundColor = function() {\n  return this.screen_.style.color;\n};\n\nhterm.ScrollPort.prototype.setForegroundColor = function(color) {\n  this.screen_.style.color = color;\n};\n\nhterm.ScrollPort.prototype.getBackgroundColor = function() {\n  return this.screen_.style.backgroundColor;\n};\n\nhterm.ScrollPort.prototype.setBackgroundColor = function(color) {\n  this.screen_.style.backgroundColor = color;\n};\n\nhterm.ScrollPort.prototype.setBackgroundImage = function(image) {\n  this.screen_.style.backgroundImage = image;\n};\n\nhterm.ScrollPort.prototype.setBackgroundSize = function(size) {\n  this.screen_.style.backgroundSize = size;\n};\n\nhterm.ScrollPort.prototype.setBackgroundPosition = function(position) {\n  this.screen_.style.backgroundPosition = position;\n};\n\nhterm.ScrollPort.prototype.setCtrlVPaste = function(ctrlVPaste) {\n  this.ctrlVPaste = ctrlVPaste;\n};\n\n/**\n * Get the usable size of the scrollport screen.\n *\n * The width will not include the scrollbar width.\n */\nhterm.ScrollPort.prototype.getScreenSize = function() {\n  var size = hterm.getClientSize(this.screen_);\n  return {\n    height: size.height,\n    width: size.width - this.currentScrollbarWidthPx\n  };\n};\n\n/**\n * Get the usable width of the scrollport screen.\n *\n * This the widget width minus scrollbar width.\n */\nhterm.ScrollPort.prototype.getScreenWidth = function() {\n  return this.getScreenSize().width ;\n};\n\n/**\n * Get the usable height of the scrollport screen.\n */\nhterm.ScrollPort.prototype.getScreenHeight = function() {\n  return this.getScreenSize().height;\n};\n\n/**\n * Return the document that holds the visible rows of this hterm.ScrollPort.\n */\nhterm.ScrollPort.prototype.getDocument = function() {\n  return this.document_;\n};\n\n/**\n * Returns the x-screen element that holds the rows of this hterm.ScrollPort.\n */\nhterm.ScrollPort.prototype.getScreenNode = function() {\n  return this.screen_;\n};\n\n/**\n * Clear out any cached rowNodes.\n */\nhterm.ScrollPort.prototype.resetCache = function() {\n  this.currentRowNodeCache_ = null;\n  this.previousRowNodeCache_ = {};\n};\n\n/**\n * Change the current rowProvider.\n *\n * This will clear the row cache and cause a redraw.\n *\n * @param {Object} rowProvider An object capable of providing the rows\n *     in this hterm.ScrollPort.\n */\nhterm.ScrollPort.prototype.setRowProvider = function(rowProvider) {\n  this.resetCache();\n  this.rowProvider_ = rowProvider;\n  this.scheduleRedraw();\n};\n\n/**\n * Inform the ScrollPort that the root DOM nodes for some or all of the visible\n * rows are no longer valid.\n *\n * Specifically, this should be called if this.rowProvider_.getRowNode() now\n * returns an entirely different node than it did before.  It does not\n * need to be called if the content of a row node is the only thing that\n * changed.\n *\n * This skips some of the overhead of a full redraw, but should not be used\n * in cases where the scrollport has been scrolled, or when the row count has\n * changed.\n */\nhterm.ScrollPort.prototype.invalidate = function() {\n  var node = this.topFold_.nextSibling;\n  while (node != this.bottomFold_) {\n    var nextSibling = node.nextSibling;\n    node.parentElement.removeChild(node);\n    node = nextSibling;\n  }\n\n  this.previousRowNodeCache_ = null;\n  var topRowIndex = this.getTopRowIndex();\n  var bottomRowIndex = this.getBottomRowIndex(topRowIndex);\n\n  this.drawVisibleRows_(topRowIndex, bottomRowIndex);\n};\n\nhterm.ScrollPort.prototype.scheduleInvalidate = function() {\n  if (this.timeouts_.invalidate)\n    return;\n\n  var self = this;\n  this.timeouts_.invalidate = setTimeout(function () {\n      delete self.timeouts_.invalidate;\n      self.invalidate();\n    }, 0);\n};\n\n/**\n * Set the font size of the ScrollPort.\n */\nhterm.ScrollPort.prototype.setFontSize = function(px) {\n  this.screen_.style.fontSize = px + 'px';\n  this.syncCharacterSize();\n};\n\n/**\n * Return the current font size of the ScrollPort.\n */\nhterm.ScrollPort.prototype.getFontSize = function() {\n  return parseInt(this.screen_.style.fontSize);\n};\n\n/**\n * Measure the size of a single character in pixels.\n *\n * @param {string} opt_weight The font weight to measure, or 'normal' if\n *     omitted.\n * @return {hterm.Size} A new hterm.Size object.\n */\nhterm.ScrollPort.prototype.measureCharacterSize = function(opt_weight) {\n  if (!this.ruler_) {\n    this.ruler_ = this.document_.createElement('div');\n    this.ruler_.style.cssText = (\n        'position: absolute;' +\n        'top: 0;' +\n        'left: 0;' +\n        'visibility: hidden;' +\n        'height: auto !important;' +\n        'width: auto !important;');\n\n    // We need to put the text in a span to make the size calculation\n    // work properly in Firefox\n    this.rulerSpan_ = this.document_.createElement('span');\n    this.rulerSpan_.textContent = ('XXXXXXXXXXXXXXXXXXXX' +\n                                   'XXXXXXXXXXXXXXXXXXXX' +\n                                   'XXXXXXXXXXXXXXXXXXXX' +\n                                   'XXXXXXXXXXXXXXXXXXXX' +\n                                   'XXXXXXXXXXXXXXXXXXXX');\n    this.ruler_.appendChild(this.rulerSpan_);\n\n    this.rulerBaseline_ = this.document_.createElement('span');\n    // We want to collapse it on the baseline\n    this.rulerBaseline_.style.fontSize = '0px';\n    this.rulerBaseline_.textContent = 'X';\n  }\n\n  this.rulerSpan_.style.fontWeight = opt_weight || '';\n\n  this.rowNodes_.appendChild(this.ruler_);\n  var rulerSize = hterm.getClientSize(this.rulerSpan_);\n\n  var size = new hterm.Size(rulerSize.width / this.ruler_.textContent.length,\n                            rulerSize.height);\n\n  this.ruler_.appendChild(this.rulerBaseline_);\n  size.baseline = this.rulerBaseline_.offsetTop;\n  this.ruler_.removeChild(this.rulerBaseline_);\n\n  this.rowNodes_.removeChild(this.ruler_);\n\n  this.div_.ownerDocument.body.appendChild(this.svg_);\n  size.zoomFactor = this.svg_.currentScale;\n  this.div_.ownerDocument.body.removeChild(this.svg_);\n\n  return size;\n};\n\n/**\n * Synchronize the character size.\n *\n * This will re-measure the current character size and adjust the height\n * of an x-row to match.\n */\nhterm.ScrollPort.prototype.syncCharacterSize = function() {\n  this.characterSize = this.measureCharacterSize();\n\n  var lineHeight = this.characterSize.height + 'px';\n  this.xrowCssRule_.style.height = lineHeight;\n  this.topSelectBag_.style.height = lineHeight;\n  this.bottomSelectBag_.style.height = lineHeight;\n\n  this.resize();\n\n  if (this.DEBUG_) {\n    // When we're debugging we add padding to the body so that the offscreen\n    // elements are visible.\n    this.document_.body.style.paddingTop =\n        this.document_.body.style.paddingBottom =\n        3 * this.characterSize.height + 'px';\n  }\n};\n\n/**\n * Reset dimensions and visible row count to account for a change in the\n * dimensions of the 'x-screen'.\n */\nhterm.ScrollPort.prototype.resize = function() {\n  this.currentScrollbarWidthPx = hterm.getClientWidth(this.screen_) -\n    this.screen_.clientWidth;\n\n  this.syncScrollHeight();\n  this.syncRowNodesDimensions_();\n\n  var self = this;\n  this.publish(\n      'resize', { scrollPort: this },\n      function() {\n        self.scrollRowToBottom(self.rowProvider_.getRowCount());\n        self.scheduleRedraw();\n      });\n};\n\n/**\n * Set the position and size of the row nodes element.\n */\nhterm.ScrollPort.prototype.syncRowNodesDimensions_ = function() {\n  var screenSize = this.getScreenSize();\n\n  this.lastScreenWidth_ = screenSize.width;\n  this.lastScreenHeight_ = screenSize.height;\n\n  // We don't want to show a partial row because it would be distracting\n  // in a terminal, so we floor any fractional row count.\n  this.visibleRowCount = lib.f.smartFloorDivide(\n      screenSize.height, this.characterSize.height);\n\n  // Then compute the height of our integral number of rows.\n  var visibleRowsHeight = this.visibleRowCount * this.characterSize.height;\n\n  // Then the difference between the screen height and total row height needs to\n  // be made up for as top margin.  We need to record this value so it\n  // can be used later to determine the topRowIndex.\n  this.visibleRowTopMargin = 0;\n  this.visibleRowBottomMargin = screenSize.height - visibleRowsHeight;\n\n  this.topFold_.style.marginBottom = this.visibleRowTopMargin + 'px';\n\n\n  var topFoldOffset = 0;\n  var node = this.topFold_.previousSibling;\n  while (node) {\n    topFoldOffset += hterm.getClientHeight(node);\n    node = node.previousSibling;\n  }\n\n  // Set the dimensions of the visible rows container.\n  this.rowNodes_.style.width = screenSize.width + 'px';\n  this.rowNodes_.style.height = visibleRowsHeight + topFoldOffset + 'px';\n  this.rowNodes_.style.left = this.screen_.offsetLeft + 'px';\n  this.rowNodes_.style.top = this.screen_.offsetTop - topFoldOffset + 'px';\n};\n\nhterm.ScrollPort.prototype.syncScrollHeight = function() {\n  // Resize the scroll area to appear as though it contains every row.\n  this.lastRowCount_ = this.rowProvider_.getRowCount();\n  this.scrollArea_.style.height = (this.characterSize.height *\n                                   this.lastRowCount_ +\n                                   this.visibleRowTopMargin +\n                                   this.visibleRowBottomMargin +\n                                   'px');\n};\n\n/**\n * Schedule a redraw to happen asynchronously.\n *\n * If this method is called multiple times before the redraw has a chance to\n * run only one redraw occurs.\n */\nhterm.ScrollPort.prototype.scheduleRedraw = function() {\n  if (this.timeouts_.redraw)\n    return;\n\n  var self = this;\n  this.timeouts_.redraw = setTimeout(function () {\n      delete self.timeouts_.redraw;\n      self.redraw_();\n    }, 0);\n};\n\n/**\n * Redraw the current hterm.ScrollPort based on the current scrollbar position.\n *\n * When redrawing, we are careful to make sure that the rows that start or end\n * the current selection are not touched in any way.  Doing so would disturb\n * the selection, and cleaning up after that would cause flashes at best and\n * incorrect selection at worst.  Instead, we modify the DOM around these nodes.\n * We even stash the selection start/end outside of the visible area if\n * they are not supposed to be visible in the hterm.ScrollPort.\n */\nhterm.ScrollPort.prototype.redraw_ = function() {\n  this.resetSelectBags_();\n  this.selection.sync();\n\n  this.syncScrollHeight();\n\n  this.currentRowNodeCache_ = {};\n\n  var topRowIndex = this.getTopRowIndex();\n  var bottomRowIndex = this.getBottomRowIndex(topRowIndex);\n\n  this.drawTopFold_(topRowIndex);\n  this.drawBottomFold_(bottomRowIndex);\n  this.drawVisibleRows_(topRowIndex, bottomRowIndex);\n\n  this.syncRowNodesDimensions_();\n\n  this.previousRowNodeCache_ = this.currentRowNodeCache_;\n  this.currentRowNodeCache_ = null;\n\n  this.isScrolledEnd = (\n    this.getTopRowIndex() + this.visibleRowCount >= this.lastRowCount_);\n};\n\n/**\n * Ensure that the nodes above the top fold are as they should be.\n *\n * If the selection start and/or end nodes are above the visible range\n * of this hterm.ScrollPort then the dom will be adjusted so that they appear\n * before the top fold (the first x-fold element, aka this.topFold).\n *\n * If not, the top fold will be the first element.\n *\n * It is critical that this method does not move the selection nodes.  Doing\n * so would clear the current selection.  Instead, the rest of the DOM is\n * adjusted around them.\n */\nhterm.ScrollPort.prototype.drawTopFold_ = function(topRowIndex) {\n  if (!this.selection.startRow ||\n      this.selection.startRow.rowIndex >= topRowIndex) {\n    // Selection is entirely below the top fold, just make sure the fold is\n    // the first child.\n    if (this.rowNodes_.firstChild != this.topFold_)\n      this.rowNodes_.insertBefore(this.topFold_, this.rowNodes_.firstChild);\n\n    return;\n  }\n\n  if (!this.selection.isMultiline ||\n      this.selection.endRow.rowIndex >= topRowIndex) {\n    // Only the startRow is above the fold.\n    if (this.selection.startRow.nextSibling != this.topFold_)\n      this.rowNodes_.insertBefore(this.topFold_,\n                                  this.selection.startRow.nextSibling);\n  } else {\n    // Both rows are above the fold.\n    if (this.selection.endRow.nextSibling != this.topFold_) {\n      this.rowNodes_.insertBefore(this.topFold_,\n                                  this.selection.endRow.nextSibling);\n    }\n\n    // Trim any intermediate lines.\n    while (this.selection.startRow.nextSibling !=\n           this.selection.endRow) {\n      this.rowNodes_.removeChild(this.selection.startRow.nextSibling);\n    }\n  }\n\n  while(this.rowNodes_.firstChild != this.selection.startRow) {\n    this.rowNodes_.removeChild(this.rowNodes_.firstChild);\n  }\n};\n\n/**\n * Ensure that the nodes below the bottom fold are as they should be.\n *\n * If the selection start and/or end nodes are below the visible range\n * of this hterm.ScrollPort then the dom will be adjusted so that they appear\n * after the bottom fold (the second x-fold element, aka this.bottomFold).\n *\n * If not, the bottom fold will be the last element.\n *\n * It is critical that this method does not move the selection nodes.  Doing\n * so would clear the current selection.  Instead, the rest of the DOM is\n * adjusted around them.\n */\nhterm.ScrollPort.prototype.drawBottomFold_ = function(bottomRowIndex) {\n  if (!this.selection.endRow ||\n      this.selection.endRow.rowIndex <= bottomRowIndex) {\n    // Selection is entirely above the bottom fold, just make sure the fold is\n    // the last child.\n    if (this.rowNodes_.lastChild != this.bottomFold_)\n      this.rowNodes_.appendChild(this.bottomFold_);\n\n    return;\n  }\n\n  if (!this.selection.isMultiline ||\n      this.selection.startRow.rowIndex <= bottomRowIndex) {\n    // Only the endRow is below the fold.\n    if (this.bottomFold_.nextSibling != this.selection.endRow)\n      this.rowNodes_.insertBefore(this.bottomFold_,\n                                  this.selection.endRow);\n  } else {\n    // Both rows are below the fold.\n    if (this.bottomFold_.nextSibling != this.selection.startRow) {\n      this.rowNodes_.insertBefore(this.bottomFold_,\n                                  this.selection.startRow);\n    }\n\n    // Trim any intermediate lines.\n    while (this.selection.startRow.nextSibling !=\n           this.selection.endRow) {\n      this.rowNodes_.removeChild(this.selection.startRow.nextSibling);\n    }\n  }\n\n  while(this.rowNodes_.lastChild != this.selection.endRow) {\n    this.rowNodes_.removeChild(this.rowNodes_.lastChild);\n  }\n};\n\n/**\n * Ensure that the rows between the top and bottom folds are as they should be.\n *\n * This method assumes that drawTopFold_() and drawBottomFold_() have already\n * run, and that they have left any visible selection row (selection start\n * or selection end) between the folds.\n *\n * It recycles DOM nodes from the previous redraw where possible, but will ask\n * the rowSource to make new nodes if necessary.\n *\n * It is critical that this method does not move the selection nodes.  Doing\n * so would clear the current selection.  Instead, the rest of the DOM is\n * adjusted around them.\n */\nhterm.ScrollPort.prototype.drawVisibleRows_ = function(\n    topRowIndex, bottomRowIndex) {\n  var self = this;\n\n  // Keep removing nodes, starting with currentNode, until we encounter\n  // targetNode.  Throws on failure.\n  function removeUntilNode(currentNode, targetNode) {\n    while (currentNode != targetNode) {\n      if (!currentNode)\n        throw 'Did not encounter target node';\n\n      if (currentNode == self.bottomFold_)\n        throw 'Encountered bottom fold before target node';\n\n      var deadNode = currentNode;\n      currentNode = currentNode.nextSibling;\n      deadNode.parentNode.removeChild(deadNode);\n    }\n  }\n\n  // Shorthand for things we're going to use a lot.\n  var selectionStartRow = this.selection.startRow;\n  var selectionEndRow = this.selection.endRow;\n  var bottomFold = this.bottomFold_;\n\n  // The node we're examining during the current iteration.\n  var node = this.topFold_.nextSibling;\n\n  var targetDrawCount = Math.min(this.visibleRowCount,\n                                 this.rowProvider_.getRowCount());\n\n  for (var drawCount = 0; drawCount < targetDrawCount; drawCount++) {\n    var rowIndex = topRowIndex + drawCount;\n\n    if (node == bottomFold) {\n      // We've hit the bottom fold, we need to insert a new row.\n      var newNode = this.fetchRowNode_(rowIndex);\n      if (!newNode) {\n        console.log(\"Couldn't fetch row index: \" + rowIndex);\n        break;\n      }\n\n      this.rowNodes_.insertBefore(newNode, node);\n      continue;\n    }\n\n    if (node.rowIndex == rowIndex) {\n      // This node is in the right place, move along.\n      node = node.nextSibling;\n      continue;\n    }\n\n    if (selectionStartRow && selectionStartRow.rowIndex == rowIndex) {\n      // The selection start row is supposed to be here, remove nodes until\n      // we find it.\n      removeUntilNode(node, selectionStartRow);\n      node = selectionStartRow.nextSibling;\n      continue;\n    }\n\n    if (selectionEndRow && selectionEndRow.rowIndex == rowIndex) {\n      // The selection end row is supposed to be here, remove nodes until\n      // we find it.\n      removeUntilNode(node, selectionEndRow);\n      node = selectionEndRow.nextSibling;\n      continue;\n    }\n\n    if (node == selectionStartRow || node == selectionEndRow) {\n      // We encountered the start/end of the selection, but we don't want it\n      // yet.  Insert a new row instead.\n      var newNode = this.fetchRowNode_(rowIndex);\n      if (!newNode) {\n        console.log(\"Couldn't fetch row index: \" + rowIndex);\n        break;\n      }\n\n      this.rowNodes_.insertBefore(newNode, node);\n      continue;\n    }\n\n    // There is nothing special about this node, but it's in our way.  Replace\n    // it with the node that should be here.\n    var newNode = this.fetchRowNode_(rowIndex);\n    if (!newNode) {\n      console.log(\"Couldn't fetch row index: \" + rowIndex);\n      break;\n    }\n\n    if (node == newNode) {\n      node = node.nextSibling;\n      continue;\n    }\n\n    this.rowNodes_.insertBefore(newNode, node);\n    if (!newNode.nextSibling)\n      debugger;\n    this.rowNodes_.removeChild(node);\n    node = newNode.nextSibling;\n  }\n\n  if (node != this.bottomFold_)\n    removeUntilNode(node, bottomFold);\n};\n\n/**\n * Empty out both select bags and remove them from the document.\n *\n * These nodes hold the text between the start and end of the selection\n * when that text is otherwise off screen.  They are filled out in the\n * onCopy_ event.\n */\nhterm.ScrollPort.prototype.resetSelectBags_ = function() {\n  if (this.topSelectBag_.parentNode) {\n    this.topSelectBag_.textContent = '';\n    this.topSelectBag_.parentNode.removeChild(this.topSelectBag_);\n  }\n\n  if (this.bottomSelectBag_.parentNode) {\n    this.bottomSelectBag_.textContent = '';\n    this.bottomSelectBag_.parentNode.removeChild(this.bottomSelectBag_);\n  }\n};\n\n/**\n * Place a row node in the cache of visible nodes.\n *\n * This method may only be used during a redraw_.\n */\nhterm.ScrollPort.prototype.cacheRowNode_ = function(rowNode) {\n  this.currentRowNodeCache_[rowNode.rowIndex] = rowNode;\n};\n\n/**\n * Fetch the row node for the given index.\n *\n * This will return a node from the cache if possible, or will request one\n * from the RowProvider if not.\n *\n * If a redraw_ is in progress the row will be added to the current cache.\n */\nhterm.ScrollPort.prototype.fetchRowNode_ = function(rowIndex) {\n  var node;\n\n  if (this.previousRowNodeCache_ && rowIndex in this.previousRowNodeCache_) {\n    node = this.previousRowNodeCache_[rowIndex];\n  } else {\n    node = this.rowProvider_.getRowNode(rowIndex);\n  }\n\n  if (this.currentRowNodeCache_)\n    this.cacheRowNode_(node);\n\n  return node;\n};\n\n/**\n * Select all rows in the viewport.\n */\nhterm.ScrollPort.prototype.selectAll = function() {\n  var firstRow;\n\n  if (this.topFold_.nextSibling.rowIndex != 0) {\n    while (this.topFold_.previousSibling) {\n      this.rowNodes_.removeChild(this.topFold_.previousSibling);\n    }\n\n    firstRow = this.fetchRowNode_(0);\n    this.rowNodes_.insertBefore(firstRow, this.topFold_);\n    this.syncRowNodesDimensions_();\n  } else {\n    firstRow = this.topFold_.nextSibling;\n  }\n\n  var lastRowIndex = this.rowProvider_.getRowCount() - 1;\n  var lastRow;\n\n  if (this.bottomFold_.previousSibling.rowIndex != lastRowIndex) {\n    while (this.bottomFold_.nextSibling) {\n      this.rowNodes_.removeChild(this.bottomFold_.nextSibling);\n    }\n\n    lastRow = this.fetchRowNode_(lastRowIndex);\n    this.rowNodes_.appendChild(lastRow);\n  } else {\n    lastRow = this.bottomFold_.previousSibling.rowIndex;\n  }\n\n  var selection = this.document_.getSelection();\n  selection.collapse(firstRow, 0);\n  selection.extend(lastRow, lastRow.childNodes.length);\n\n  this.selection.sync();\n};\n\n/**\n * Return the maximum scroll position in pixels.\n */\nhterm.ScrollPort.prototype.getScrollMax_ = function(e) {\n  return (hterm.getClientHeight(this.scrollArea_) +\n          this.visibleRowTopMargin + this.visibleRowBottomMargin -\n          hterm.getClientHeight(this.screen_));\n};\n\n/**\n * Scroll the given rowIndex to the top of the hterm.ScrollPort.\n *\n * @param {integer} rowIndex Index of the target row.\n */\nhterm.ScrollPort.prototype.scrollRowToTop = function(rowIndex) {\n  this.syncScrollHeight();\n\n  this.isScrolledEnd = (\n    rowIndex + this.visibleRowCount >= this.lastRowCount_);\n\n  var scrollTop = rowIndex * this.characterSize.height +\n      this.visibleRowTopMargin;\n\n  var scrollMax = this.getScrollMax_();\n  if (scrollTop > scrollMax)\n    scrollTop = scrollMax;\n\n  if (this.screen_.scrollTop == scrollTop)\n    return;\n\n  this.screen_.scrollTop = scrollTop;\n  this.scheduleRedraw();\n};\n\n/**\n * Scroll the given rowIndex to the bottom of the hterm.ScrollPort.\n *\n * @param {integer} rowIndex Index of the target row.\n */\nhterm.ScrollPort.prototype.scrollRowToBottom = function(rowIndex) {\n  this.syncScrollHeight();\n\n  this.isScrolledEnd = (\n    rowIndex + this.visibleRowCount >= this.lastRowCount_);\n\n  var scrollTop = rowIndex * this.characterSize.height +\n      this.visibleRowTopMargin + this.visibleRowBottomMargin;\n  scrollTop -= this.visibleRowCount * this.characterSize.height;\n\n  if (scrollTop < 0)\n    scrollTop = 0;\n\n  if (this.screen_.scrollTop == scrollTop)\n    return;\n\n  this.screen_.scrollTop = scrollTop;\n};\n\n/**\n * Return the row index of the first visible row.\n *\n * This is based on the scroll position.  If a redraw_ is in progress this\n * returns the row that *should* be at the top.\n */\nhterm.ScrollPort.prototype.getTopRowIndex = function() {\n  return lib.f.smartFloorDivide(\n      this.screen_.scrollTop, this.characterSize.height);\n};\n\n/**\n * Return the row index of the last visible row.\n *\n * This is based on the scroll position.  If a redraw_ is in progress this\n * returns the row that *should* be at the bottom.\n */\nhterm.ScrollPort.prototype.getBottomRowIndex = function(topRowIndex) {\n  return topRowIndex + this.visibleRowCount - 1;\n};\n\n/**\n * Handler for scroll events.\n *\n * The onScroll event fires when scrollArea's scrollTop property changes.  This\n * may be due to the user manually move the scrollbar, or a programmatic change.\n */\nhterm.ScrollPort.prototype.onScroll_ = function(e) {\n  var screenSize = this.getScreenSize();\n  if (screenSize.width != this.lastScreenWidth_ ||\n      screenSize.height != this.lastScreenHeight_) {\n    // This event may also fire during a resize (but before the resize event!).\n    // This happens when the browser moves the scrollbar as part of the resize.\n    // In these cases, we want to ignore the scroll event and let onResize\n    // handle things.  If we don't, then we end up scrolling to the wrong\n    // position after a resize.\n    this.resize();\n    return;\n  }\n\n  this.redraw_();\n  this.publish('scroll', { scrollPort: this });\n};\n\n/**\n * Clients can override this if they want to hear scrollwheel events.\n *\n * Clients may call event.preventDefault() if they want to keep the scrollport\n * from also handling the events.\n */\nhterm.ScrollPort.prototype.onScrollWheel = function(e) {};\n\n/**\n * Handler for scroll-wheel events.\n *\n * The onScrollWheel event fires when the user moves their scrollwheel over this\n * hterm.ScrollPort.  Because the frontmost element in the hterm.ScrollPort is\n * a fixed position DIV, the scroll wheel does nothing by default.  Instead, we\n * have to handle it manually.\n */\nhterm.ScrollPort.prototype.onScrollWheel_ = function(e) {\n  this.onScrollWheel(e);\n\n  if (e.defaultPrevented)\n    return;\n\n  // In FF, the event is DOMMouseScroll and puts the scroll pixel delta in the\n  // 'detail' field of the event.  It also flips the mapping of which direction\n  // a negative number means in the scroll.\n  var delta = e.type == 'DOMMouseScroll' ? (-1 * e.detail) : e.wheelDeltaY;\n  delta *= this.scrollWheelMultiplier_;\n\n  var top = this.screen_.scrollTop - delta;\n  if (top < 0)\n    top = 0;\n\n  var scrollMax = this.getScrollMax_();\n  if (top > scrollMax)\n    top = scrollMax;\n\n  if (top != this.screen_.scrollTop) {\n    // Moving scrollTop causes a scroll event, which triggers the redraw.\n    this.screen_.scrollTop = top;\n\n    // Only preventDefault when we've actually scrolled.  If there's nothing\n    // to scroll we want to pass the event through so Chrome can detect the\n    // overscroll.\n    e.preventDefault();\n  }\n};\n\n/**\n * Handler for resize events.\n *\n * The browser will resize us such that the top row stays at the top, but we\n * prefer to the bottom row to stay at the bottom.\n */\nhterm.ScrollPort.prototype.onResize_ = function(e) {\n  // Re-measure, since onResize also happens for browser zoom changes.\n  this.syncCharacterSize();\n  this.resize();\n};\n\n/**\n * Clients can override this if they want to hear copy events.\n *\n * Clients may call event.preventDefault() if they want to keep the scrollport\n * from also handling the events.\n */\nhterm.ScrollPort.prototype.onCopy = function(e) { };\n\n/**\n * Handler for copy-to-clipboard events.\n *\n * If some or all of the selected rows are off screen we may need to fill in\n * the rows between selection start and selection end.  This handler determines\n * if we're missing some of the selected text, and if so populates one or both\n * of the \"select bags\" with the missing text.\n */\nhterm.ScrollPort.prototype.onCopy_ = function(e) {\n  this.onCopy(e);\n\n  if (e.defaultPrevented)\n    return;\n\n  this.resetSelectBags_();\n  this.selection.sync();\n\n  if (!this.selection.startRow ||\n      this.selection.endRow.rowIndex - this.selection.startRow.rowIndex < 2) {\n    return;\n  }\n\n  var topRowIndex = this.getTopRowIndex();\n  var bottomRowIndex = this.getBottomRowIndex(topRowIndex);\n\n  if (this.selection.startRow.rowIndex < topRowIndex) {\n    // Start of selection is above the top fold.\n    var endBackfillIndex;\n\n    if (this.selection.endRow.rowIndex < topRowIndex) {\n      // Entire selection is above the top fold.\n      endBackfillIndex = this.selection.endRow.rowIndex;\n    } else {\n      // Selection extends below the top fold.\n      endBackfillIndex = this.topFold_.nextSibling.rowIndex;\n    }\n\n    this.topSelectBag_.textContent = this.rowProvider_.getRowsText(\n        this.selection.startRow.rowIndex + 1, endBackfillIndex);\n    this.rowNodes_.insertBefore(this.topSelectBag_,\n                                this.selection.startRow.nextSibling);\n    this.syncRowNodesDimensions_();\n  }\n\n  if (this.selection.endRow.rowIndex > bottomRowIndex) {\n    // Selection ends below the bottom fold.\n    var startBackfillIndex;\n\n    if (this.selection.startRow.rowIndex > bottomRowIndex) {\n      // Entire selection is below the bottom fold.\n      startBackfillIndex = this.selection.startRow.rowIndex + 1;\n    } else {\n      // Selection starts above the bottom fold.\n      startBackfillIndex = this.bottomFold_.previousSibling.rowIndex + 1;\n    }\n\n    this.bottomSelectBag_.textContent = this.rowProvider_.getRowsText(\n        startBackfillIndex, this.selection.endRow.rowIndex);\n    this.rowNodes_.insertBefore(this.bottomSelectBag_, this.selection.endRow);\n  }\n};\n\n/**\n * Focuses on the paste target on a ctrl-v keydown event, as in\n * FF a content editable element must be focused before the paste event.\n */\nhterm.ScrollPort.prototype.onBodyKeyDown_ = function(e) {\n  if (!this.ctrlVPaste)\n    return;\n\n  var key = String.fromCharCode(e.which);\n  var lowerKey = key.toLowerCase();\n  if ((e.ctrlKey || e.metaKey) && lowerKey == \"v\")\n    this.pasteTarget_.focus();\n};\n\n/**\n * Handle a paste event on the the ScrollPort's screen element.\n */\nhterm.ScrollPort.prototype.onPaste_ = function(e) {\n  this.pasteTarget_.focus();\n\n  var self = this;\n  setTimeout(function() {\n      self.publish('paste', { text: self.pasteTarget_.value });\n      self.pasteTarget_.value = '';\n      self.screen_.focus();\n    }, 0);\n};\n\n/**\n * Handles a textInput event on the paste target. Stops this from\n * propagating as we want this to be handled in the onPaste_ method.\n */\nhterm.ScrollPort.prototype.handlePasteTargetTextInput_ = function(e) {\n  e.stopPropagation();\n};\n\n/**\n * Set the vertical scrollbar mode of the ScrollPort.\n */\nhterm.ScrollPort.prototype.setScrollbarVisible = function(state) {\n  this.screen_.style.overflowY = state ? 'scroll' : 'hidden';\n};\n\n/**\n * Set scroll wheel multiplier. This alters how much the screen scrolls on\n * mouse wheel events.\n */\nhterm.ScrollPort.prototype.setScrollWheelMoveMultipler = function(multiplier) {\n  this.scrollWheelMultiplier_ = multiplier;\n};\n// SOURCE FILE: hterm/js/hterm_terminal.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.colors', 'lib.PreferenceManager', 'lib.resource', 'lib.wc',\n          'lib.f', 'hterm.Keyboard', 'hterm.Options', 'hterm.PreferenceManager',\n          'hterm.Screen', 'hterm.ScrollPort', 'hterm.Size',\n          'hterm.TextAttributes', 'hterm.VT');\n\n/**\n * Constructor for the Terminal class.\n *\n * A Terminal pulls together the hterm.ScrollPort, hterm.Screen and hterm.VT100\n * classes to provide the complete terminal functionality.\n *\n * There are a number of lower-level Terminal methods that can be called\n * directly to manipulate the cursor, text, scroll region, and other terminal\n * attributes.  However, the primary method is interpret(), which parses VT\n * escape sequences and invokes the appropriate Terminal methods.\n *\n * This class was heavily influenced by Cory Maccarrone's Framebuffer class.\n *\n * TODO(rginda): Eventually we're going to need to support characters which are\n * displayed twice as wide as standard latin characters.  This is to support\n * CJK (and possibly other character sets).\n *\n * @param {string} opt_profileId Optional preference profile name.  If not\n *     provided, defaults to 'default'.\n */\nhterm.Terminal = function(opt_profileId) {\n  this.profileId_ = null;\n\n  // Two screen instances.\n  this.primaryScreen_ = new hterm.Screen();\n  this.alternateScreen_ = new hterm.Screen();\n\n  // The \"current\" screen.\n  this.screen_ = this.primaryScreen_;\n\n  // The local notion of the screen size.  ScreenBuffers also have a size which\n  // indicates their present size.  During size changes, the two may disagree.\n  // Also, the inactive screen's size is not altered until it is made the active\n  // screen.\n  this.screenSize = new hterm.Size(0, 0);\n\n  // The scroll port we'll be using to display the visible rows.\n  this.scrollPort_ = new hterm.ScrollPort(this);\n  this.scrollPort_.subscribe('resize', this.onResize_.bind(this));\n  this.scrollPort_.subscribe('scroll', this.onScroll_.bind(this));\n  this.scrollPort_.subscribe('paste', this.onPaste_.bind(this));\n  this.scrollPort_.onCopy = this.onCopy_.bind(this);\n\n  // The div that contains this terminal.\n  this.div_ = null;\n\n  // The document that contains the scrollPort.  Defaulted to the global\n  // document here so that the terminal is functional even if it hasn't been\n  // inserted into a document yet, but re-set in decorate().\n  this.document_ = window.document;\n\n  // The rows that have scrolled off screen and are no longer addressable.\n  this.scrollbackRows_ = [];\n\n  // Saved tab stops.\n  this.tabStops_ = [];\n\n  // Keep track of whether default tab stops have been erased; after a TBC\n  // clears all tab stops, defaults aren't restored on resize until a reset.\n  this.defaultTabStops = true;\n\n  // The VT's notion of the top and bottom rows.  Used during some VT\n  // cursor positioning and scrolling commands.\n  this.vtScrollTop_ = null;\n  this.vtScrollBottom_ = null;\n\n  // The DIV element for the visible cursor.\n  this.cursorNode_ = null;\n\n  // The current cursor shape of the terminal.\n  this.cursorShape_ = hterm.Terminal.cursorShape.BLOCK;\n\n  // The current color of the cursor.\n  this.cursorColor_ = null;\n\n  // Cursor blink on/off cycle in ms, overwritten by prefs once they're loaded.\n  this.cursorBlinkCycle_ = [100, 100];\n\n  // Pre-bound onCursorBlink_ handler, so we don't have to do this for each\n  // cursor on/off servicing.\n  this.myOnCursorBlink_ = this.onCursorBlink_.bind(this);\n\n  // These prefs are cached so we don't have to read from local storage with\n  // each output and keystroke.  They are initialized by the preference manager.\n  this.backgroundColor_ = null;\n  this.foregroundColor_ = null;\n  this.scrollOnOutput_ = null;\n  this.scrollOnKeystroke_ = null;\n\n  // True if we should send mouse events to the vt, false if we want them\n  // to manage the local text selection.\n  this.reportMouseEvents_ = false;\n\n  // Terminal bell sound.\n  this.bellAudio_ = this.document_.createElement('audio');\n  this.bellAudio_.setAttribute('preload', 'auto');\n\n  // All terminal bell notifications that have been generated (not necessarily\n  // shown).\n  this.bellNotificationList_ = [];\n\n  // Whether we have permission to display notifications.\n  this.desktopNotificationBell_ = false;\n\n  // Cursor position and attributes saved with DECSC.\n  this.savedOptions_ = {};\n\n  // The current mode bits for the terminal.\n  this.options_ = new hterm.Options();\n\n  // Timeouts we might need to clear.\n  this.timeouts_ = {};\n\n  // The VT escape sequence interpreter.\n  this.vt = new hterm.VT(this);\n\n  // The keyboard hander.\n  this.keyboard = new hterm.Keyboard(this);\n\n  // General IO interface that can be given to third parties without exposing\n  // the entire terminal object.\n  this.io = new hterm.Terminal.IO(this);\n\n  // True if mouse-click-drag should scroll the terminal.\n  this.enableMouseDragScroll = true;\n\n  this.copyOnSelect = null;\n  this.mousePasteButton = null;\n\n  // Whether to use the default window copy behaviour.\n  this.useDefaultWindowCopy = false;\n\n  this.clearSelectionAfterCopy = true;\n\n  this.realizeSize_(80, 24);\n  this.setDefaultTabStops();\n\n  this.setProfile(opt_profileId || 'default',\n                  function() { this.onTerminalReady() }.bind(this));\n};\n\n/**\n * Possible cursor shapes.\n */\nhterm.Terminal.cursorShape = {\n  BLOCK: 'BLOCK',\n  BEAM: 'BEAM',\n  UNDERLINE: 'UNDERLINE'\n};\n\n/**\n * Clients should override this to be notified when the terminal is ready\n * for use.\n *\n * The terminal initialization is asynchronous, and shouldn't be used before\n * this method is called.\n */\nhterm.Terminal.prototype.onTerminalReady = function() { };\n\n/**\n * Default tab with of 8 to match xterm.\n */\nhterm.Terminal.prototype.tabWidth = 8;\n\n/**\n * Select a preference profile.\n *\n * This will load the terminal preferences for the given profile name and\n * associate subsequent preference changes with the new preference profile.\n *\n * @param {string} newName The name of the preference profile.  Forward slash\n *     characters will be removed from the name.\n * @param {function} opt_callback Optional callback to invoke when the profile\n *     transition is complete.\n */\nhterm.Terminal.prototype.setProfile = function(profileId, opt_callback) {\n  this.profileId_ = profileId.replace(/\\//g, '');\n\n  var terminal = this;\n\n  if (this.prefs_)\n    this.prefs_.deactivate();\n\n  this.prefs_ = new hterm.PreferenceManager(this.profileId_);\n  this.prefs_.addObservers(null, {\n    'alt-gr-mode': function(v) {\n      if (v == null) {\n        if (navigator.language.toLowerCase() == 'en-us') {\n          v = 'none';\n        } else {\n          v = 'right-alt';\n        }\n      } else if (typeof v == 'string') {\n        v = v.toLowerCase();\n      } else {\n        v = 'none';\n      }\n\n      if (!/^(none|ctrl-alt|left-alt|right-alt)$/.test(v))\n        v = 'none';\n\n      terminal.keyboard.altGrMode = v;\n    },\n\n    'alt-backspace-is-meta-backspace': function(v) {\n      terminal.keyboard.altBackspaceIsMetaBackspace = v;\n    },\n\n    'alt-is-meta': function(v) {\n      terminal.keyboard.altIsMeta = v;\n    },\n\n    'alt-sends-what': function(v) {\n      if (!/^(escape|8-bit|browser-key)$/.test(v))\n        v = 'escape';\n\n      terminal.keyboard.altSendsWhat = v;\n    },\n\n    'audible-bell-sound': function(v) {\n      var ary = v.match(/^lib-resource:(\\S+)/);\n      if (ary) {\n        terminal.bellAudio_.setAttribute('src',\n                                         lib.resource.getDataUrl(ary[1]));\n      } else {\n        terminal.bellAudio_.setAttribute('src', v);\n      }\n    },\n\n    'desktop-notification-bell': function(v) {\n      if (v && Notification) {\n        terminal.desktopNotificationBell_ =\n            Notification.permission === 'granted';\n        if (!terminal.desktopNotificationBell_) {\n          // Note: We don't call Notification.requestPermission here because\n          // Chrome requires the call be the result of a user action (such as an\n          // onclick handler), and pref listeners are run asynchronously.\n          //\n          // A way of working around this would be to display a dialog in the\n          // terminal with a \"click-to-request-permission\" button.\n          console.warn('desktop-notification-bell is true but we do not have ' +\n                       'permission to display notifications.');\n        }\n      } else {\n        terminal.desktopNotificationBell_ = false;\n      }\n    },\n\n    'background-color': function(v) {\n      terminal.setBackgroundColor(v);\n    },\n\n    'background-image': function(v) {\n      terminal.scrollPort_.setBackgroundImage(v);\n    },\n\n    'background-size': function(v) {\n      terminal.scrollPort_.setBackgroundSize(v);\n    },\n\n    'background-position': function(v) {\n      terminal.scrollPort_.setBackgroundPosition(v);\n    },\n\n    'backspace-sends-backspace': function(v) {\n      terminal.keyboard.backspaceSendsBackspace = v;\n    },\n\n    'character-map-overrides': function(v) {\n      if (!(v == null || v instanceof Object)) {\n        console.warn('Preference character-map-modifications is not an ' +\n                     'object: ' + v);\n        return;\n      }\n\n      for (var code in v) {\n        var glmap = hterm.VT.CharacterMap.maps[code].glmap;\n        for (var received in v[code]) {\n          glmap[received] = v[code][received];\n        }\n        hterm.VT.CharacterMap.maps[code].reset(glmap);\n      }\n    },\n\n    'cursor-blink': function(v) {\n      terminal.setCursorBlink(!!v);\n    },\n\n    'cursor-blink-cycle': function(v) {\n        if (v instanceof Array &&\n            typeof v[0] == 'number' &&\n            typeof v[1] == 'number') {\n          terminal.cursorBlinkCycle_ = v;\n        } else if (typeof v == 'number') {\n          terminal.cursorBlinkCycle_ = [v, v];\n        } else {\n          // Fast blink indicates an error.\n          terminal.cursorBlinkCycle_ = [100, 100];\n        }\n    },\n\n    'cursor-color': function(v) {\n      terminal.setCursorColor(v);\n    },\n\n    'color-palette-overrides': function(v) {\n      if (!(v == null || v instanceof Object || v instanceof Array)) {\n        console.warn('Preference color-palette-overrides is not an array or ' +\n                     'object: ' + v);\n        return;\n      }\n\n      lib.colors.colorPalette = lib.colors.stockColorPalette.concat();\n\n      if (v) {\n        for (var key in v) {\n          var i = parseInt(key);\n          if (isNaN(i) || i < 0 || i > 255) {\n            console.log('Invalid value in palette: ' + key + ': ' + v[key]);\n            continue;\n          }\n\n          if (v[i]) {\n            var rgb = lib.colors.normalizeCSS(v[i]);\n            if (rgb)\n              lib.colors.colorPalette[i] = rgb;\n          }\n        }\n      }\n\n      terminal.primaryScreen_.textAttributes.resetColorPalette()\n      terminal.alternateScreen_.textAttributes.resetColorPalette();\n    },\n\n    'copy-on-select': function(v) {\n      terminal.copyOnSelect = !!v;\n    },\n\n    'use-default-window-copy': function(v) {\n      terminal.useDefaultWindowCopy = !!v;\n    },\n\n    'clear-selection-after-copy': function(v) {\n      terminal.clearSelectionAfterCopy = !!v;\n    },\n\n    'ctrl-plus-minus-zero-zoom': function(v) {\n      terminal.keyboard.ctrlPlusMinusZeroZoom = v;\n    },\n\n    'ctrl-c-copy': function(v) {\n      terminal.keyboard.ctrlCCopy = v;\n    },\n\n    'ctrl-v-paste': function(v) {\n      terminal.keyboard.ctrlVPaste = v;\n      terminal.scrollPort_.setCtrlVPaste(v);\n    },\n\n    'east-asian-ambiguous-as-two-column': function(v) {\n      lib.wc.regardCjkAmbiguous = v;\n    },\n\n    'enable-8-bit-control': function(v) {\n      terminal.vt.enable8BitControl = !!v;\n    },\n\n    'enable-bold': function(v) {\n      terminal.syncBoldSafeState();\n    },\n\n    'enable-bold-as-bright': function(v) {\n      terminal.primaryScreen_.textAttributes.enableBoldAsBright = !!v;\n      terminal.alternateScreen_.textAttributes.enableBoldAsBright = !!v;\n    },\n\n    'enable-clipboard-write': function(v) {\n      terminal.vt.enableClipboardWrite = !!v;\n    },\n\n    'enable-dec12': function(v) {\n      terminal.vt.enableDec12 = !!v;\n    },\n\n    'font-family': function(v) {\n      terminal.syncFontFamily();\n    },\n\n    'font-size': function(v) {\n      terminal.setFontSize(v);\n    },\n\n    'font-smoothing': function(v) {\n      terminal.syncFontFamily();\n    },\n\n    'foreground-color': function(v) {\n      terminal.setForegroundColor(v);\n    },\n\n    'home-keys-scroll': function(v) {\n      terminal.keyboard.homeKeysScroll = v;\n    },\n\n    'max-string-sequence': function(v) {\n      terminal.vt.maxStringSequence = v;\n    },\n\n    'media-keys-are-fkeys': function(v) {\n      terminal.keyboard.mediaKeysAreFKeys = v;\n    },\n\n    'meta-sends-escape': function(v) {\n      terminal.keyboard.metaSendsEscape = v;\n    },\n\n    'mouse-paste-button': function(v) {\n      terminal.syncMousePasteButton();\n    },\n\n    'page-keys-scroll': function(v) {\n      terminal.keyboard.pageKeysScroll = v;\n    },\n\n    'pass-alt-number': function(v) {\n      if (v == null) {\n        var osx = window.navigator.userAgent.match(/Mac OS X/);\n\n        // Let Alt-1..9 pass to the browser (to control tab switching) on\n        // non-OS X systems, or if hterm is not opened in an app window.\n        v = (!osx && hterm.windowType != 'popup');\n      }\n\n      terminal.passAltNumber = v;\n    },\n\n    'pass-ctrl-number': function(v) {\n      if (v == null) {\n        var osx = window.navigator.userAgent.match(/Mac OS X/);\n\n        // Let Ctrl-1..9 pass to the browser (to control tab switching) on\n        // non-OS X systems, or if hterm is not opened in an app window.\n        v = (!osx && hterm.windowType != 'popup');\n      }\n\n      terminal.passCtrlNumber = v;\n    },\n\n    'pass-meta-number': function(v) {\n      if (v == null) {\n        var osx = window.navigator.userAgent.match(/Mac OS X/);\n\n        // Let Meta-1..9 pass to the browser (to control tab switching) on\n        // OS X systems, or if hterm is not opened in an app window.\n        v = (osx && hterm.windowType != 'popup');\n      }\n\n      terminal.passMetaNumber = v;\n    },\n\n    'pass-meta-v': function(v) {\n      terminal.keyboard.passMetaV = v;\n    },\n\n    'receive-encoding': function(v) {\n       if (!(/^(utf-8|raw)$/).test(v)) {\n         console.warn('Invalid value for \"receive-encoding\": ' + v);\n         v = 'utf-8';\n       }\n\n       terminal.vt.characterEncoding = v;\n    },\n\n    'scroll-on-keystroke': function(v) {\n      terminal.scrollOnKeystroke_ = v;\n    },\n\n    'scroll-on-output': function(v) {\n      terminal.scrollOnOutput_ = v;\n    },\n\n    'scrollbar-visible': function(v) {\n      terminal.setScrollbarVisible(v);\n    },\n\n    'scroll-wheel-move-multiplier': function(v) {\n      terminal.setScrollWheelMoveMultipler(v);\n    },\n\n    'send-encoding': function(v) {\n       if (!(/^(utf-8|raw)$/).test(v)) {\n         console.warn('Invalid value for \"send-encoding\": ' + v);\n         v = 'utf-8';\n       }\n\n       terminal.keyboard.characterEncoding = v;\n    },\n\n    'shift-insert-paste': function(v) {\n      terminal.keyboard.shiftInsertPaste = v;\n    },\n\n    'user-css': function(v) {\n      terminal.scrollPort_.setUserCss(v);\n    }\n  });\n\n  this.prefs_.readStorage(function() {\n    this.prefs_.notifyAll();\n\n    if (opt_callback)\n      opt_callback();\n  }.bind(this));\n};\n\n\n/**\n * Returns the preferences manager used for configuring this terminal.\n */\nhterm.Terminal.prototype.getPrefs = function() {\n  return this.prefs_;\n};\n\n/**\n * Enable or disable bracketed paste mode.\n */\nhterm.Terminal.prototype.setBracketedPaste = function(state) {\n  this.options_.bracketedPaste = state;\n};\n\n/**\n * Set the color for the cursor.\n *\n * If you want this setting to persist, set it through prefs_, rather than\n * with this method.\n */\nhterm.Terminal.prototype.setCursorColor = function(color) {\n  this.cursorColor_ = color;\n  this.cursorNode_.style.backgroundColor = color;\n  this.cursorNode_.style.borderColor = color;\n};\n\n/**\n * Return the current cursor color as a string.\n */\nhterm.Terminal.prototype.getCursorColor = function() {\n  return this.cursorColor_;\n};\n\n/**\n * Enable or disable mouse based text selection in the terminal.\n */\nhterm.Terminal.prototype.setSelectionEnabled = function(state) {\n  this.enableMouseDragScroll = state;\n};\n\n/**\n * Set the background color.\n *\n * If you want this setting to persist, set it through prefs_, rather than\n * with this method.\n */\nhterm.Terminal.prototype.setBackgroundColor = function(color) {\n  this.backgroundColor_ = lib.colors.normalizeCSS(color);\n  this.primaryScreen_.textAttributes.setDefaults(\n      this.foregroundColor_, this.backgroundColor_);\n  this.alternateScreen_.textAttributes.setDefaults(\n      this.foregroundColor_, this.backgroundColor_);\n  this.scrollPort_.setBackgroundColor(color);\n};\n\n/**\n * Return the current terminal background color.\n *\n * Intended for use by other classes, so we don't have to expose the entire\n * prefs_ object.\n */\nhterm.Terminal.prototype.getBackgroundColor = function() {\n  return this.backgroundColor_;\n};\n\n/**\n * Set the foreground color.\n *\n * If you want this setting to persist, set it through prefs_, rather than\n * with this method.\n */\nhterm.Terminal.prototype.setForegroundColor = function(color) {\n  this.foregroundColor_ = lib.colors.normalizeCSS(color);\n  this.primaryScreen_.textAttributes.setDefaults(\n      this.foregroundColor_, this.backgroundColor_);\n  this.alternateScreen_.textAttributes.setDefaults(\n      this.foregroundColor_, this.backgroundColor_);\n  this.scrollPort_.setForegroundColor(color);\n};\n\n/**\n * Return the current terminal foreground color.\n *\n * Intended for use by other classes, so we don't have to expose the entire\n * prefs_ object.\n */\nhterm.Terminal.prototype.getForegroundColor = function() {\n  return this.foregroundColor_;\n};\n\n/**\n * Create a new instance of a terminal command and run it with a given\n * argument string.\n *\n * @param {function} commandClass The constructor for a terminal command.\n * @param {string} argString The argument string to pass to the command.\n */\nhterm.Terminal.prototype.runCommandClass = function(commandClass, argString) {\n  var environment = this.prefs_.get('environment');\n  if (typeof environment != 'object' || environment == null)\n    environment = {};\n\n  var self = this;\n  this.command = new commandClass(\n      { argString: argString || '',\n        io: this.io.push(),\n        environment: environment,\n        onExit: function(code) {\n          self.io.pop();\n          self.uninstallKeyboard();\n          if (self.prefs_.get('close-on-exit'))\n              window.close();\n        }\n      });\n\n  this.installKeyboard();\n  this.command.run();\n};\n\n/**\n * Returns true if the current screen is the primary screen, false otherwise.\n */\nhterm.Terminal.prototype.isPrimaryScreen = function() {\n  return this.screen_ == this.primaryScreen_;\n};\n\n/**\n * Install the keyboard handler for this terminal.\n *\n * This will prevent the browser from seeing any keystrokes sent to the\n * terminal.\n */\nhterm.Terminal.prototype.installKeyboard = function() {\n  this.keyboard.installKeyboard(this.scrollPort_.getDocument().body);\n}\n\n/**\n * Uninstall the keyboard handler for this terminal.\n */\nhterm.Terminal.prototype.uninstallKeyboard = function() {\n  this.keyboard.installKeyboard(null);\n}\n\n/**\n * Set the font size for this terminal.\n *\n * Call setFontSize(0) to reset to the default font size.\n *\n * This function does not modify the font-size preference.\n *\n * @param {number} px The desired font size, in pixels.\n */\nhterm.Terminal.prototype.setFontSize = function(px) {\n  if (px === 0)\n    px = this.prefs_.get('font-size');\n\n  this.scrollPort_.setFontSize(px);\n  if (this.wcCssRule_) {\n    this.wcCssRule_.style.width = this.scrollPort_.characterSize.width * 2 +\n        'px';\n  }\n};\n\n/**\n * Get the current font size.\n */\nhterm.Terminal.prototype.getFontSize = function() {\n  return this.scrollPort_.getFontSize();\n};\n\n/**\n * Get the current font family.\n */\nhterm.Terminal.prototype.getFontFamily = function() {\n  return this.scrollPort_.getFontFamily();\n};\n\n/**\n * Set the CSS \"font-family\" for this terminal.\n */\nhterm.Terminal.prototype.syncFontFamily = function() {\n  this.scrollPort_.setFontFamily(this.prefs_.get('font-family'),\n                                 this.prefs_.get('font-smoothing'));\n  this.syncBoldSafeState();\n};\n\n/**\n * Set this.mousePasteButton based on the mouse-paste-button pref,\n * autodetecting if necessary.\n */\nhterm.Terminal.prototype.syncMousePasteButton = function() {\n  var button = this.prefs_.get('mouse-paste-button');\n  if (typeof button == 'number') {\n    this.mousePasteButton = button;\n    return;\n  }\n\n  var ary = navigator.userAgent.match(/\\(X11;\\s+(\\S+)/);\n  if (!ary || ary[2] == 'CrOS') {\n    this.mousePasteButton = 2;\n  } else {\n    this.mousePasteButton = 3;\n  }\n};\n\n/**\n * Enable or disable bold based on the enable-bold pref, autodetecting if\n * necessary.\n */\nhterm.Terminal.prototype.syncBoldSafeState = function() {\n  var enableBold = this.prefs_.get('enable-bold');\n  if (enableBold !== null) {\n    this.primaryScreen_.textAttributes.enableBold = enableBold;\n    this.alternateScreen_.textAttributes.enableBold = enableBold;\n    return;\n  }\n\n  var normalSize = this.scrollPort_.measureCharacterSize();\n  var boldSize = this.scrollPort_.measureCharacterSize('bold');\n\n  var isBoldSafe = normalSize.equals(boldSize);\n  if (!isBoldSafe) {\n    console.warn('Bold characters disabled: Size of bold weight differs ' +\n                 'from normal.  Font family is: ' +\n                 this.scrollPort_.getFontFamily());\n  }\n\n  this.primaryScreen_.textAttributes.enableBold = isBoldSafe;\n  this.alternateScreen_.textAttributes.enableBold = isBoldSafe;\n};\n\n/**\n * Return a copy of the current cursor position.\n *\n * @return {hterm.RowCol} The RowCol object representing the current position.\n */\nhterm.Terminal.prototype.saveCursor = function() {\n  return this.screen_.cursorPosition.clone();\n};\n\nhterm.Terminal.prototype.getTextAttributes = function() {\n  return this.screen_.textAttributes;\n};\n\nhterm.Terminal.prototype.setTextAttributes = function(textAttributes) {\n  this.screen_.textAttributes = textAttributes;\n};\n\n/**\n * Return the current browser zoom factor applied to the terminal.\n *\n * @return {number} The current browser zoom factor.\n */\nhterm.Terminal.prototype.getZoomFactor = function() {\n  return this.scrollPort_.characterSize.zoomFactor;\n};\n\n/**\n * Change the title of this terminal's window.\n */\nhterm.Terminal.prototype.setWindowTitle = function(title) {\n  window.document.title = title;\n};\n\n/**\n * Restore a previously saved cursor position.\n *\n * @param {hterm.RowCol} cursor The position to restore.\n */\nhterm.Terminal.prototype.restoreCursor = function(cursor) {\n  var row = lib.f.clamp(cursor.row, 0, this.screenSize.height - 1);\n  var column = lib.f.clamp(cursor.column, 0, this.screenSize.width - 1);\n  this.screen_.setCursorPosition(row, column);\n  if (cursor.column > column ||\n      cursor.column == column && cursor.overflow) {\n    this.screen_.cursorPosition.overflow = true;\n  }\n};\n\n/**\n * Clear the cursor's overflow flag.\n */\nhterm.Terminal.prototype.clearCursorOverflow = function() {\n  this.screen_.cursorPosition.overflow = false;\n};\n\n/**\n * Sets the cursor shape\n */\nhterm.Terminal.prototype.setCursorShape = function(shape) {\n  this.cursorShape_ = shape;\n  this.restyleCursor_();\n}\n\n/**\n * Get the cursor shape\n */\nhterm.Terminal.prototype.getCursorShape = function() {\n  return this.cursorShape_;\n}\n\n/**\n * Set the width of the terminal, resizing the UI to match.\n */\nhterm.Terminal.prototype.setWidth = function(columnCount) {\n  if (columnCount == null) {\n    this.div_.style.width = '100%';\n    return;\n  }\n\n  this.div_.style.width = Math.ceil(\n      this.scrollPort_.characterSize.width *\n      columnCount + this.scrollPort_.currentScrollbarWidthPx) + 'px';\n  this.realizeSize_(columnCount, this.screenSize.height);\n  this.scheduleSyncCursorPosition_();\n};\n\n/**\n * Set the height of the terminal, resizing the UI to match.\n */\nhterm.Terminal.prototype.setHeight = function(rowCount) {\n  if (rowCount == null) {\n    this.div_.style.height = '100%';\n    return;\n  }\n\n  this.div_.style.height =\n      this.scrollPort_.characterSize.height * rowCount + 'px';\n  this.realizeSize_(this.screenSize.width, rowCount);\n  this.scheduleSyncCursorPosition_();\n};\n\n/**\n * Deal with terminal size changes.\n *\n */\nhterm.Terminal.prototype.realizeSize_ = function(columnCount, rowCount) {\n  if (columnCount != this.screenSize.width)\n    this.realizeWidth_(columnCount);\n\n  if (rowCount != this.screenSize.height)\n    this.realizeHeight_(rowCount);\n\n  // Send new terminal size to plugin.\n  this.io.onTerminalResize_(columnCount, rowCount);\n};\n\n/**\n * Deal with terminal width changes.\n *\n * This function does what needs to be done when the terminal width changes\n * out from under us.  It happens here rather than in onResize_() because this\n * code may need to run synchronously to handle programmatic changes of\n * terminal width.\n *\n * Relying on the browser to send us an async resize event means we may not be\n * in the correct state yet when the next escape sequence hits.\n */\nhterm.Terminal.prototype.realizeWidth_ = function(columnCount) {\n  if (columnCount <= 0)\n    throw new Error('Attempt to realize bad width: ' + columnCount);\n\n  var deltaColumns = columnCount - this.screen_.getWidth();\n\n  this.screenSize.width = columnCount;\n  this.screen_.setColumnCount(columnCount);\n\n  if (deltaColumns > 0) {\n    if (this.defaultTabStops)\n      this.setDefaultTabStops(this.screenSize.width - deltaColumns);\n  } else {\n    for (var i = this.tabStops_.length - 1; i >= 0; i--) {\n      if (this.tabStops_[i] < columnCount)\n        break;\n\n      this.tabStops_.pop();\n    }\n  }\n\n  this.screen_.setColumnCount(this.screenSize.width);\n};\n\n/**\n * Deal with terminal height changes.\n *\n * This function does what needs to be done when the terminal height changes\n * out from under us.  It happens here rather than in onResize_() because this\n * code may need to run synchronously to handle programmatic changes of\n * terminal height.\n *\n * Relying on the browser to send us an async resize event means we may not be\n * in the correct state yet when the next escape sequence hits.\n */\nhterm.Terminal.prototype.realizeHeight_ = function(rowCount) {\n  if (rowCount <= 0)\n    throw new Error('Attempt to realize bad height: ' + rowCount);\n\n  var deltaRows = rowCount - this.screen_.getHeight();\n\n  this.screenSize.height = rowCount;\n\n  var cursor = this.saveCursor();\n\n  if (deltaRows < 0) {\n    // Screen got smaller.\n    deltaRows *= -1;\n    while (deltaRows) {\n      var lastRow = this.getRowCount() - 1;\n      if (lastRow - this.scrollbackRows_.length == cursor.row)\n        break;\n\n      if (this.getRowText(lastRow))\n        break;\n\n      this.screen_.popRow();\n      deltaRows--;\n    }\n\n    var ary = this.screen_.shiftRows(deltaRows);\n    this.scrollbackRows_.push.apply(this.scrollbackRows_, ary);\n\n    // We just removed rows from the top of the screen, we need to update\n    // the cursor to match.\n    cursor.row = Math.max(cursor.row - deltaRows, 0);\n  } else if (deltaRows > 0) {\n    // Screen got larger.\n\n    if (deltaRows <= this.scrollbackRows_.length) {\n      var scrollbackCount = Math.min(deltaRows, this.scrollbackRows_.length);\n      var rows = this.scrollbackRows_.splice(\n          this.scrollbackRows_.length - scrollbackCount, scrollbackCount);\n      this.screen_.unshiftRows(rows);\n      deltaRows -= scrollbackCount;\n      cursor.row += scrollbackCount;\n    }\n\n    if (deltaRows)\n      this.appendRows_(deltaRows);\n  }\n\n  this.setVTScrollRegion(null, null);\n  this.restoreCursor(cursor);\n};\n\n/**\n * Scroll the terminal to the top of the scrollback buffer.\n */\nhterm.Terminal.prototype.scrollHome = function() {\n  this.scrollPort_.scrollRowToTop(0);\n};\n\n/**\n * Scroll the terminal to the end.\n */\nhterm.Terminal.prototype.scrollEnd = function() {\n  this.scrollPort_.scrollRowToBottom(this.getRowCount());\n};\n\n/**\n * Scroll the terminal one page up (minus one line) relative to the current\n * position.\n */\nhterm.Terminal.prototype.scrollPageUp = function() {\n  var i = this.scrollPort_.getTopRowIndex();\n  this.scrollPort_.scrollRowToTop(i - this.screenSize.height + 1);\n};\n\n/**\n * Scroll the terminal one page down (minus one line) relative to the current\n * position.\n */\nhterm.Terminal.prototype.scrollPageDown = function() {\n  var i = this.scrollPort_.getTopRowIndex();\n  this.scrollPort_.scrollRowToTop(i + this.screenSize.height - 1);\n};\n\n/**\n * Clear primary screen, secondary screen, and the scrollback buffer.\n */\nhterm.Terminal.prototype.wipeContents = function() {\n  this.scrollbackRows_.length = 0;\n  this.scrollPort_.resetCache();\n\n  [this.primaryScreen_, this.alternateScreen_].forEach(function(screen) {\n    var bottom = screen.getHeight();\n    if (bottom > 0) {\n      this.renumberRows_(0, bottom);\n      this.clearHome(screen);\n    }\n  }.bind(this));\n\n  this.syncCursorPosition_();\n  this.scrollPort_.invalidate();\n};\n\n/**\n * Full terminal reset.\n */\nhterm.Terminal.prototype.reset = function() {\n  this.clearAllTabStops();\n  this.setDefaultTabStops();\n\n  this.clearHome(this.primaryScreen_);\n  this.primaryScreen_.textAttributes.reset();\n\n  this.clearHome(this.alternateScreen_);\n  this.alternateScreen_.textAttributes.reset();\n\n  this.setCursorBlink(!!this.prefs_.get('cursor-blink'));\n\n  this.vt.reset();\n\n  this.softReset();\n};\n\n/**\n * Soft terminal reset.\n *\n * Perform a soft reset to the default values listed in\n * http://www.vt100.net/docs/vt510-rm/DECSTR#T5-9\n */\nhterm.Terminal.prototype.softReset = function() {\n  // Reset terminal options to their default values.\n  this.options_ = new hterm.Options();\n\n  // We show the cursor on soft reset but do not alter the blink state.\n  this.options_.cursorBlink = !!this.timeouts_.cursorBlink;\n\n  // Xterm also resets the color palette on soft reset, even though it doesn't\n  // seem to be documented anywhere.\n  this.primaryScreen_.textAttributes.resetColorPalette();\n  this.alternateScreen_.textAttributes.resetColorPalette();\n\n  // The xterm man page explicitly says this will happen on soft reset.\n  this.setVTScrollRegion(null, null);\n\n  // Xterm also shows the cursor on soft reset, but does not alter the blink\n  // state.\n  this.setCursorVisible(true);\n};\n\n/**\n * Move the cursor forward to the next tab stop, or to the last column\n * if no more tab stops are set.\n */\nhterm.Terminal.prototype.forwardTabStop = function() {\n  var column = this.screen_.cursorPosition.column;\n\n  for (var i = 0; i < this.tabStops_.length; i++) {\n    if (this.tabStops_[i] > column) {\n      this.setCursorColumn(this.tabStops_[i]);\n      return;\n    }\n  }\n\n  // xterm does not clear the overflow flag on HT or CHT.\n  var overflow = this.screen_.cursorPosition.overflow;\n  this.setCursorColumn(this.screenSize.width - 1);\n  this.screen_.cursorPosition.overflow = overflow;\n};\n\n/**\n * Move the cursor backward to the previous tab stop, or to the first column\n * if no previous tab stops are set.\n */\nhterm.Terminal.prototype.backwardTabStop = function() {\n  var column = this.screen_.cursorPosition.column;\n\n  for (var i = this.tabStops_.length - 1; i >= 0; i--) {\n    if (this.tabStops_[i] < column) {\n      this.setCursorColumn(this.tabStops_[i]);\n      return;\n    }\n  }\n\n  this.setCursorColumn(1);\n};\n\n/**\n * Set a tab stop at the given column.\n *\n * @param {int} column Zero based column.\n */\nhterm.Terminal.prototype.setTabStop = function(column) {\n  for (var i = this.tabStops_.length - 1; i >= 0; i--) {\n    if (this.tabStops_[i] == column)\n      return;\n\n    if (this.tabStops_[i] < column) {\n      this.tabStops_.splice(i + 1, 0, column);\n      return;\n    }\n  }\n\n  this.tabStops_.splice(0, 0, column);\n};\n\n/**\n * Clear the tab stop at the current cursor position.\n *\n * No effect if there is no tab stop at the current cursor position.\n */\nhterm.Terminal.prototype.clearTabStopAtCursor = function() {\n  var column = this.screen_.cursorPosition.column;\n\n  var i = this.tabStops_.indexOf(column);\n  if (i == -1)\n    return;\n\n  this.tabStops_.splice(i, 1);\n};\n\n/**\n * Clear all tab stops.\n */\nhterm.Terminal.prototype.clearAllTabStops = function() {\n  this.tabStops_.length = 0;\n  this.defaultTabStops = false;\n};\n\n/**\n * Set up the default tab stops, starting from a given column.\n *\n * This sets a tabstop every (column % this.tabWidth) column, starting\n * from the specified column, or 0 if no column is provided.  It also flags\n * future resizes to set them up.\n *\n * This does not clear the existing tab stops first, use clearAllTabStops\n * for that.\n *\n * @param {int} opt_start Optional starting zero based starting column, useful\n *     for filling out missing tab stops when the terminal is resized.\n */\nhterm.Terminal.prototype.setDefaultTabStops = function(opt_start) {\n  var start = opt_start || 0;\n  var w = this.tabWidth;\n  // Round start up to a default tab stop.\n  start = start - 1 - ((start - 1) % w) + w;\n  for (var i = start; i < this.screenSize.width; i += w) {\n    this.setTabStop(i);\n  }\n\n  this.defaultTabStops = true;\n};\n\n/**\n * Interpret a sequence of characters.\n *\n * Incomplete escape sequences are buffered until the next call.\n *\n * @param {string} str Sequence of characters to interpret or pass through.\n */\nhterm.Terminal.prototype.interpret = function(str) {\n  this.vt.interpret(str);\n  this.scheduleSyncCursorPosition_();\n};\n\n/**\n * Take over the given DIV for use as the terminal display.\n *\n * @param {HTMLDivElement} div The div to use as the terminal display.\n */\nhterm.Terminal.prototype.decorate = function(div) {\n  this.div_ = div;\n\n  this.scrollPort_.decorate(div);\n  this.scrollPort_.setBackgroundImage(this.prefs_.get('background-image'));\n  this.scrollPort_.setBackgroundSize(this.prefs_.get('background-size'));\n  this.scrollPort_.setBackgroundPosition(\n      this.prefs_.get('background-position'));\n  this.scrollPort_.setUserCss(this.prefs_.get('user-css'));\n\n  this.div_.focus = this.focus.bind(this);\n\n  this.setFontSize(this.prefs_.get('font-size'));\n  this.syncFontFamily();\n\n  this.setScrollbarVisible(this.prefs_.get('scrollbar-visible'));\n  this.setScrollWheelMoveMultipler(\n      this.prefs_.get('scroll-wheel-move-multiplier'));\n\n  this.document_ = this.scrollPort_.getDocument();\n\n  this.document_.body.oncontextmenu = function() { return false };\n\n  var onMouse = this.onMouse_.bind(this);\n  var screenNode = this.scrollPort_.getScreenNode();\n  screenNode.addEventListener('mousedown', onMouse);\n  screenNode.addEventListener('mouseup', onMouse);\n  screenNode.addEventListener('mousemove', onMouse);\n  this.scrollPort_.onScrollWheel = onMouse;\n\n  screenNode.addEventListener(\n      'focus', this.onFocusChange_.bind(this, true));\n  // Listen for mousedown events on the screenNode as in FF the focus\n  // events don't bubble.\n  screenNode.addEventListener('mousedown', function() {\n    setTimeout(this.onFocusChange_.bind(this, true));\n  }.bind(this));\n\n  screenNode.addEventListener(\n      'blur', this.onFocusChange_.bind(this, false));\n\n  var style = this.document_.createElement('style');\n  style.textContent =\n      ('.cursor-node[focus=\"false\"] {' +\n       '  box-sizing: border-box;' +\n       '  background-color: transparent !important;' +\n       '  border-width: 2px;' +\n       '  border-style: solid;' +\n       '}' +\n       '.wc-node {' +\n       '  display: inline-block;' +\n       '  text-align: center;' +\n       '  width: ' + this.scrollPort_.characterSize.width * 2 + 'px;' +\n       '}');\n  this.document_.head.appendChild(style);\n\n  var styleSheets = this.document_.styleSheets;\n  var cssRules = styleSheets[styleSheets.length - 1].cssRules;\n  this.wcCssRule_ = cssRules[cssRules.length - 1];\n\n  this.cursorNode_ = this.document_.createElement('div');\n  this.cursorNode_.className = 'cursor-node';\n  this.cursorNode_.style.cssText =\n      ('position: absolute;' +\n       'top: -99px;' +\n       'display: block;' +\n       'width: ' + this.scrollPort_.characterSize.width + 'px;' +\n       'height: ' + this.scrollPort_.characterSize.height + 'px;' +\n       '-webkit-transition: opacity, background-color 100ms linear;' +\n       '-moz-transition: opacity, background-color 100ms linear;');\n\n  this.setCursorColor(this.prefs_.get('cursor-color'));\n  this.setCursorBlink(!!this.prefs_.get('cursor-blink'));\n  this.restyleCursor_();\n\n  this.document_.body.appendChild(this.cursorNode_);\n\n  // When 'enableMouseDragScroll' is off we reposition this element directly\n  // under the mouse cursor after a click.  This makes Chrome associate\n  // subsequent mousemove events with the scroll-blocker.  Since the\n  // scroll-blocker is a peer (not a child) of the scrollport, the mousemove\n  // events do not cause the scrollport to scroll.\n  //\n  // It's a hack, but it's the cleanest way I could find.\n  this.scrollBlockerNode_ = this.document_.createElement('div');\n  this.scrollBlockerNode_.style.cssText =\n      ('position: absolute;' +\n       'top: -99px;' +\n       'display: block;' +\n       'width: 10px;' +\n       'height: 10px;');\n  this.document_.body.appendChild(this.scrollBlockerNode_);\n\n  var onMouse = this.onMouse_.bind(this);\n  this.scrollPort_.onScrollWheel = onMouse;\n  ['mousedown', 'mouseup', 'mousemove', 'click', 'dblclick',\n   ].forEach(function(event) {\n       this.scrollBlockerNode_.addEventListener(event, onMouse);\n       this.cursorNode_.addEventListener(event, onMouse);\n       this.document_.addEventListener(event, onMouse);\n     }.bind(this));\n\n  this.cursorNode_.addEventListener('mousedown', function() {\n      setTimeout(this.focus.bind(this));\n    }.bind(this));\n\n  this.setReverseVideo(false);\n\n  this.scrollPort_.focus();\n  this.scrollPort_.scheduleRedraw();\n};\n\n/**\n * Return the HTML document that contains the terminal DOM nodes.\n */\nhterm.Terminal.prototype.getDocument = function() {\n  return this.document_;\n};\n\n/**\n * Focus the terminal.\n */\nhterm.Terminal.prototype.focus = function() {\n  this.scrollPort_.focus();\n};\n\n/**\n * Return the HTML Element for a given row index.\n *\n * This is a method from the RowProvider interface.  The ScrollPort uses\n * it to fetch rows on demand as they are scrolled into view.\n *\n * TODO(rginda): Consider saving scrollback rows as (HTML source, text content)\n * pairs to conserve memory.\n *\n * @param {integer} index The zero-based row index, measured relative to the\n *     start of the scrollback buffer.  On-screen rows will always have the\n *     largest indicies.\n * @return {HTMLElement} The 'x-row' element containing for the requested row.\n */\nhterm.Terminal.prototype.getRowNode = function(index) {\n  if (index < this.scrollbackRows_.length)\n    return this.scrollbackRows_[index];\n\n  var screenIndex = index - this.scrollbackRows_.length;\n  return this.screen_.rowsArray[screenIndex];\n};\n\n/**\n * Return the text content for a given range of rows.\n *\n * This is a method from the RowProvider interface.  The ScrollPort uses\n * it to fetch text content on demand when the user attempts to copy their\n * selection to the clipboard.\n *\n * @param {integer} start The zero-based row index to start from, measured\n *     relative to the start of the scrollback buffer.  On-screen rows will\n *     always have the largest indicies.\n * @param {integer} end The zero-based row index to end on, measured\n *     relative to the start of the scrollback buffer.\n * @return {string} A single string containing the text value of the range of\n *     rows.  Lines will be newline delimited, with no trailing newline.\n */\nhterm.Terminal.prototype.getRowsText = function(start, end) {\n  var ary = [];\n  for (var i = start; i < end; i++) {\n    var node = this.getRowNode(i);\n    ary.push(node.textContent);\n    if (i < end - 1 && !node.getAttribute('line-overflow'))\n      ary.push('\\n');\n  }\n\n  return ary.join('');\n};\n\n/**\n * Return the text content for a given row.\n *\n * This is a method from the RowProvider interface.  The ScrollPort uses\n * it to fetch text content on demand when the user attempts to copy their\n * selection to the clipboard.\n *\n * @param {integer} index The zero-based row index to return, measured\n *     relative to the start of the scrollback buffer.  On-screen rows will\n *     always have the largest indicies.\n * @return {string} A string containing the text value of the selected row.\n */\nhterm.Terminal.prototype.getRowText = function(index) {\n  var node = this.getRowNode(index);\n  return node.textContent;\n};\n\n/**\n * Return the total number of rows in the addressable screen and in the\n * scrollback buffer of this terminal.\n *\n * This is a method from the RowProvider interface.  The ScrollPort uses\n * it to compute the size of the scrollbar.\n *\n * @return {integer} The number of rows in this terminal.\n */\nhterm.Terminal.prototype.getRowCount = function() {\n  return this.scrollbackRows_.length + this.screen_.rowsArray.length;\n};\n\n/**\n * Create DOM nodes for new rows and append them to the end of the terminal.\n *\n * This is the only correct way to add a new DOM node for a row.  Notice that\n * the new row is appended to the bottom of the list of rows, and does not\n * require renumbering (of the rowIndex property) of previous rows.\n *\n * If you think you want a new blank row somewhere in the middle of the\n * terminal, look into moveRows_().\n *\n * This method does not pay attention to vtScrollTop/Bottom, since you should\n * be using moveRows() in cases where they would matter.\n *\n * The cursor will be positioned at column 0 of the first inserted line.\n */\nhterm.Terminal.prototype.appendRows_ = function(count) {\n  var cursorRow = this.screen_.rowsArray.length;\n  var offset = this.scrollbackRows_.length + cursorRow;\n  for (var i = 0; i < count; i++) {\n    var row = this.document_.createElement('x-row');\n    row.appendChild(this.document_.createTextNode(''));\n    row.rowIndex = offset + i;\n    this.screen_.pushRow(row);\n  }\n\n  var extraRows = this.screen_.rowsArray.length - this.screenSize.height;\n  if (extraRows > 0) {\n    var ary = this.screen_.shiftRows(extraRows);\n    Array.prototype.push.apply(this.scrollbackRows_, ary);\n    if (this.scrollPort_.isScrolledEnd)\n      this.scheduleScrollDown_();\n  }\n\n  if (cursorRow >= this.screen_.rowsArray.length)\n    cursorRow = this.screen_.rowsArray.length - 1;\n\n  this.setAbsoluteCursorPosition(cursorRow, 0);\n};\n\n/**\n * Relocate rows from one part of the addressable screen to another.\n *\n * This is used to recycle rows during VT scrolls (those which are driven\n * by VT commands, rather than by the user manipulating the scrollbar.)\n *\n * In this case, the blank lines scrolled into the scroll region are made of\n * the nodes we scrolled off.  These have their rowIndex properties carefully\n * renumbered so as not to confuse the ScrollPort.\n */\nhterm.Terminal.prototype.moveRows_ = function(fromIndex, count, toIndex) {\n  var ary = this.screen_.removeRows(fromIndex, count);\n  this.screen_.insertRows(toIndex, ary);\n\n  var start, end;\n  if (fromIndex < toIndex) {\n    start = fromIndex;\n    end = toIndex + count;\n  } else {\n    start = toIndex;\n    end = fromIndex + count;\n  }\n\n  this.renumberRows_(start, end);\n  this.scrollPort_.scheduleInvalidate();\n};\n\n/**\n * Renumber the rowIndex property of the given range of rows.\n *\n * The start and end indicies are relative to the screen, not the scrollback.\n * Rows in the scrollback buffer cannot be renumbered.  Since they are not\n * addressable (you can't delete them, scroll them, etc), you should have\n * no need to renumber scrollback rows.\n */\nhterm.Terminal.prototype.renumberRows_ = function(start, end, opt_screen) {\n  var screen = opt_screen || this.screen_;\n\n  var offset = this.scrollbackRows_.length;\n  for (var i = start; i < end; i++) {\n    screen.rowsArray[i].rowIndex = offset + i;\n  }\n};\n\n/**\n * Print a string to the terminal.\n *\n * This respects the current insert and wraparound modes.  It will add new lines\n * to the end of the terminal, scrolling off the top into the scrollback buffer\n * if necessary.\n *\n * The string is *not* parsed for escape codes.  Use the interpret() method if\n * that's what you're after.\n *\n * @param{string} str The string to print.\n */\nhterm.Terminal.prototype.print = function(str) {\n  var startOffset = 0;\n\n  var strWidth = lib.wc.strWidth(str);\n\n  while (startOffset < strWidth) {\n    if (this.options_.wraparound && this.screen_.cursorPosition.overflow) {\n      this.screen_.commitLineOverflow();\n      this.newLine();\n    }\n\n    var count = strWidth - startOffset;\n    var didOverflow = false;\n    var substr;\n\n    if (this.screen_.cursorPosition.column + count >= this.screenSize.width) {\n      didOverflow = true;\n      count = this.screenSize.width - this.screen_.cursorPosition.column;\n    }\n\n    if (didOverflow && !this.options_.wraparound) {\n      // If the string overflowed the line but wraparound is off, then the\n      // last printed character should be the last of the string.\n      // TODO: This will add to our problems with multibyte UTF-16 characters.\n      substr = lib.wc.substr(str, startOffset, count - 1) +\n          lib.wc.substr(str, strWidth - 1);\n      count = strWidth;\n    } else {\n      substr = lib.wc.substr(str, startOffset, count);\n    }\n\n    var tokens = hterm.TextAttributes.splitWidecharString(substr);\n    for (var i = 0; i < tokens.length; i++) {\n      if (tokens[i].wcNode)\n        this.screen_.textAttributes.wcNode = true;\n\n      if (this.options_.insertMode) {\n          this.screen_.insertString(tokens[i].str);\n      } else {\n        this.screen_.overwriteString(tokens[i].str);\n      }\n      this.screen_.textAttributes.wcNode = false;\n    }\n\n    this.screen_.maybeClipCurrentRow();\n    startOffset += count;\n  }\n\n  this.scheduleSyncCursorPosition_();\n\n  if (this.scrollOnOutput_)\n    this.scrollPort_.scrollRowToBottom(this.getRowCount());\n};\n\n/**\n * Set the VT scroll region.\n *\n * This also resets the cursor position to the absolute (0, 0) position, since\n * that's what xterm appears to do.\n *\n * Setting the scroll region to the full height of the terminal will clear\n * the scroll region.  This is *NOT* what most terminals do.  We're explicitly\n * going \"off-spec\" here because it makes `screen` and `tmux` overflow into the\n * local scrollback buffer, which means the scrollbars and shift-pgup/pgdn\n * continue to work as most users would expect.\n *\n * @param {integer} scrollTop The zero-based top of the scroll region.\n * @param {integer} scrollBottom The zero-based bottom of the scroll region,\n *     inclusive.\n */\nhterm.Terminal.prototype.setVTScrollRegion = function(scrollTop, scrollBottom) {\n  if (scrollTop == 0 && scrollBottom == this.screenSize.height - 1) {\n    this.vtScrollTop_ = null;\n    this.vtScrollBottom_ = null;\n  } else {\n    this.vtScrollTop_ = scrollTop;\n    this.vtScrollBottom_ = scrollBottom;\n  }\n};\n\n/**\n * Return the top row index according to the VT.\n *\n * This will return 0 unless the terminal has been told to restrict scrolling\n * to some lower row.  It is used for some VT cursor positioning and scrolling\n * commands.\n *\n * @return {integer} The topmost row in the terminal's scroll region.\n */\nhterm.Terminal.prototype.getVTScrollTop = function() {\n  if (this.vtScrollTop_ != null)\n    return this.vtScrollTop_;\n\n  return 0;\n};\n\n/**\n * Return the bottom row index according to the VT.\n *\n * This will return the height of the terminal unless the it has been told to\n * restrict scrolling to some higher row.  It is used for some VT cursor\n * positioning and scrolling commands.\n *\n * @return {integer} The bottommost row in the terminal's scroll region.\n */\nhterm.Terminal.prototype.getVTScrollBottom = function() {\n  if (this.vtScrollBottom_ != null)\n    return this.vtScrollBottom_;\n\n  return this.screenSize.height - 1;\n}\n\n/**\n * Process a '\\n' character.\n *\n * If the cursor is on the final row of the terminal this will append a new\n * blank row to the screen and scroll the topmost row into the scrollback\n * buffer.\n *\n * Otherwise, this moves the cursor to column zero of the next row.\n */\nhterm.Terminal.prototype.newLine = function() {\n  var cursorAtEndOfScreen = (this.screen_.cursorPosition.row ==\n                             this.screen_.rowsArray.length - 1);\n\n  if (this.vtScrollBottom_ != null) {\n    // A VT Scroll region is active, we never append new rows.\n    if (this.screen_.cursorPosition.row == this.vtScrollBottom_) {\n      // We're at the end of the VT Scroll Region, perform a VT scroll.\n      this.vtScrollUp(1);\n      this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row, 0);\n    } else if (cursorAtEndOfScreen) {\n      // We're at the end of the screen, the only thing to do is put the\n      // cursor to column 0.\n      this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row, 0);\n    } else {\n      // Anywhere else, advance the cursor row, and reset the column.\n      this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row + 1, 0);\n    }\n  } else if (cursorAtEndOfScreen) {\n    // We're at the end of the screen.  Append a new row to the terminal,\n    // shifting the top row into the scrollback.\n    this.appendRows_(1);\n  } else {\n    // Anywhere else in the screen just moves the cursor.\n    this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row + 1, 0);\n  }\n};\n\n/**\n * Like newLine(), except maintain the cursor column.\n */\nhterm.Terminal.prototype.lineFeed = function() {\n  var column = this.screen_.cursorPosition.column;\n  this.newLine();\n  this.setCursorColumn(column);\n};\n\n/**\n * If autoCarriageReturn is set then newLine(), else lineFeed().\n */\nhterm.Terminal.prototype.formFeed = function() {\n  if (this.options_.autoCarriageReturn) {\n    this.newLine();\n  } else {\n    this.lineFeed();\n  }\n};\n\n/**\n * Move the cursor up one row, possibly inserting a blank line.\n *\n * The cursor column is not changed.\n */\nhterm.Terminal.prototype.reverseLineFeed = function() {\n  var scrollTop = this.getVTScrollTop();\n  var currentRow = this.screen_.cursorPosition.row;\n\n  if (currentRow == scrollTop) {\n    this.insertLines(1);\n  } else {\n    this.setAbsoluteCursorRow(currentRow - 1);\n  }\n};\n\n/**\n * Replace all characters to the left of the current cursor with the space\n * character.\n *\n * TODO(rginda): This should probably *remove* the characters (not just replace\n * with a space) if there are no characters at or beyond the current cursor\n * position.\n */\nhterm.Terminal.prototype.eraseToLeft = function() {\n  var cursor = this.saveCursor();\n  this.setCursorColumn(0);\n  this.screen_.overwriteString(lib.f.getWhitespace(cursor.column + 1));\n  this.restoreCursor(cursor);\n};\n\n/**\n * Erase a given number of characters to the right of the cursor.\n *\n * The cursor position is unchanged.\n *\n * If the current background color is not the default background color this\n * will insert spaces rather than delete.  This is unfortunate because the\n * trailing space will affect text selection, but it's difficult to come up\n * with a way to style empty space that wouldn't trip up the hterm.Screen\n * code.\n *\n * eraseToRight is ignored in the presence of a cursor overflow.  This deviates\n * from xterm, but agrees with gnome-terminal and konsole, xfce4-terminal.  See\n * crbug.com/232390 for details.\n */\nhterm.Terminal.prototype.eraseToRight = function(opt_count) {\n  if (this.screen_.cursorPosition.overflow)\n    return;\n\n  var maxCount = this.screenSize.width - this.screen_.cursorPosition.column;\n  var count = opt_count ? Math.min(opt_count, maxCount) : maxCount;\n\n  if (this.screen_.textAttributes.background ===\n      this.screen_.textAttributes.DEFAULT_COLOR) {\n    var cursorRow = this.screen_.rowsArray[this.screen_.cursorPosition.row];\n    if (hterm.TextAttributes.nodeWidth(cursorRow) <=\n        this.screen_.cursorPosition.column + count) {\n      this.screen_.deleteChars(count);\n      this.clearCursorOverflow();\n      return;\n    }\n  }\n\n  var cursor = this.saveCursor();\n  this.screen_.overwriteString(lib.f.getWhitespace(count));\n  this.restoreCursor(cursor);\n  this.clearCursorOverflow();\n};\n\n/**\n * Erase the current line.\n *\n * The cursor position is unchanged.\n */\nhterm.Terminal.prototype.eraseLine = function() {\n  var cursor = this.saveCursor();\n  this.screen_.clearCursorRow();\n  this.restoreCursor(cursor);\n  this.clearCursorOverflow();\n};\n\n/**\n * Erase all characters from the start of the screen to the current cursor\n * position, regardless of scroll region.\n *\n * The cursor position is unchanged.\n */\nhterm.Terminal.prototype.eraseAbove = function() {\n  var cursor = this.saveCursor();\n\n  this.eraseToLeft();\n\n  for (var i = 0; i < cursor.row; i++) {\n    this.setAbsoluteCursorPosition(i, 0);\n    this.screen_.clearCursorRow();\n  }\n\n  this.restoreCursor(cursor);\n  this.clearCursorOverflow();\n};\n\n/**\n * Erase all characters from the current cursor position to the end of the\n * screen, regardless of scroll region.\n *\n * The cursor position is unchanged.\n */\nhterm.Terminal.prototype.eraseBelow = function() {\n  var cursor = this.saveCursor();\n\n  this.eraseToRight();\n\n  var bottom = this.screenSize.height - 1;\n  for (var i = cursor.row + 1; i <= bottom; i++) {\n    this.setAbsoluteCursorPosition(i, 0);\n    this.screen_.clearCursorRow();\n  }\n\n  this.restoreCursor(cursor);\n  this.clearCursorOverflow();\n};\n\n/**\n * Fill the terminal with a given character.\n *\n * This methods does not respect the VT scroll region.\n *\n * @param {string} ch The character to use for the fill.\n */\nhterm.Terminal.prototype.fill = function(ch) {\n  var cursor = this.saveCursor();\n\n  this.setAbsoluteCursorPosition(0, 0);\n  for (var row = 0; row < this.screenSize.height; row++) {\n    for (var col = 0; col < this.screenSize.width; col++) {\n      this.setAbsoluteCursorPosition(row, col);\n      this.screen_.overwriteString(ch);\n    }\n  }\n\n  this.restoreCursor(cursor);\n};\n\n/**\n * Erase the entire display and leave the cursor at (0, 0).\n *\n * This does not respect the scroll region.\n *\n * @param {hterm.Screen} opt_screen Optional screen to operate on.  Defaults\n *     to the current screen.\n */\nhterm.Terminal.prototype.clearHome = function(opt_screen) {\n  var screen = opt_screen || this.screen_;\n  var bottom = screen.getHeight();\n\n  if (bottom == 0) {\n    // Empty screen, nothing to do.\n    return;\n  }\n\n  for (var i = 0; i < bottom; i++) {\n    screen.setCursorPosition(i, 0);\n    screen.clearCursorRow();\n  }\n\n  screen.setCursorPosition(0, 0);\n};\n\n/**\n * Erase the entire display without changing the cursor position.\n *\n * The cursor position is unchanged.  This does not respect the scroll\n * region.\n *\n * @param {hterm.Screen} opt_screen Optional screen to operate on.  Defaults\n *     to the current screen.\n */\nhterm.Terminal.prototype.clear = function(opt_screen) {\n  var screen = opt_screen || this.screen_;\n  var cursor = screen.cursorPosition.clone();\n  this.clearHome(screen);\n  screen.setCursorPosition(cursor.row, cursor.column);\n};\n\n/**\n * VT command to insert lines at the current cursor row.\n *\n * This respects the current scroll region.  Rows pushed off the bottom are\n * lost (they won't show up in the scrollback buffer).\n *\n * @param {integer} count The number of lines to insert.\n */\nhterm.Terminal.prototype.insertLines = function(count) {\n  var cursorRow = this.screen_.cursorPosition.row;\n\n  var bottom = this.getVTScrollBottom();\n  count = Math.min(count, bottom - cursorRow);\n\n  // The moveCount is the number of rows we need to relocate to make room for\n  // the new row(s).  The count is the distance to move them.\n  var moveCount = bottom - cursorRow - count + 1;\n  if (moveCount)\n    this.moveRows_(cursorRow, moveCount, cursorRow + count);\n\n  for (var i = count - 1; i >= 0; i--) {\n    this.setAbsoluteCursorPosition(cursorRow + i, 0);\n    this.screen_.clearCursorRow();\n  }\n};\n\n/**\n * VT command to delete lines at the current cursor row.\n *\n * New rows are added to the bottom of scroll region to take their place.  New\n * rows are strictly there to take up space and have no content or style.\n */\nhterm.Terminal.prototype.deleteLines = function(count) {\n  var cursor = this.saveCursor();\n\n  var top = cursor.row;\n  var bottom = this.getVTScrollBottom();\n\n  var maxCount = bottom - top + 1;\n  count = Math.min(count, maxCount);\n\n  var moveStart = bottom - count + 1;\n  if (count != maxCount)\n    this.moveRows_(top, count, moveStart);\n\n  for (var i = 0; i < count; i++) {\n    this.setAbsoluteCursorPosition(moveStart + i, 0);\n    this.screen_.clearCursorRow();\n  }\n\n  this.restoreCursor(cursor);\n  this.clearCursorOverflow();\n};\n\n/**\n * Inserts the given number of spaces at the current cursor position.\n *\n * The cursor position is not changed.\n */\nhterm.Terminal.prototype.insertSpace = function(count) {\n  var cursor = this.saveCursor();\n\n  var ws = lib.f.getWhitespace(count || 1);\n  this.screen_.insertString(ws);\n  this.screen_.maybeClipCurrentRow();\n\n  this.restoreCursor(cursor);\n  this.clearCursorOverflow();\n};\n\n/**\n * Forward-delete the specified number of characters starting at the cursor\n * position.\n *\n * @param {integer} count The number of characters to delete.\n */\nhterm.Terminal.prototype.deleteChars = function(count) {\n  var deleted = this.screen_.deleteChars(count);\n  if (deleted && !this.screen_.textAttributes.isDefault()) {\n    var cursor = this.saveCursor();\n    this.setCursorColumn(this.screenSize.width - deleted);\n    this.screen_.insertString(lib.f.getWhitespace(deleted));\n    this.restoreCursor(cursor);\n  }\n\n  this.clearCursorOverflow();\n};\n\n/**\n * Shift rows in the scroll region upwards by a given number of lines.\n *\n * New rows are inserted at the bottom of the scroll region to fill the\n * vacated rows.  The new rows not filled out with the current text attributes.\n *\n * This function does not affect the scrollback rows at all.  Rows shifted\n * off the top are lost.\n *\n * The cursor position is not altered.\n *\n * @param {integer} count The number of rows to scroll.\n */\nhterm.Terminal.prototype.vtScrollUp = function(count) {\n  var cursor = this.saveCursor();\n\n  this.setAbsoluteCursorRow(this.getVTScrollTop());\n  this.deleteLines(count);\n\n  this.restoreCursor(cursor);\n};\n\n/**\n * Shift rows below the cursor down by a given number of lines.\n *\n * This function respects the current scroll region.\n *\n * New rows are inserted at the top of the scroll region to fill the\n * vacated rows.  The new rows not filled out with the current text attributes.\n *\n * This function does not affect the scrollback rows at all.  Rows shifted\n * off the bottom are lost.\n *\n * @param {integer} count The number of rows to scroll.\n */\nhterm.Terminal.prototype.vtScrollDown = function(opt_count) {\n  var cursor = this.saveCursor();\n\n  this.setAbsoluteCursorPosition(this.getVTScrollTop(), 0);\n  this.insertLines(opt_count);\n\n  this.restoreCursor(cursor);\n};\n\n\n/**\n * Set the cursor position.\n *\n * The cursor row is relative to the scroll region if the terminal has\n * 'origin mode' enabled, or relative to the addressable screen otherwise.\n *\n * @param {integer} row The new zero-based cursor row.\n * @param {integer} row The new zero-based cursor column.\n */\nhterm.Terminal.prototype.setCursorPosition = function(row, column) {\n  if (this.options_.originMode) {\n    this.setRelativeCursorPosition(row, column);\n  } else {\n    this.setAbsoluteCursorPosition(row, column);\n  }\n};\n\nhterm.Terminal.prototype.setRelativeCursorPosition = function(row, column) {\n  var scrollTop = this.getVTScrollTop();\n  row = lib.f.clamp(row + scrollTop, scrollTop, this.getVTScrollBottom());\n  column = lib.f.clamp(column, 0, this.screenSize.width - 1);\n  this.screen_.setCursorPosition(row, column);\n};\n\nhterm.Terminal.prototype.setAbsoluteCursorPosition = function(row, column) {\n  row = lib.f.clamp(row, 0, this.screenSize.height - 1);\n  column = lib.f.clamp(column, 0, this.screenSize.width - 1);\n  this.screen_.setCursorPosition(row, column);\n};\n\n/**\n * Set the cursor column.\n *\n * @param {integer} column The new zero-based cursor column.\n */\nhterm.Terminal.prototype.setCursorColumn = function(column) {\n  this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row, column);\n};\n\n/**\n * Return the cursor column.\n *\n * @return {integer} The zero-based cursor column.\n */\nhterm.Terminal.prototype.getCursorColumn = function() {\n  return this.screen_.cursorPosition.column;\n};\n\n/**\n * Set the cursor row.\n *\n * The cursor row is relative to the scroll region if the terminal has\n * 'origin mode' enabled, or relative to the addressable screen otherwise.\n *\n * @param {integer} row The new cursor row.\n */\nhterm.Terminal.prototype.setAbsoluteCursorRow = function(row) {\n  this.setAbsoluteCursorPosition(row, this.screen_.cursorPosition.column);\n};\n\n/**\n * Return the cursor row.\n *\n * @return {integer} The zero-based cursor row.\n */\nhterm.Terminal.prototype.getCursorRow = function(row) {\n  return this.screen_.cursorPosition.row;\n};\n\n/**\n * Request that the ScrollPort redraw itself soon.\n *\n * The redraw will happen asynchronously, soon after the call stack winds down.\n * Multiple calls will be coalesced into a single redraw.\n */\nhterm.Terminal.prototype.scheduleRedraw_ = function() {\n  if (this.timeouts_.redraw)\n    return;\n\n  var self = this;\n  this.timeouts_.redraw = setTimeout(function() {\n      delete self.timeouts_.redraw;\n      self.scrollPort_.redraw_();\n    }, 0);\n};\n\n/**\n * Request that the ScrollPort be scrolled to the bottom.\n *\n * The scroll will happen asynchronously, soon after the call stack winds down.\n * Multiple calls will be coalesced into a single scroll.\n *\n * This affects the scrollbar position of the ScrollPort, and has nothing to\n * do with the VT scroll commands.\n */\nhterm.Terminal.prototype.scheduleScrollDown_ = function() {\n  if (this.timeouts_.scrollDown)\n    return;\n\n  var self = this;\n  this.timeouts_.scrollDown = setTimeout(function() {\n      delete self.timeouts_.scrollDown;\n      self.scrollPort_.scrollRowToBottom(self.getRowCount());\n    }, 10);\n};\n\n/**\n * Move the cursor up a specified number of rows.\n *\n * @param {integer} count The number of rows to move the cursor.\n */\nhterm.Terminal.prototype.cursorUp = function(count) {\n  return this.cursorDown(-(count || 1));\n};\n\n/**\n * Move the cursor down a specified number of rows.\n *\n * @param {integer} count The number of rows to move the cursor.\n */\nhterm.Terminal.prototype.cursorDown = function(count) {\n  count = count || 1;\n  var minHeight = (this.options_.originMode ? this.getVTScrollTop() : 0);\n  var maxHeight = (this.options_.originMode ? this.getVTScrollBottom() :\n                   this.screenSize.height - 1);\n\n  var row = lib.f.clamp(this.screen_.cursorPosition.row + count,\n                        minHeight, maxHeight);\n  this.setAbsoluteCursorRow(row);\n};\n\n/**\n * Move the cursor left a specified number of columns.\n *\n * If reverse wraparound mode is enabled and the previous row wrapped into\n * the current row then we back up through the wraparound as well.\n *\n * @param {integer} count The number of columns to move the cursor.\n */\nhterm.Terminal.prototype.cursorLeft = function(count) {\n  count = count || 1;\n\n  if (count < 1)\n    return;\n\n  var currentColumn = this.screen_.cursorPosition.column;\n  if (this.options_.reverseWraparound) {\n    if (this.screen_.cursorPosition.overflow) {\n      // If this cursor is in the right margin, consume one count to get it\n      // back to the last column.  This only applies when we're in reverse\n      // wraparound mode.\n      count--;\n      this.clearCursorOverflow();\n\n      if (!count)\n        return;\n    }\n\n    var newRow = this.screen_.cursorPosition.row;\n    var newColumn = currentColumn - count;\n    if (newColumn < 0) {\n      newRow = newRow - Math.floor(count / this.screenSize.width) - 1;\n      if (newRow < 0) {\n        // xterm also wraps from row 0 to the last row.\n        newRow = this.screenSize.height + newRow % this.screenSize.height;\n      }\n      newColumn = this.screenSize.width + newColumn % this.screenSize.width;\n    }\n\n    this.setCursorPosition(Math.max(newRow, 0), newColumn);\n\n  } else {\n    var newColumn = Math.max(currentColumn - count, 0);\n    this.setCursorColumn(newColumn);\n  }\n};\n\n/**\n * Move the cursor right a specified number of columns.\n *\n * @param {integer} count The number of columns to move the cursor.\n */\nhterm.Terminal.prototype.cursorRight = function(count) {\n  count = count || 1;\n\n  if (count < 1)\n    return;\n\n  var column = lib.f.clamp(this.screen_.cursorPosition.column + count,\n                           0, this.screenSize.width - 1);\n  this.setCursorColumn(column);\n};\n\n/**\n * Reverse the foreground and background colors of the terminal.\n *\n * This only affects text that was drawn with no attributes.\n *\n * TODO(rginda): Test xterm to see if reverse is respected for text that has\n * been drawn with attributes that happen to coincide with the default\n * 'no-attribute' colors.  My guess is probably not.\n */\nhterm.Terminal.prototype.setReverseVideo = function(state) {\n  this.options_.reverseVideo = state;\n  if (state) {\n    this.scrollPort_.setForegroundColor(this.prefs_.get('background-color'));\n    this.scrollPort_.setBackgroundColor(this.prefs_.get('foreground-color'));\n  } else {\n    this.scrollPort_.setForegroundColor(this.prefs_.get('foreground-color'));\n    this.scrollPort_.setBackgroundColor(this.prefs_.get('background-color'));\n  }\n};\n\n/**\n * Ring the terminal bell.\n *\n * This will not play the bell audio more than once per second.\n */\nhterm.Terminal.prototype.ringBell = function() {\n  this.cursorNode_.style.backgroundColor =\n      this.scrollPort_.getForegroundColor();\n\n  var self = this;\n  setTimeout(function() {\n      self.cursorNode_.style.backgroundColor = self.prefs_.get('cursor-color');\n    }, 200);\n\n  // bellSquelchTimeout_ affects both audio and notification bells.\n  if (this.bellSquelchTimeout_)\n    return;\n\n  if (this.bellAudio_.getAttribute('src')) {\n    this.bellAudio_.play();\n    this.bellSequelchTimeout_ = setTimeout(function() {\n        delete this.bellSquelchTimeout_;\n      }.bind(this), 500);\n  } else {\n    delete this.bellSquelchTimeout_;\n  }\n\n  if (this.desktopNotificationBell_ && !this.document_.hasFocus()) {\n    var n = new Notification(\n        lib.f.replaceVars(hterm.desktopNotificationTitle,\n                          {'title': window.document.title || 'hterm'}));\n    this.bellNotificationList_.push(n);\n    // TODO: Should we try to raise the window here?\n    n.onclick = function() { self.closeBellNotifications_(); };\n  }\n};\n\n/**\n * Set the origin mode bit.\n *\n * If origin mode is on, certain VT cursor and scrolling commands measure their\n * row parameter relative to the VT scroll region.  Otherwise, row 0 corresponds\n * to the top of the addressable screen.\n *\n * Defaults to off.\n *\n * @param {boolean} state True to set origin mode, false to unset.\n */\nhterm.Terminal.prototype.setOriginMode = function(state) {\n  this.options_.originMode = state;\n  this.setCursorPosition(0, 0);\n};\n\n/**\n * Set the insert mode bit.\n *\n * If insert mode is on, existing text beyond the cursor position will be\n * shifted right to make room for new text.  Otherwise, new text overwrites\n * any existing text.\n *\n * Defaults to off.\n *\n * @param {boolean} state True to set insert mode, false to unset.\n */\nhterm.Terminal.prototype.setInsertMode = function(state) {\n  this.options_.insertMode = state;\n};\n\n/**\n * Set the auto carriage return bit.\n *\n * If auto carriage return is on then a formfeed character is interpreted\n * as a newline, otherwise it's the same as a linefeed.  The difference boils\n * down to whether or not the cursor column is reset.\n */\nhterm.Terminal.prototype.setAutoCarriageReturn = function(state) {\n  this.options_.autoCarriageReturn = state;\n};\n\n/**\n * Set the wraparound mode bit.\n *\n * If wraparound mode is on, certain VT commands will allow the cursor to wrap\n * to the start of the following row.  Otherwise, the cursor is clamped to the\n * end of the screen and attempts to write past it are ignored.\n *\n * Defaults to on.\n *\n * @param {boolean} state True to set wraparound mode, false to unset.\n */\nhterm.Terminal.prototype.setWraparound = function(state) {\n  this.options_.wraparound = state;\n};\n\n/**\n * Set the reverse-wraparound mode bit.\n *\n * If wraparound mode is off, certain VT commands will allow the cursor to wrap\n * to the end of the previous row.  Otherwise, the cursor is clamped to column\n * 0.\n *\n * Defaults to off.\n *\n * @param {boolean} state True to set reverse-wraparound mode, false to unset.\n */\nhterm.Terminal.prototype.setReverseWraparound = function(state) {\n  this.options_.reverseWraparound = state;\n};\n\n/**\n * Selects between the primary and alternate screens.\n *\n * If alternate mode is on, the alternate screen is active.  Otherwise the\n * primary screen is active.\n *\n * Swapping screens has no effect on the scrollback buffer.\n *\n * Each screen maintains its own cursor position.\n *\n * Defaults to off.\n *\n * @param {boolean} state True to set alternate mode, false to unset.\n */\nhterm.Terminal.prototype.setAlternateMode = function(state) {\n  var cursor = this.saveCursor();\n  this.screen_ = state ? this.alternateScreen_ : this.primaryScreen_;\n\n  if (this.screen_.rowsArray.length &&\n      this.screen_.rowsArray[0].rowIndex != this.scrollbackRows_.length) {\n    // If the screen changed sizes while we were away, our rowIndexes may\n    // be incorrect.\n    var offset = this.scrollbackRows_.length;\n    var ary = this.screen_.rowsArray;\n    for (var i = 0; i < ary.length; i++) {\n      ary[i].rowIndex = offset + i;\n    }\n  }\n\n  this.realizeWidth_(this.screenSize.width);\n  this.realizeHeight_(this.screenSize.height);\n  this.scrollPort_.syncScrollHeight();\n  this.scrollPort_.invalidate();\n\n  this.restoreCursor(cursor);\n  this.scrollPort_.resize();\n};\n\n/**\n * Set the cursor-blink mode bit.\n *\n * If cursor-blink is on, the cursor will blink when it is visible.  Otherwise\n * a visible cursor does not blink.\n *\n * You should make sure to turn blinking off if you're going to dispose of a\n * terminal, otherwise you'll leak a timeout.\n *\n * Defaults to on.\n *\n * @param {boolean} state True to set cursor-blink mode, false to unset.\n */\nhterm.Terminal.prototype.setCursorBlink = function(state) {\n  this.options_.cursorBlink = state;\n\n  if (!state && this.timeouts_.cursorBlink) {\n    clearTimeout(this.timeouts_.cursorBlink);\n    delete this.timeouts_.cursorBlink;\n  }\n\n  if (this.options_.cursorVisible)\n    this.setCursorVisible(true);\n};\n\n/**\n * Set the cursor-visible mode bit.\n *\n * If cursor-visible is on, the cursor will be visible.  Otherwise it will not.\n *\n * Defaults to on.\n *\n * @param {boolean} state True to set cursor-visible mode, false to unset.\n */\nhterm.Terminal.prototype.setCursorVisible = function(state) {\n  this.options_.cursorVisible = state;\n\n  if (!state) {\n    if (this.timeouts_.cursorBlink) {\n      clearTimeout(this.timeouts_.cursorBlink);\n      delete this.timeouts_.cursorBlink;\n    }\n    this.cursorNode_.style.opacity = '0';\n    return;\n  }\n\n  this.syncCursorPosition_();\n\n  this.cursorNode_.style.opacity = '1';\n\n  if (this.options_.cursorBlink) {\n    if (this.timeouts_.cursorBlink)\n      return;\n\n    this.onCursorBlink_();\n  } else {\n    if (this.timeouts_.cursorBlink) {\n      clearTimeout(this.timeouts_.cursorBlink);\n      delete this.timeouts_.cursorBlink;\n    }\n  }\n};\n\n/**\n * Synchronizes the visible cursor and document selection with the current\n * cursor coordinates.\n */\nhterm.Terminal.prototype.syncCursorPosition_ = function() {\n  var topRowIndex = this.scrollPort_.getTopRowIndex();\n  var bottomRowIndex = this.scrollPort_.getBottomRowIndex(topRowIndex);\n  var cursorRowIndex = this.scrollbackRows_.length +\n      this.screen_.cursorPosition.row;\n\n  if (cursorRowIndex > bottomRowIndex) {\n    // Cursor is scrolled off screen, move it outside of the visible area.\n    this.cursorNode_.style.top = -this.scrollPort_.characterSize.height + 'px';\n    return;\n  }\n\n  if (this.options_.cursorVisible &&\n      this.cursorNode_.style.display == 'none') {\n    // Re-display the terminal cursor if it was hidden by the mouse cursor.\n    this.cursorNode_.style.display = '';\n  }\n\n\n  this.cursorNode_.style.top = this.scrollPort_.visibleRowTopMargin +\n      this.scrollPort_.characterSize.height * (cursorRowIndex - topRowIndex) +\n      'px';\n  this.cursorNode_.style.left = this.scrollPort_.characterSize.width *\n      this.screen_.cursorPosition.column + 'px';\n\n  this.cursorNode_.setAttribute('title',\n                                '(' + this.screen_.cursorPosition.row +\n                                ', ' + this.screen_.cursorPosition.column +\n                                ')');\n\n  // Update the caret for a11y purposes.\n  var selection = this.document_.getSelection();\n  if (selection && selection.isCollapsed)\n    this.screen_.syncSelectionCaret(selection);\n};\n\n/**\n * Adjusts the style of this.cursorNode_ according to the current cursor shape\n * and character cell dimensions.\n */\nhterm.Terminal.prototype.restyleCursor_ = function() {\n  var shape = this.cursorShape_;\n\n  if (this.cursorNode_.getAttribute('focus') == 'false') {\n    // Always show a block cursor when unfocused.\n    shape = hterm.Terminal.cursorShape.BLOCK;\n  }\n\n  var style = this.cursorNode_.style;\n\n  style.width = this.scrollPort_.characterSize.width + 'px';\n\n  switch (shape) {\n    case hterm.Terminal.cursorShape.BEAM:\n      style.height = this.scrollPort_.characterSize.height + 'px';\n      style.backgroundColor = 'transparent';\n      style.borderBottomStyle = null;\n      style.borderLeftStyle = 'solid';\n      break;\n\n    case hterm.Terminal.cursorShape.UNDERLINE:\n      style.height = this.scrollPort_.characterSize.baseline + 'px';\n      style.backgroundColor = 'transparent';\n      style.borderBottomStyle = 'solid';\n      // correct the size to put it exactly at the baseline\n      style.borderLeftStyle = null;\n      break;\n\n    default:\n      style.height = this.scrollPort_.characterSize.height + 'px';\n      style.backgroundColor = this.cursorColor_;\n      style.borderBottomStyle = null;\n      style.borderLeftStyle = null;\n      break;\n  }\n};\n\n/**\n * Synchronizes the visible cursor with the current cursor coordinates.\n *\n * The sync will happen asynchronously, soon after the call stack winds down.\n * Multiple calls will be coalesced into a single sync.\n */\nhterm.Terminal.prototype.scheduleSyncCursorPosition_ = function() {\n  if (this.timeouts_.syncCursor)\n    return;\n\n  var self = this;\n  this.timeouts_.syncCursor = setTimeout(function() {\n      self.syncCursorPosition_();\n      delete self.timeouts_.syncCursor;\n    }, 0);\n};\n\n/**\n * Show or hide the zoom warning.\n *\n * The zoom warning is a message warning the user that their browser zoom must\n * be set to 100% in order for hterm to function properly.\n *\n * @param {boolean} state True to show the message, false to hide it.\n */\nhterm.Terminal.prototype.showZoomWarning_ = function(state) {\n  if (!this.zoomWarningNode_) {\n    if (!state)\n      return;\n\n    this.zoomWarningNode_ = this.document_.createElement('div');\n    this.zoomWarningNode_.style.cssText = (\n        'color: black;' +\n        'background-color: #ff2222;' +\n        'font-size: large;' +\n        'border-radius: 8px;' +\n        'opacity: 0.75;' +\n        'padding: 0.2em 0.5em 0.2em 0.5em;' +\n        'top: 0.5em;' +\n        'right: 1.2em;' +\n        'position: absolute;' +\n        '-webkit-text-size-adjust: none;' +\n        '-webkit-user-select: none;' +\n        '-moz-text-size-adjust: none;' +\n        '-moz-user-select: none;');\n  }\n\n  this.zoomWarningNode_.textContent = lib.MessageManager.replaceReferences(\n      hterm.zoomWarningMessage,\n      [parseInt(this.scrollPort_.characterSize.zoomFactor * 100)]);\n\n  this.zoomWarningNode_.style.fontFamily = this.prefs_.get('font-family');\n\n  if (state) {\n    if (!this.zoomWarningNode_.parentNode)\n      this.div_.parentNode.appendChild(this.zoomWarningNode_);\n  } else if (this.zoomWarningNode_.parentNode) {\n    this.zoomWarningNode_.parentNode.removeChild(this.zoomWarningNode_);\n  }\n};\n\n/**\n * Show the terminal overlay for a given amount of time.\n *\n * The terminal overlay appears in inverse video in a large font, centered\n * over the terminal.  You should probably keep the overlay message brief,\n * since it's in a large font and you probably aren't going to check the size\n * of the terminal first.\n *\n * @param {string} msg The text (not HTML) message to display in the overlay.\n * @param {number} opt_timeout The amount of time to wait before fading out\n *     the overlay.  Defaults to 1.5 seconds.  Pass null to have the overlay\n *     stay up forever (or until the next overlay).\n */\nhterm.Terminal.prototype.showOverlay = function(msg, opt_timeout) {\n  if (!this.overlayNode_) {\n    if (!this.div_)\n      return;\n\n    this.overlayNode_ = this.document_.createElement('div');\n    this.overlayNode_.style.cssText = (\n        'border-radius: 15px;' +\n        'font-size: xx-large;' +\n        'opacity: 0.75;' +\n        'padding: 0.2em 0.5em 0.2em 0.5em;' +\n        'position: absolute;' +\n        '-webkit-user-select: none;' +\n        '-webkit-transition: opacity 180ms ease-in;' +\n        '-moz-user-select: none;' +\n        '-moz-transition: opacity 180ms ease-in;');\n\n    this.overlayNode_.addEventListener('mousedown', function(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }, true);\n  }\n\n  this.overlayNode_.style.color = this.prefs_.get('background-color');\n  this.overlayNode_.style.backgroundColor = this.prefs_.get('foreground-color');\n  this.overlayNode_.style.fontFamily = this.prefs_.get('font-family');\n\n  this.overlayNode_.textContent = msg;\n  this.overlayNode_.style.opacity = '0.75';\n\n  if (!this.overlayNode_.parentNode)\n    this.div_.appendChild(this.overlayNode_);\n\n  var divSize = hterm.getClientSize(this.div_);\n  var overlaySize = hterm.getClientSize(this.overlayNode_);\n\n  this.overlayNode_.style.top =\n      (divSize.height - overlaySize.height) / 2 + 'px';\n  this.overlayNode_.style.left = (divSize.width - overlaySize.width -\n      this.scrollPort_.currentScrollbarWidthPx) / 2 + 'px';\n\n  var self = this;\n\n  if (this.overlayTimeout_)\n    clearTimeout(this.overlayTimeout_);\n\n  if (opt_timeout === null)\n    return;\n\n  this.overlayTimeout_ = setTimeout(function() {\n      self.overlayNode_.style.opacity = '0';\n      self.overlayTimeout_ = setTimeout(function() {\n          if (self.overlayNode_.parentNode)\n            self.overlayNode_.parentNode.removeChild(self.overlayNode_);\n          self.overlayTimeout_ = null;\n          self.overlayNode_.style.opacity = '0.75';\n        }, 200);\n    }, opt_timeout || 1500);\n};\n\n/**\n * Paste from the system clipboard to the terminal.\n */\nhterm.Terminal.prototype.paste = function() {\n  hterm.pasteFromClipboard(this.document_);\n};\n\n/**\n * Copy a string to the system clipboard.\n *\n * Note: If there is a selected range in the terminal, it'll be cleared.\n */\nhterm.Terminal.prototype.copyStringToClipboard = function(str) {\n  if (this.prefs_.get('enable-clipboard-notice'))\n    setTimeout(this.showOverlay.bind(this, hterm.notifyCopyMessage, 500), 200);\n\n  var copySource = this.document_.createElement('pre');\n  copySource.textContent = str;\n  copySource.style.cssText = (\n      '-webkit-user-select: text;' +\n      '-moz-user-select: text;' +\n      'position: absolute;' +\n      'top: -99px');\n\n  this.document_.body.appendChild(copySource);\n\n  var selection = this.document_.getSelection();\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  selection.selectAllChildren(copySource);\n\n  hterm.copySelectionToClipboard(this.document_);\n\n  // IE doesn't support selection.extend. This means that the selection\n  // won't return on IE.\n  if (selection.extend) {\n    selection.collapse(anchorNode, anchorOffset);\n    selection.extend(focusNode, focusOffset);\n  }\n\n  copySource.parentNode.removeChild(copySource);\n};\n\nhterm.Terminal.prototype.getSelectionText = function() {\n  var selection = this.scrollPort_.selection;\n  selection.sync();\n\n  if (selection.isCollapsed)\n    return null;\n\n\n  // Start offset measures from the beginning of the line.\n  var startOffset = selection.startOffset;\n  var node = selection.startNode;\n\n  if (node.nodeName != 'X-ROW') {\n    // If the selection doesn't start on an x-row node, then it must be\n    // somewhere inside the x-row.  Add any characters from previous siblings\n    // into the start offset.\n\n    if (node.nodeName == '#text' && node.parentNode.nodeName == 'SPAN') {\n      // If node is the text node in a styled span, move up to the span node.\n      node = node.parentNode;\n    }\n\n    while (node.previousSibling) {\n      node = node.previousSibling;\n      startOffset += hterm.TextAttributes.nodeWidth(node);\n    }\n  }\n\n  // End offset measures from the end of the line.\n  var endOffset = (hterm.TextAttributes.nodeWidth(selection.endNode) -\n                   selection.endOffset);\n  var node = selection.endNode;\n\n  if (node.nodeName != 'X-ROW') {\n    // If the selection doesn't end on an x-row node, then it must be\n    // somewhere inside the x-row.  Add any characters from following siblings\n    // into the end offset.\n\n    if (node.nodeName == '#text' && node.parentNode.nodeName == 'SPAN') {\n      // If node is the text node in a styled span, move up to the span node.\n      node = node.parentNode;\n    }\n\n    while (node.nextSibling) {\n      node = node.nextSibling;\n      endOffset += hterm.TextAttributes.nodeWidth(node);\n    }\n  }\n\n  var rv = this.getRowsText(selection.startRow.rowIndex,\n                            selection.endRow.rowIndex + 1);\n  return lib.wc.substring(rv, startOffset, lib.wc.strWidth(rv) - endOffset);\n};\n\n/**\n * Copy the current selection to the system clipboard, then clear it after a\n * short delay.\n */\nhterm.Terminal.prototype.copySelectionToClipboard = function() {\n  var text = this.getSelectionText();\n  if (text != null)\n    this.copyStringToClipboard(text);\n};\n\nhterm.Terminal.prototype.overlaySize = function() {\n  this.showOverlay(this.screenSize.width + 'x' + this.screenSize.height);\n};\n\n/**\n * Invoked by hterm.Terminal.Keyboard when a VT keystroke is detected.\n *\n * @param {string} string The VT string representing the keystroke, in UTF-16.\n */\nhterm.Terminal.prototype.onVTKeystroke = function(string) {\n  if (this.scrollOnKeystroke_)\n    this.scrollPort_.scrollRowToBottom(this.getRowCount());\n\n  this.io.onVTKeystroke(this.keyboard.encode(string));\n};\n\n/**\n * Add the terminalRow and terminalColumn properties to mouse events and\n * then forward on to onMouse().\n *\n * The terminalRow and terminalColumn properties contain the (row, column)\n * coordinates for the mouse event.\n */\nhterm.Terminal.prototype.onMouse_ = function(e) {\n  if (e.processedByTerminalHandler_) {\n    // We register our event handlers on the document, as well as the cursor\n    // and the scroll blocker.  Mouse events that occur on the cursor or\n    // scroll blocker will also appear on the document, but we don't want to\n    // process them twice.\n    //\n    // We can't just prevent bubbling because that has other side effects, so\n    // we decorate the event object with this property instead.\n    return;\n  }\n\n  e.processedByTerminalHandler_ = true;\n\n  // One based row/column stored on the mouse event.\n  e.terminalRow = parseInt((e.clientY - this.scrollPort_.visibleRowTopMargin) /\n                           this.scrollPort_.characterSize.height) + 1;\n  e.terminalColumn = parseInt(e.clientX /\n                              this.scrollPort_.characterSize.width) + 1;\n\n  if (e.type == 'mousedown' && e.terminalColumn > this.screenSize.width) {\n    // Mousedown in the scrollbar area.\n    return;\n  }\n\n  if (this.options_.cursorVisible &&\n      this.vt.mouseReport == this.vt.MOUSE_REPORT_DISABLED) {\n    // If the cursor is visible and we're not sending mouse events to the\n    // host app, then we want to hide the terminal cursor when the mouse\n    // cursor is over top.  This keeps the terminal cursor from interfering\n    // with local text selection.\n    if (e.terminalRow - 1 == this.screen_.cursorPosition.row &&\n        e.terminalColumn - 1 == this.screen_.cursorPosition.column) {\n      this.cursorNode_.style.display = 'none';\n    } else if (this.cursorNode_.style.display == 'none') {\n      this.cursorNode_.style.display = '';\n    }\n  }\n\n  if (e.type == 'mousedown') {\n    if (e.altKey || this.vt.mouseReport == this.vt.MOUSE_REPORT_DISABLED) {\n      // If VT mouse reporting is disabled, or has been defeated with\n      // alt-mousedown, then the mouse will act on the local selection.\n      this.reportMouseEvents_ = false;\n      this.setSelectionEnabled(true);\n    } else {\n      // Otherwise we defer ownership of the mouse to the VT.\n      this.reportMouseEvents_ = true;\n      this.document_.getSelection().collapseToEnd();\n      this.setSelectionEnabled(false);\n      e.preventDefault();\n    }\n  }\n\n  if (!this.reportMouseEvents_) {\n    if (e.type == 'dblclick') {\n      this.screen_.expandSelection(this.document_.getSelection());\n      hterm.copySelectionToClipboard(this.document_);\n    }\n\n    if (e.type == 'mousedown' && e.which == this.mousePasteButton)\n      this.paste();\n\n    if (e.type == 'mouseup' && e.which == 1 && this.copyOnSelect &&\n        !this.document_.getSelection().isCollapsed) {\n      hterm.copySelectionToClipboard(this.document_);\n    }\n\n    if ((e.type == 'mousemove' || e.type == 'mouseup') &&\n        this.scrollBlockerNode_.engaged) {\n      // Disengage the scroll-blocker after one of these events.\n      this.scrollBlockerNode_.engaged = false;\n      this.scrollBlockerNode_.style.top = '-99px';\n    }\n\n  } else /* if (this.reportMouseEvents) */ {\n    if (!this.scrollBlockerNode_.engaged) {\n      if (e.type == 'mousedown') {\n        // Move the scroll-blocker into place if we want to keep the scrollport\n        // from scrolling.\n        this.scrollBlockerNode_.engaged = true;\n        this.scrollBlockerNode_.style.top = (e.clientY - 5) + 'px';\n        this.scrollBlockerNode_.style.left = (e.clientX - 5) + 'px';\n      } else if (e.type == 'mousemove') {\n        // Oh.  This means that drag-scroll was disabled AFTER the mouse down,\n        // in which case it's too late to engage the scroll-blocker.\n        this.document_.getSelection().collapseToEnd();\n        e.preventDefault();\n      }\n    }\n\n    this.onMouse(e);\n  }\n\n  if (e.type == 'mouseup' && this.document_.getSelection().isCollapsed) {\n    // Restore this on mouseup in case it was temporarily defeated with a\n    // alt-mousedown.  Only do this when the selection is empty so that\n    // we don't immediately kill the users selection.\n    this.reportMouseEvents_ = (this.vt.mouseReport !=\n                               this.vt.MOUSE_REPORT_DISABLED);\n  }\n};\n\n/**\n * Clients should override this if they care to know about mouse events.\n *\n * The event parameter will be a normal DOM mouse click event with additional\n * 'terminalRow' and 'terminalColumn' properties.\n */\nhterm.Terminal.prototype.onMouse = function(e) { };\n\n/**\n * React when focus changes.\n */\nhterm.Terminal.prototype.onFocusChange_ = function(focused) {\n  this.cursorNode_.setAttribute('focus', focused);\n  this.restyleCursor_();\n  if (focused === true)\n    this.closeBellNotifications_();\n};\n\n/**\n * React when the ScrollPort is scrolled.\n */\nhterm.Terminal.prototype.onScroll_ = function() {\n  this.scheduleSyncCursorPosition_();\n};\n\n/**\n * React when text is pasted into the scrollPort.\n */\nhterm.Terminal.prototype.onPaste_ = function(e) {\n  var data = e.text.replace(/\\n/mg, '\\r');\n  data = this.keyboard.encode(data);\n  if (this.options_.bracketedPaste)\n    data = '\\x1b[200~' + data + '\\x1b[201~';\n\n  this.io.sendString(data);\n};\n\n/**\n * React when the user tries to copy from the scrollPort.\n */\nhterm.Terminal.prototype.onCopy_ = function(e) {\n  if (!this.useDefaultWindowCopy) {\n    e.preventDefault();\n    setTimeout(this.copySelectionToClipboard.bind(this), 0);\n  }\n};\n\n/**\n * React when the ScrollPort is resized.\n *\n * Note: This function should not directly contain code that alters the internal\n * state of the terminal.  That kind of code belongs in realizeWidth or\n * realizeHeight, so that it can be executed synchronously in the case of a\n * programmatic width change.\n */\nhterm.Terminal.prototype.onResize_ = function() {\n  var columnCount = Math.floor(this.scrollPort_.getScreenWidth() /\n                               this.scrollPort_.characterSize.width);\n  var rowCount = lib.f.smartFloorDivide(this.scrollPort_.getScreenHeight(),\n                            this.scrollPort_.characterSize.height);\n\n  if (columnCount <= 0 || rowCount <= 0) {\n    // We avoid these situations since they happen sometimes when the terminal\n    // gets removed from the document or during the initial load, and we can't\n    // deal with that.\n    return;\n  }\n\n  var isNewSize = (columnCount != this.screenSize.width ||\n                   rowCount != this.screenSize.height);\n\n  // We do this even if the size didn't change, just to be sure everything is\n  // in sync.\n  this.realizeSize_(columnCount, rowCount);\n  this.showZoomWarning_(this.scrollPort_.characterSize.zoomFactor != 1);\n\n  if (isNewSize)\n    this.overlaySize();\n\n  this.restyleCursor_();\n  this.scheduleSyncCursorPosition_();\n};\n\n/**\n * Service the cursor blink timeout.\n */\nhterm.Terminal.prototype.onCursorBlink_ = function() {\n  if (!this.options_.cursorBlink) {\n    delete this.timeouts_.cursorBlink;\n    return;\n  }\n\n  if (this.cursorNode_.getAttribute('focus') == 'false' ||\n      this.cursorNode_.style.opacity == '0') {\n    this.cursorNode_.style.opacity = '1';\n    this.timeouts_.cursorBlink = setTimeout(this.myOnCursorBlink_,\n                                            this.cursorBlinkCycle_[0]);\n  } else {\n    this.cursorNode_.style.opacity = '0';\n    this.timeouts_.cursorBlink = setTimeout(this.myOnCursorBlink_,\n                                            this.cursorBlinkCycle_[1]);\n  }\n};\n\n/**\n * Set the scrollbar-visible mode bit.\n *\n * If scrollbar-visible is on, the vertical scrollbar will be visible.\n * Otherwise it will not.\n *\n * Defaults to on.\n *\n * @param {boolean} state True to set scrollbar-visible mode, false to unset.\n */\nhterm.Terminal.prototype.setScrollbarVisible = function(state) {\n  this.scrollPort_.setScrollbarVisible(state);\n};\n\n/**\n * Set the scroll wheel move multiplier.  This will affect how fast the page\n * scrolls on mousewheel events.\n *\n * Defaults to 1.\n *\n * @param {number} multiplier.\n */\nhterm.Terminal.prototype.setScrollWheelMoveMultipler = function(multiplier) {\n  this.scrollPort_.setScrollWheelMoveMultipler(multiplier);\n};\n\n/**\n * Close all web notifications created by terminal bells.\n */\nhterm.Terminal.prototype.closeBellNotifications_ = function() {\n  this.bellNotificationList_.forEach(function(n) {\n      n.close();\n    });\n  this.bellNotificationList_.length = 0;\n};\n// SOURCE FILE: hterm/js/hterm_terminal_io.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.encodeUTF8');\n\n/**\n * Input/Output interface used by commands to communicate with the terminal.\n *\n * Commands like `nassh` and `crosh` receive an instance of this class as\n * part of their argv object.  This allows them to write to and read from the\n * terminal without exposing them to an entire hterm.Terminal instance.\n *\n * The active command must override the onVTKeystroke() and sendString() methods\n * of this class in order to receive keystrokes and send output to the correct\n * destination.\n *\n * Isolating commands from the terminal provides the following benefits:\n * - Provides a mechanism to save and restore onVTKeystroke and sendString\n *   handlers when invoking subcommands (see the push() and pop() methods).\n * - The isolation makes it easier to make changes in Terminal and supporting\n *   classes without affecting commands.\n * - In The Future commands may run in web workers where they would only be able\n *   to talk to a Terminal instance through an IPC mechanism.\n *\n * @param {hterm.Terminal}\n */\nhterm.Terminal.IO = function(terminal) {\n  this.terminal_ = terminal;\n\n  // The IO object to restore on IO.pop().\n  this.previousIO_ = null;\n};\n\n/**\n * Show the terminal overlay for a given amount of time.\n *\n * The terminal overlay appears in inverse video in a large font, centered\n * over the terminal.  You should probably keep the overlay message brief,\n * since it's in a large font and you probably aren't going to check the size\n * of the terminal first.\n *\n * @param {string} msg The text (not HTML) message to display in the overlay.\n * @param {number} opt_timeout The amount of time to wait before fading out\n *     the overlay.  Defaults to 1.5 seconds.  Pass null to have the overlay\n *     stay up forever (or until the next overlay).\n */\nhterm.Terminal.IO.prototype.showOverlay = function(message, opt_timeout) {\n  this.terminal_.showOverlay(message, opt_timeout);\n};\n\n/**\n * Open an frame in the current terminal window, pointed to the specified\n * url.\n *\n * Eventually we'll probably need size/position/decoration options.\n * The user should also be able to move/resize the frame.\n *\n * @param {string} url The URL to load in the frame.\n * @param {Object} opt_options Optional frame options.  Not implemented.\n */\nhterm.Terminal.IO.prototype.createFrame = function(url, opt_options) {\n  return new hterm.Frame(this.terminal_, url, opt_options);\n};\n\n/**\n * Change the preference profile for the terminal.\n *\n * @param profileName {string} The name of the preference profile to activate.\n */\nhterm.Terminal.IO.prototype.setTerminalProfile = function(profileName) {\n  this.terminal_.setProfile(profileName);\n};\n\n/**\n * Create a new hterm.Terminal.IO instance and make it active on the Terminal\n * object associated with this instance.\n *\n * This is used to pass control of the terminal IO off to a subcommand.  The\n * IO.pop() method can be used to restore control when the subcommand completes.\n */\nhterm.Terminal.IO.prototype.push = function() {\n  var io = new hterm.Terminal.IO(this.terminal_);\n  io.keyboardCaptured_ = this.keyboardCaptured_;\n\n  io.columnCount = this.columnCount;\n  io.rowCount = this.rowCount;\n\n  io.previousIO_ = this.terminal_.io;\n  this.terminal_.io = io;\n\n  return io;\n};\n\n/**\n * Restore the Terminal's previous IO object.\n */\nhterm.Terminal.IO.prototype.pop = function() {\n  this.terminal_.io = this.previousIO_;\n};\n\n/**\n * Called when data needs to be sent to the current command.\n *\n * Clients should override this to receive notification of pending data.\n *\n * @param {string} string The data to send.\n */\nhterm.Terminal.IO.prototype.sendString = function(string) {\n  // Override this.\n  console.log('Unhandled sendString: ' + string);\n};\n\n/**\n * Called when a terminal keystroke is detected.\n *\n * Clients should override this to receive notification of keystrokes.\n *\n * The keystroke data will be encoded according to the 'send-encoding'\n * preference.\n *\n * @param {string} string The VT key sequence.\n */\nhterm.Terminal.IO.prototype.onVTKeystroke = function(string) {\n  // Override this.\n  console.log('Unobserverd VT keystroke: ' + JSON.stringify(string));\n};\n\nhterm.Terminal.IO.prototype.onTerminalResize_ = function(width, height) {\n  var obj = this;\n  while (obj) {\n    obj.columnCount = width;\n    obj.rowCount = height;\n    obj = obj.previousIO_;\n  }\n\n  this.onTerminalResize(width, height);\n};\n\n/**\n * Called when terminal size is changed.\n *\n * Clients should override this to receive notification of resize.\n *\n * @param {string|integer} terminal width.\n * @param {string|integer} terminal height.\n */\nhterm.Terminal.IO.prototype.onTerminalResize = function(width, height) {\n  // Override this.\n};\n\n/**\n * Write a UTF-8 encoded byte string to the terminal.\n *\n * @param {string} string The UTF-8 encoded string to print.\n */\nhterm.Terminal.IO.prototype.writeUTF8 = function(string) {\n  if (this.terminal_.io != this)\n    throw 'Attempt to print from inactive IO object.';\n\n  this.terminal_.interpret(string);\n};\n\n/**\n * Write a UTF-8 encoded byte string to the terminal followed by crlf.\n *\n * @param {string} string The UTF-8 encoded string to print.\n */\nhterm.Terminal.IO.prototype.writelnUTF8 = function(string) {\n  if (this.terminal_.io != this)\n    throw 'Attempt to print from inactive IO object.';\n\n  this.terminal_.interpret(string + '\\r\\n');\n};\n\n/**\n * Write a UTF-16 JavaScript string to the terminal.\n *\n * @param {string} string The string to print.\n */\nhterm.Terminal.IO.prototype.print =\nhterm.Terminal.IO.prototype.writeUTF16 = function(string) {\n  this.writeUTF8(lib.encodeUTF8(string));\n};\n\n/**\n * Print a UTF-16 JavaScript string to the terminal followed by a newline.\n *\n * @param {string} string The string to print.\n */\nhterm.Terminal.IO.prototype.println =\nhterm.Terminal.IO.prototype.writelnUTF16 = function(string) {\n  this.writelnUTF8(lib.encodeUTF8(string));\n};\n// SOURCE FILE: hterm/js/hterm_text_attributes.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.colors');\n\n/**\n * Constructor for TextAttribute objects.\n *\n * These objects manage a set of text attributes such as foreground/\n * background color, bold, faint, italic, blink, underline, and strikethrough.\n *\n * TextAttribute instances can be used to construct a DOM container implementing\n * the current attributes, or to test an existing DOM container for\n * compatibility with the current attributes.\n *\n * @constructor\n * @param {HTMLDocument} document The parent document to use when creating\n *     new DOM containers.\n */\nhterm.TextAttributes = function(document) {\n  this.document_ = document;\n  // These variables contain the source of the color as either:\n  // SRC_DEFAULT  (use context default)\n  // SRC_RGB      (specified in 'rgb( r, g, b)' form)\n  // number       (representing the index from color palette to use)\n  this.foregroundSource = this.SRC_DEFAULT;\n  this.backgroundSource = this.SRC_DEFAULT;\n\n  // These properties cache the value in the color table, but foregroundSource\n  // and backgroundSource contain the canonical values.\n  this.foreground = this.DEFAULT_COLOR;\n  this.background = this.DEFAULT_COLOR;\n\n  this.defaultForeground = 'rgb(255, 255, 255)';\n  this.defaultBackground = 'rgb(0, 0, 0)';\n\n  this.bold = false;\n  this.faint = false;\n  this.italic = false;\n  this.blink = false;\n  this.underline = false;\n  this.strikethrough = false;\n  this.inverse = false;\n  this.invisible = false;\n  this.wcNode = false;\n  this.tileData = null;\n\n  this.colorPalette = null;\n  this.resetColorPalette();\n};\n\n/**\n * If false, we ignore the bold attribute.\n *\n * This is used for fonts that have a bold version that is a different size\n * than the normal weight version.\n */\nhterm.TextAttributes.prototype.enableBold = true;\n\n/**\n * If true, use bright colors (if available) for bold text.\n *\n * This setting is independent of the enableBold setting.\n */\nhterm.TextAttributes.prototype.enableBoldAsBright = true;\n\n/**\n * A sentinel constant meaning \"whatever the default color is in this context\".\n */\nhterm.TextAttributes.prototype.DEFAULT_COLOR = new String('');\n\n/**\n * A constant string used to specify that source color is context default.\n */\nhterm.TextAttributes.prototype.SRC_DEFAULT = 'default';\n\n\n/**\n * A constant string used to specify that the source of a color is a valid\n * rgb( r, g, b) specifier.\n */\nhterm.TextAttributes.prototype.SRC_RGB = 'rgb';\n\n/**\n * The document object which should own the DOM nodes created by this instance.\n *\n * @param {HTMLDocument} document The parent document.\n */\nhterm.TextAttributes.prototype.setDocument = function(document) {\n  this.document_ = document;\n};\n\n/**\n * Create a deep copy of this object.\n *\n * @return {hterm.TextAttributes} A deep copy of this object.\n */\nhterm.TextAttributes.prototype.clone = function() {\n  var rv = new hterm.TextAttributes(null);\n\n  for (var key in this) {\n    rv[key] = this[key];\n  }\n\n  rv.colorPalette = this.colorPalette.concat();\n  return rv;\n};\n\n/**\n * Reset the current set of attributes.\n *\n * This does not affect the palette.  Use resetColorPalette() for that.\n * It also doesn't affect the tile data, it's not meant to.\n */\nhterm.TextAttributes.prototype.reset = function() {\n  this.foregroundSource = this.SRC_DEFAULT;\n  this.backgroundSource = this.SRC_DEFAULT;\n  this.foreground = this.DEFAULT_COLOR;\n  this.background = this.DEFAULT_COLOR;\n  this.bold = false;\n  this.faint = false;\n  this.italic = false;\n  this.blink = false;\n  this.underline = false;\n  this.strikethrough = false;\n  this.inverse = false;\n  this.invisible = false;\n  this.wcNode = false;\n};\n\n/**\n * Reset the color palette to the default state.\n */\nhterm.TextAttributes.prototype.resetColorPalette = function() {\n  this.colorPalette = lib.colors.colorPalette.concat();\n  this.syncColors();\n};\n\n/**\n * Test if the current attributes describe unstyled text.\n *\n * @return {boolean} True if the current attributes describe unstyled text.\n */\nhterm.TextAttributes.prototype.isDefault = function() {\n  return (this.foregroundSource == this.SRC_DEFAULT &&\n          this.backgroundSource == this.SRC_DEFAULT &&\n          !this.bold &&\n          !this.faint &&\n          !this.italic &&\n          !this.blink &&\n          !this.underline &&\n          !this.strikethrough &&\n          !this.inverse &&\n          !this.invisible &&\n          !this.wcNode &&\n          this.tileData == null);\n};\n\n/**\n * Create a DOM container (a span or a text node) with a style to match the\n * current set of attributes.\n *\n * This method will create a plain text node if the text is unstyled, or\n * an HTML span if the text is styled.  Due to lack of monospace wide character\n * fonts on certain systems (e.g. Chrome OS), we need to put each wide character\n * in a span of CSS class '.wc-node' which has double column width.\n * Each vt_tiledata tile is also represented by a span with a single\n * character, with CSS classes '.tile' and '.tile_<glyph number>'.\n *\n * @param {string} opt_textContent Optional text content for the new container.\n * @return {HTMLNode} An HTML span or text nodes styled to match the current\n *     attributes.\n */\nhterm.TextAttributes.prototype.createContainer = function(opt_textContent) {\n  if (this.isDefault())\n    return this.document_.createTextNode(opt_textContent);\n\n  var span = this.document_.createElement('span');\n  var style = span.style;\n\n  if (this.foreground != this.DEFAULT_COLOR)\n    style.color = this.foreground;\n\n  if (this.background != this.DEFAULT_COLOR)\n    style.backgroundColor = this.background;\n\n  if (this.enableBold && this.bold)\n    style.fontWeight = 'bold';\n\n  if (this.faint)\n    span.faint = true;\n\n  if (this.italic)\n    style.fontStyle = 'italic';\n\n  if (this.blink)\n    style.fontStyle = 'italic';\n\n  var textDecoration = '';\n  if (this.underline) {\n    textDecoration += ' underline';\n    span.underline = true;\n  }\n  if (this.strikethrough) {\n    textDecoration += ' line-through';\n    span.strikethrough = true;\n  }\n  if (textDecoration) {\n    style.textDecoration = textDecoration;\n  }\n\n  if (this.wcNode) {\n    span.className = 'wc-node';\n    span.wcNode = true;\n  }\n\n  if (this.tileData != null) {\n    // This could be a wcNode too, so we add to the className here.\n    span.className += ' tile tile_' + this.tileData;\n    span.tileNode = true;\n  }\n\n  if (opt_textContent)\n    span.textContent = opt_textContent;\n\n  return span;\n};\n\n/**\n * Tests if the provided object (string, span or text node) has the same\n * style as this TextAttributes instance.\n *\n * This indicates that text with these attributes could be inserted directly\n * into the target DOM node.\n *\n * For the purposes of this method, a string is considered a text node.\n *\n * @param {string|HTMLNode} obj The object to test.\n * @return {boolean} True if the provided container has the same style as\n *     this attributes instance.\n */\nhterm.TextAttributes.prototype.matchesContainer = function(obj) {\n  if (typeof obj == 'string' || obj.nodeType == 3)\n    return this.isDefault();\n\n  var style = obj.style;\n\n  // We don't want to put multiple characters in a wcNode or a tile.\n  // See the comments in createContainer.\n  return (!(this.wcNode || obj.wcNode) &&\n          !(this.tileData != null || obj.tileNode) &&\n          this.foreground == style.color &&\n          this.background == style.backgroundColor &&\n          (this.enableBold && this.bold) == !!style.fontWeight &&\n          (this.blink || this.italic) == !!style.fontStyle &&\n          !!this.underline == !!obj.underline &&\n          !!this.strikethrough == !!obj.strikethrough);\n};\n\nhterm.TextAttributes.prototype.setDefaults = function(foreground, background) {\n  this.defaultForeground = foreground;\n  this.defaultBackground = background;\n\n  this.syncColors();\n};\n\n/**\n * Updates foreground and background properties based on current indices and\n * other state.\n *\n * @param {string} terminalForeground The terminal foreground color for use as\n *     inverse text background.\n * @param {string} terminalBackground The terminal background color for use as\n *     inverse text foreground.\n *\n */\nhterm.TextAttributes.prototype.syncColors = function() {\n  function getBrightIndex(i) {\n    if (i < 8) {\n      // If the color is from the lower half of the ANSI 16, add 8.\n      return i + 8;\n    }\n\n    // If it's not from the 16 color palette, ignore bold requests.  This\n    // matches the behavior of gnome-terminal.\n    return i;\n  }\n\n  var foregroundSource = this.foregroundSource;\n  var backgroundSource = this.backgroundSource;\n  var defaultForeground = this.DEFAULT_COLOR;\n  var defaultBackground = this.DEFAULT_COLOR;\n\n  if (this.inverse) {\n    foregroundSource = this.backgroundSource;\n    backgroundSource = this.foregroundSource;\n    // We can't inherit the container's color anymore.\n    defaultForeground = this.defaultBackground;\n    defaultBackground = this.defaultForeground;\n  }\n\n  if (this.enableBoldAsBright && this.bold) {\n    if (foregroundSource != this.SRC_DEFAULT &&\n        foregroundSource != this.SRC_RGB) {\n      foregroundSource = getBrightIndex(foregroundSource);\n    }\n  }\n\n  if (this.invisible) {\n    foregroundSource = backgroundSource;\n    defaultForeground = this.defaultBackground;\n  }\n\n  // Set fore/background colors unless already specified in rgb(r, g, b) form.\n  if (foregroundSource != this.SRC_RGB) {\n    this.foreground = ((foregroundSource == this.SRC_DEFAULT) ?\n                       defaultForeground : this.colorPalette[foregroundSource]);\n  }\n\n  if (this.faint && !this.invisible) {\n    var colorToMakeFaint = ((this.foreground == this.DEFAULT_COLOR) ?\n                            this.defaultForeground : this.foreground);\n    this.foreground = lib.colors.mix(colorToMakeFaint, 'rgb(0, 0, 0)', 0.3333);\n  }\n\n  if (backgroundSource != this.SRC_RGB) {\n    this.background = ((backgroundSource == this.SRC_DEFAULT) ?\n                       defaultBackground : this.colorPalette[backgroundSource]);\n  }\n};\n\n/**\n * Static method used to test if the provided objects (strings, spans or\n * text nodes) have the same style.\n *\n * For the purposes of this method, a string is considered a text node.\n *\n * @param {string|HTMLNode} obj1 An object to test.\n * @param {string|HTMLNode} obj2 Another object to test.\n * @return {boolean} True if the containers have the same style.\n */\nhterm.TextAttributes.containersMatch = function(obj1, obj2) {\n  if (typeof obj1 == 'string')\n    return hterm.TextAttributes.containerIsDefault(obj2);\n\n  if (obj1.nodeType != obj2.nodeType)\n    return false;\n\n  if (obj1.nodeType == 3)\n    return true;\n\n  var style1 = obj1.style;\n  var style2 = obj2.style;\n\n  return (style1.color == style2.color &&\n          style1.backgroundColor == style2.backgroundColor &&\n          style1.fontWeight == style2.fontWeight &&\n          style1.fontStyle == style2.fontStyle &&\n          style1.textDecoration == style2.textDecoration);\n};\n\n/**\n * Static method to test if a given DOM container represents unstyled text.\n *\n * For the purposes of this method, a string is considered a text node.\n *\n * @param {string|HTMLNode} obj1 An object to test.\n * @return {boolean} True if the object is unstyled.\n */\nhterm.TextAttributes.containerIsDefault = function(obj) {\n  return typeof obj == 'string'  || obj.nodeType == 3;\n};\n\n/**\n * Static method to get the column width of a node's textContent.\n *\n * @param {HTMLElement} node The HTML element to get the width of textContent\n *     from.\n * @return {integer} The column width of the node's textContent.\n */\nhterm.TextAttributes.nodeWidth = function(node) {\n  if (node.wcNode) {\n    return lib.wc.strWidth(node.textContent);\n  } else {\n    return node.textContent.length;\n  }\n}\n\n/**\n * Static method to get the substr of a node's textContent.  The start index\n * and substr width are computed in column width.\n *\n * @param {HTMLElement} node The HTML element to get the substr of textContent\n *     from.\n * @param {integer} start The starting offset in column width.\n * @param {integer} width The width to capture in column width.\n * @return {integer} The extracted substr of the node's textContent.\n */\nhterm.TextAttributes.nodeSubstr = function(node, start, width) {\n  if (node.wcNode) {\n    return lib.wc.substr(node.textContent, start, width);\n  } else {\n    return node.textContent.substr(start, width);\n  }\n}\n\n/**\n * Static method to get the substring based of a node's textContent.  The\n * start index of end index are computed in column width.\n *\n * @param {HTMLElement} node The HTML element to get the substr of textContent\n *     from.\n * @param {integer} start The starting offset in column width.\n * @param {integer} end The ending offset in column width.\n * @return {integer} The extracted substring of the node's textContent.\n */\nhterm.TextAttributes.nodeSubstring = function(node, start, end) {\n  if (node.wcNode) {\n    return lib.wc.substring(node.textContent, start, end);\n  } else {\n    return node.textContent.substring(start, end);\n  }\n}\n\n/**\n * Static method to split a string into contiguous runs of single-width\n * characters and runs of double-width characters.\n *\n * @param {string} str The string to split.\n * @return {Array} An array of objects that contain substrings of str, where\n *     each substring is either a contiguous runs of single-width characters\n *     or a double-width character.  For object that contains a double-width\n *     character, its wcNode property is set to true.\n */\nhterm.TextAttributes.splitWidecharString = function(str) {\n  var rv = [];\n  var base = 0, length = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    if (c < 128 || lib.wc.charWidth(c) == 1) {\n      length++;\n    } else {\n      if (length) {\n        rv.push({str: str.substr(base, length)});\n      }\n      rv.push({str: str.substr(i, 1), wcNode: true});\n      base = i + 1;\n      length = 0;\n    }\n  }\n\n  if (length)\n    rv.push({str: str.substr(base, length)});\n\n  return rv;\n}\n// SOURCE FILE: hterm/js/hterm_vt.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.colors', 'lib.f', 'lib.UTF8Decoder',\n          'hterm.VT.CharacterMap');\n\n/**\n * Constructor for the VT escape sequence interpreter.\n *\n * The interpreter operates on a terminal object capable of performing cursor\n * move operations, painting characters, etc.\n *\n * This interpreter is intended to be compatible with xterm, though it\n * ignores some of the more esoteric escape sequences.\n *\n * Some sequences are marked \"Will not implement\", meaning that they aren't\n * considered relevant to hterm and will probably never be implemented.\n *\n * Others are marked \"Not currently implemented\", meaning that they are lower\n * priority items that may be useful to implement at some point.\n *\n * See also:\n *   [VT100] VT100 User Guide\n *           http://vt100.net/docs/vt100-ug/chapter3.html\n *   [VT510] VT510 Video Terminal Programmer Information\n *           http://vt100.net/docs/vt510-rm/contents\n *   [XTERM] Xterm Control Sequences\n *           http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   [CTRL]  Wikipedia: C0 and C1 Control Codes\n *           http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *   [CSI]   Wikipedia: ANSI Escape Code\n *           http://en.wikipedia.org/wiki/Control_Sequence_Introducer\n *   man 5 terminfo, man infocmp, infocmp -L xterm-new\n *\n * @param {hterm.Terminal} terminal Terminal to use with the interpreter.\n */\nhterm.VT = function(terminal) {\n  /**\n   * The display terminal object associated with this virtual terminal.\n   */\n  this.terminal = terminal;\n\n  terminal.onMouse = this.onTerminalMouse_.bind(this);\n  this.mouseReport = this.MOUSE_REPORT_DISABLED;\n\n  // Parse state left over from the last parse.  You should use the parseState\n  // instance passed into your parse routine, rather than reading\n  // this.parseState_ directly.\n  this.parseState_ = new hterm.VT.ParseState(this.parseUnknown_);\n\n  // Any \"leading modifiers\" for the escape sequence, such as '?', ' ', or the\n  // other modifiers handled in this.parseCSI_.\n  this.leadingModifier_ = '';\n\n  // Any \"trailing modifiers\".  Same character set as a leading modifier,\n  // except these are found after the numeric arguments.\n  this.trailingModifier_ = '';\n\n  // Whether or not to respect the escape codes for setting terminal width.\n  this.allowColumnWidthChanges_ = false;\n\n  // The amount of time we're willing to wait for the end of an OSC sequence.\n  this.oscTimeLimit_ = 20000;\n\n  // Construct a regular expression to match the known one-byte control chars.\n  // This is used in parseUnknown_ to quickly scan a string for the next\n  // control character.\n  var cc1 = Object.keys(hterm.VT.CC1).map(\n      function(e) {\n        return '\\\\x' + lib.f.zpad(e.charCodeAt().toString(16), 2)\n      }).join('');\n  this.cc1Pattern_ = new RegExp('[' + cc1 + ']');\n\n  // Decoder to maintain UTF-8 decode state.\n  this.utf8Decoder_ = new lib.UTF8Decoder();\n\n  /**\n   * Whether to accept the 8-bit control characters.\n   *\n   * An 8-bit control character is one with the eighth bit set.  These\n   * didn't work on 7-bit terminals so they all have two byte equivalents.\n   * Most hosts still only use the two-byte versions.\n   *\n   * We ignore 8-bit control codes by default.  This is in order to avoid\n   * issues with \"accidental\" usage of codes that need to be terminated.\n   * The \"accident\" usually involves cat'ing binary data.\n   */\n  this.enable8BitControl = false;\n\n  /**\n   * Whether to allow the OSC 52 sequence to write to the system clipboard.\n   */\n  this.enableClipboardWrite = true;\n\n  /**\n   * Respect the host's attempt to change the cursor blink status using\n   * the DEC Private mode 12.\n   */\n  this.enableDec12 = false;\n\n  /**\n   * The expected encoding method for data received from the host.\n   */\n  this.characterEncoding = 'utf-8';\n\n  /**\n   * Max length of an unterminated DCS, OSC, PM or APC sequence before we give\n   * up and ignore the code.\n   *\n   * These all end with a String Terminator (ST, '\\x9c', ESC '\\\\') or\n   * (BEL, '\\x07') character, hence the \"string sequence\" moniker.\n   */\n  this.maxStringSequence = 1024;\n\n  /**\n   * If true, emit warnings when we encounter a control character or escape\n   * sequence that we don't recognize or explicitly ignore.\n   */\n  this.warnUnimplemented = true;\n\n  /**\n   * The default G0...G3 character maps.\n   */\n  this.G0 = hterm.VT.CharacterMap.maps['B'];\n  this.G1 = hterm.VT.CharacterMap.maps['0'];\n  this.G2 = hterm.VT.CharacterMap.maps['B'];\n  this.G3 = hterm.VT.CharacterMap.maps['B'];\n\n  /**\n   * The 7-bit visible character set.\n   *\n   * This is a mapping from inbound data to display glyph.  The GL set\n   * contains the 94 bytes from 0x21 to 0x7e.\n   *\n   * The default GL set is 'B', US ASCII.\n   */\n  this.GL = 'G0';\n\n  /**\n   * The 8-bit visible character set.\n   *\n   * This is a mapping from inbound data to display glyph.  The GR set\n   * contains the 94 bytes from 0xa1 to 0xfe.\n   */\n  this.GR = 'G0';\n\n  // Saved state used in DECSC.\n  //\n  // This is a place to store a copy VT state, it is *not* the active state.\n  this.savedState_ = new hterm.VT.CursorState(this);\n};\n\n/**\n * No mouse events.\n */\nhterm.VT.prototype.MOUSE_REPORT_DISABLED = 0;\n\n/**\n * DECSET mode 1000.\n *\n * Report mouse down/up events only.\n */\nhterm.VT.prototype.MOUSE_REPORT_CLICK = 1;\n\n/**\n * DECSET mode 1002.\n *\n * Report mouse down/up and movement while a button is down.\n */\nhterm.VT.prototype.MOUSE_REPORT_DRAG = 3;\n\n/**\n * ParseState constructor.\n *\n * This object tracks the current state of the parse.  It has fields for the\n * current buffer, position in the buffer, and the parse function.\n *\n * @param {function} defaultFunc The default parser function.\n * @param {string} opt_buf Optional string to use as the current buffer.\n */\nhterm.VT.ParseState = function(defaultFunction, opt_buf) {\n  this.defaultFunction = defaultFunction;\n  this.buf = opt_buf || null;\n  this.pos = 0;\n  this.func = defaultFunction;\n  this.args = [];\n};\n\n/**\n * Reset the parser function, buffer, and position.\n */\nhterm.VT.ParseState.prototype.reset = function(opt_buf) {\n  this.resetParseFunction();\n  this.resetBuf(opt_buf || '');\n  this.resetArguments();\n};\n\n/**\n * Reset the parser function only.\n */\nhterm.VT.ParseState.prototype.resetParseFunction = function() {\n  this.func = this.defaultFunction;\n};\n\n/**\n * Reset the buffer and position only.\n *\n * @param {string} buf Optional new value for buf, defaults to null.\n */\nhterm.VT.ParseState.prototype.resetBuf = function(opt_buf) {\n  this.buf = (typeof opt_buf == 'string') ? opt_buf : null;\n  this.pos = 0;\n};\n\n/**\n * Reset the arguments list only.\n *\n * @param {string} opt_arg_zero Optional initial value for args[0].\n */\nhterm.VT.ParseState.prototype.resetArguments = function(opt_arg_zero) {\n  this.args.length = 0;\n  if (typeof opt_arg_zero != 'undefined')\n    this.args[0] = opt_arg_zero;\n};\n\n/**\n * Get an argument as an integer.\n *\n * @param {number} argnum The argument number to retreive.\n */\nhterm.VT.ParseState.prototype.iarg = function(argnum, defaultValue) {\n  var str = this.args[argnum];\n  if (str) {\n    var ret = parseInt(str, 10);\n    // An argument of zero is treated as the default value.\n    if (ret == 0)\n      ret = defaultValue;\n    return ret;\n  }\n  return defaultValue;\n};\n\n/**\n * Advance the parse postion.\n *\n * @param {integer} count The number of bytes to advance.\n */\nhterm.VT.ParseState.prototype.advance = function(count) {\n  this.pos += count;\n};\n\n/**\n * Return the remaining portion of the buffer without affecting the parse\n * position.\n *\n * @return {string} The remaining portion of the buffer.\n */\nhterm.VT.ParseState.prototype.peekRemainingBuf = function() {\n  return this.buf.substr(this.pos);\n};\n\n/**\n * Return the next single character in the buffer without affecting the parse\n * position.\n *\n * @return {string} The next character in the buffer.\n */\nhterm.VT.ParseState.prototype.peekChar = function() {\n  return this.buf.substr(this.pos, 1);\n};\n\n/**\n * Return the next single character in the buffer and advance the parse\n * position one byte.\n *\n * @return {string} The next character in the buffer.\n */\nhterm.VT.ParseState.prototype.consumeChar = function() {\n  return this.buf.substr(this.pos++, 1);\n};\n\n/**\n * Return true if the buffer is empty, or the position is past the end.\n */\nhterm.VT.ParseState.prototype.isComplete = function() {\n  return this.buf == null || this.buf.length <= this.pos;\n};\n\nhterm.VT.CursorState = function(vt) {\n  this.vt_ = vt;\n  this.save();\n};\n\nhterm.VT.CursorState.prototype.save = function() {\n  this.cursor = this.vt_.terminal.saveCursor();\n\n  this.textAttributes = this.vt_.terminal.getTextAttributes().clone();\n\n  this.GL = this.vt_.GL;\n  this.GR = this.vt_.GR;\n\n  this.G0 = this.vt_.G0;\n  this.G1 = this.vt_.G1;\n  this.G2 = this.vt_.G2;\n  this.G3 = this.vt_.G3;\n};\n\nhterm.VT.CursorState.prototype.restore = function() {\n  this.vt_.terminal.restoreCursor(this.cursor);\n\n  this.vt_.terminal.setTextAttributes(this.textAttributes.clone());\n\n  this.vt_.GL = this.GL;\n  this.vt_.GR = this.GR;\n\n  this.vt_.G0 = this.G0;\n  this.vt_.G1 = this.G1;\n  this.vt_.G2 = this.G2;\n  this.vt_.G3 = this.G3;\n};\n\nhterm.VT.prototype.reset = function() {\n  this.G0 = hterm.VT.CharacterMap.maps['B'];\n  this.G1 = hterm.VT.CharacterMap.maps['0'];\n  this.G2 = hterm.VT.CharacterMap.maps['B'];\n  this.G3 = hterm.VT.CharacterMap.maps['B'];\n\n  this.GL = 'G0';\n  this.GR = 'G0';\n\n  this.savedState_ = new hterm.VT.CursorState(this);\n\n  this.mouseReport = this.MOUSE_REPORT_DISABLED;\n};\n\n/**\n * Handle terminal mouse events.\n *\n * See the \"Mouse Tracking\" section of [xterm].\n */\nhterm.VT.prototype.onTerminalMouse_ = function(e) {\n  if (this.mouseReport == this.MOUSE_REPORT_DISABLED)\n    return;\n\n  // Temporary storage for our response.\n  var response;\n\n  // Modifier key state.\n  var mod = 0;\n  if (e.shiftKey)\n    mod |= 4;\n  if (e.metaKey || (this.terminal.keyboard.altIsMeta && e.altKey))\n    mod |= 8;\n  if (e.ctrlKey)\n    mod |= 16;\n\n  // TODO(rginda): We should also support mode 1005 and/or 1006 to extend the\n  // coordinate space.  Though, after poking around just a little, I wasn't\n  // able to get vi or emacs to use either of these modes.\n  var x = String.fromCharCode(lib.f.clamp(e.terminalColumn + 32, 32, 255));\n  var y = String.fromCharCode(lib.f.clamp(e.terminalRow + 32, 32, 255));\n\n  switch (e.type) {\n    case 'mousewheel':\n      // Mouse wheel is treated as button 1 or 2 plus an additional 64.\n      b = ((e.wheelDeltaY > 0) ? 0 : 1) + 96;\n      b |= mod;\n      response = '\\x1b[M' + String.fromCharCode(b) + x + y;\n\n      // Keep the terminal from scrolling.\n      e.preventDefault();\n      break;\n\n    case 'mousedown':\n      // Buttons are encoded as button number plus 32.\n      var b = Math.min(e.which - 1, 2) + 32;\n\n      // And mix in the modifier keys.\n      b |= mod;\n\n      response = '\\x1b[M' + String.fromCharCode(b) + x + y;\n      break;\n\n    case 'mouseup':\n      // Mouse up has no indication of which button was released.\n      response = '\\x1b[M\\x23' + x + y;\n      break;\n\n    case 'mousemove':\n      if (this.mouseReport == this.MOUSE_REPORT_DRAG && e.which) {\n        // Standard button bits.\n        b = 32 + Math.min(e.which - 1, 2);\n\n        // Add 32 to indicate mouse motion.\n        b += 32;\n\n        // And mix in the modifier keys.\n        b |= mod;\n\n        response = '\\x1b[M' + String.fromCharCode(b) + x + y;\n      }\n\n      break;\n\n    case 'click':\n    case 'dblclick':\n      break;\n\n    default:\n      console.error('Unknown mouse event: ' + e.type, e);\n      break;\n  }\n\n  if (response)\n    this.terminal.io.sendString(response);\n};\n\n/**\n * Interpret a string of characters, displaying the results on the associated\n * terminal object.\n *\n * The buffer will be decoded according to the 'receive-encoding' preference.\n */\nhterm.VT.prototype.interpret = function(buf) {\n  this.parseState_.resetBuf(this.decode(buf));\n\n  while (!this.parseState_.isComplete()) {\n    var func = this.parseState_.func;\n    var pos = this.parseState_.pos;\n    var buf = this.parseState_.buf;\n\n    this.parseState_.func.call(this, this.parseState_);\n\n    if (this.parseState_.func == func && this.parseState_.pos == pos &&\n        this.parseState_.buf == buf) {\n      throw 'Parser did not alter the state!';\n    }\n  }\n};\n\n/**\n * Decode a string according to the 'receive-encoding' preference.\n */\nhterm.VT.prototype.decode = function(str) {\n  if (this.characterEncoding == 'utf-8')\n    return this.decodeUTF8(str);\n\n  return str;\n};\n\n/**\n * Encode a UTF-16 string as UTF-8.\n *\n * See also: http://en.wikipedia.org/wiki/UTF-16\n */\nhterm.VT.prototype.encodeUTF8 = function(str) {\n  return lib.encodeUTF8(str);\n};\n\n/**\n * Decode a UTF-8 string into UTF-16.\n */\nhterm.VT.prototype.decodeUTF8 = function(str) {\n  return this.utf8Decoder_.decode(str);\n};\n\n/**\n * The default parse function.\n *\n * This will scan the string for the first 1-byte control character (C0/C1\n * characters from [CTRL]).  Any plain text coming before the code will be\n * printed to the terminal, then the control character will be dispatched.\n */\nhterm.VT.prototype.parseUnknown_ = function(parseState) {\n  var self = this;\n\n  function print(str) {\n    if (self[self.GL].GL)\n      str = self[self.GL].GL(str);\n\n    if (self[self.GR].GR)\n      str = self[self.GR].GR(str);\n\n    self.terminal.print(str);\n  };\n\n  // Search for the next contiguous block of plain text.\n  var buf = parseState.peekRemainingBuf();\n  var nextControl = buf.search(this.cc1Pattern_);\n\n  if (nextControl == 0) {\n    // We've stumbled right into a control character.\n    this.dispatch('CC1', buf.substr(0, 1), parseState);\n    parseState.advance(1);\n    return;\n  }\n\n  if (nextControl == -1) {\n    // There are no control characters in this string.\n    print(buf);\n    parseState.reset();\n    return;\n  }\n\n  print(buf.substr(0, nextControl));\n  this.dispatch('CC1', buf.substr(nextControl, 1), parseState);\n  parseState.advance(nextControl + 1);\n};\n\n/**\n * Parse a Control Sequence Introducer code and dispatch it.\n *\n * See [CSI] for some useful information about these codes.\n */\nhterm.VT.prototype.parseCSI_ = function(parseState) {\n  var ch = parseState.peekChar();\n  var args = parseState.args;\n\n  if (ch >= '@' && ch <= '~') {\n    // This is the final character.\n    this.dispatch('CSI', this.leadingModifier_ + this.trailingModifier_ + ch,\n                  parseState);\n    parseState.resetParseFunction();\n\n  } else if (ch == ';') {\n    // Parameter delimeter.\n    if (this.trailingModifier_) {\n      // Parameter delimiter after the trailing modifier.  That's a paddlin'.\n      parseState.resetParseFunction();\n\n    } else {\n      if (!args.length) {\n        // They omitted the first param, we need to supply it.\n        args.push('');\n      }\n\n      args.push('');\n    }\n\n  } else if (ch >= '0' && ch <= '9') {\n    // Next byte in the current parameter.\n\n    if (this.trailingModifier_) {\n      // Numeric parameter after the trailing modifier.  That's a paddlin'.\n      parseState.resetParseFunction();\n    } else {\n      if (!args.length) {\n        args[0] = ch;\n      } else {\n        args[args.length - 1] += ch;\n      }\n    }\n\n  } else if (ch >= ' ' && ch <= '?' && ch != ':') {\n    // Modifier character.\n    if (!args.length) {\n      this.leadingModifier_ += ch;\n    } else {\n      this.trailingModifier_ += ch;\n    }\n\n  } else if (this.cc1Pattern_.test(ch)) {\n    // Control character.\n    this.dispatch('CC1', ch, parseState);\n\n  } else {\n    // Unexpected character in sequence, bail out.\n    parseState.resetParseFunction();\n  }\n\n  parseState.advance(1);\n};\n\n/**\n * Skip over the string until the next String Terminator (ST, 'ESC \\') or\n * Bell (BEL, '\\x07').\n *\n * The string is accumulated in parseState.args[0].  Make sure to reset the\n * arguments (with parseState.resetArguments) before starting the parse.\n *\n * You can detect that parsing in complete by checking that the parse\n * function has changed back to the default parse function.\n *\n * If we encounter more than maxStringSequence characters, we send back\n * the unterminated sequence to be re-parsed with the default parser function.\n *\n * @return {boolean} If true, parsing is ongoing or complete.  If false, we've\n *     exceeded the max string sequence.\n */\nhterm.VT.prototype.parseUntilStringTerminator_ = function(parseState) {\n  var buf = parseState.peekRemainingBuf();\n  var nextTerminator = buf.search(/(\\x1b\\\\|\\x07)/);\n  var args = parseState.args;\n\n  if (!args.length) {\n    args[0] = '';\n    args[1] = new Date();\n  }\n\n  if (nextTerminator == -1) {\n    // No terminator here, have to wait for the next string.\n\n    args[0] += buf;\n\n    var abortReason;\n\n    if (args[0].length > this.maxStringSequence)\n      abortReason = 'too long: ' + args[0].length;\n\n    if (args[0].indexOf('\\x1b') != -1)\n      abortReason = 'embedded escape: ' + args[0].indexOf('\\x1b');\n\n    if (new Date() - args[1] > this.oscTimeLimit_)\n      abortReason = 'timeout expired: ' + new Date() - args[1];\n\n    if (abortReason) {\n      console.log('parseUntilStringTerminator_: aborting: ' + abortReason,\n                  args[0]);\n      parseState.reset(args[0]);\n      return false;\n    }\n\n    parseState.advance(buf.length);\n    return true;\n  }\n\n  if (args[0].length + nextTerminator > this.maxStringSequence) {\n    // We found the end of the sequence, but we still think it's too long.\n    parseState.reset(args[0] + buf);\n    return false;\n  }\n\n  args[0] += buf.substr(0, nextTerminator);\n\n  parseState.resetParseFunction();\n  parseState.advance(nextTerminator +\n                     (buf.substr(nextTerminator, 1) == '\\x1b' ? 2 : 1));\n\n  return true;\n};\n\n/**\n * Dispatch to the function that handles a given CC1, ESC, or CSI or VT52 code.\n */\nhterm.VT.prototype.dispatch = function(type, code, parseState) {\n  var handler = hterm.VT[type][code];\n  if (!handler) {\n    if (this.warnUnimplemented)\n      console.warn('Unknown ' + type + ' code: ' + JSON.stringify(code));\n    return;\n  }\n\n  if (handler == hterm.VT.ignore) {\n    if (this.warnUnimplemented)\n      console.warn('Ignored ' + type + ' code: ' + JSON.stringify(code));\n    return;\n  }\n\n  if (type == 'CC1' && code > '\\x7f' && !this.enable8BitControl) {\n    // It's kind of a hack to put this here, but...\n    //\n    // If we're dispatching a 'CC1' code, and it's got the eighth bit set,\n    // but we're not supposed to handle 8-bit codes?  Just ignore it.\n    //\n    // This prevents an errant (DCS, '\\x90'), (OSC, '\\x9d'), (PM, '\\x9e') or\n    // (APC, '\\x9f') from locking up the terminal waiting for its expected\n    // (ST, '\\x9c') or (BEL, '\\x07').\n    console.warn('Ignoring 8-bit control code: 0x' +\n                 code.charCodeAt(0).toString(16));\n    return;\n  }\n\n  handler.apply(this, [parseState, code]);\n};\n\n/**\n * Set one of the ANSI defined terminal mode bits.\n *\n * Invoked in response to SM/RM.\n *\n * Expected values for code:\n *   2 - Keyboard Action Mode (AM).  Will not implement.\n *   4 - Insert Mode (IRM).\n *   12 - Send/receive (SRM).  Will not implement.\n *   20 - Automatic Newline (LNM).\n *\n * Unexpected and unimplemented values are silently ignored.\n */\nhterm.VT.prototype.setANSIMode = function(code, state) {\n  if (code == '4') {\n    this.terminal.setInsertMode(state);\n  } else if (code == '20') {\n    this.terminal.setAutoCarriageReturn(state);\n  } else if (this.warnUnimplemented) {\n    console.warn('Unimplemented ANSI Mode: ' + code);\n  }\n};\n\n/**\n * Set or reset one of the DEC Private modes.\n *\n * Invoked in response to DECSET/DECRST.\n *\n * Expected values for code:\n *      1 - Application Cursor Keys (DECCKM).\n *      2 - [!] Designate USASCII for character sets G0-G3 (DECANM), and set\n *          VT100 mode.\n *      3 - 132 Column Mode (DECCOLM).\n *      4 - [x] Smooth (Slow) Scroll (DECSCLM).\n *      5 - Reverse Video (DECSCNM).\n *      6 - Origin Mode (DECOM).\n *      7 - Wraparound Mode (DECAWM).\n *      8 - [x] Auto-repeat Keys (DECARM).\n *      9 - [!] Send Mouse X & Y on button press.\n *     10 - [x] Show toolbar (rxvt).\n *     12 - Start Blinking Cursor (att610).\n *     18 - [!] Print form feed (DECPFF).\n *     19 - [x] Set print extent to full screen (DECPEX).\n *     25 - Show Cursor (DECTCEM).\n *     30 - [!] Show scrollbar (rxvt).\n *     35 - [x] Enable font-shifting functions (rxvt).\n *     38 - [x] Enter Tektronix Mode (DECTEK).\n *     40 - Allow 80 - 132 Mode.\n *     41 - [!] more(1) fix (see curses resource).\n *     42 - [!] Enable Nation Replacement Character sets (DECNRCM).\n *     44 - [!] Turn On Margin Bell.\n *     45 - Reverse-wraparound Mode.\n *     46 - [x] Start Logging.\n *     47 - [!] Use Alternate Screen Buffer.\n *     66 - [!] Application keypad (DECNKM).\n *     67 - Backarrow key sends backspace (DECBKM).\n *   1000 - Send Mouse X & Y on button press and release.  (MOUSE_REPORT_CLICK)\n *   1001 - [!] Use Hilite Mouse Tracking.\n *   1002 - Use Cell Motion Mouse Tracking.  (MOUSE_REPORT_DRAG)\n *   1003 - [!] Use All Motion Mouse Tracking.\n *   1004 - [!] Send FocusIn/FocusOut events.\n *   1005 - [!] Enable Extended Mouse Mode.\n *   1010 - Scroll to bottom on tty output (rxvt).\n *   1011 - Scroll to bottom on key press (rxvt).\n *   1034 - [x] Interpret \"meta\" key, sets eighth bit.\n *   1035 - [x] Enable special modifiers for Alt and NumLock keys.\n *   1036 - Send ESC when Meta modifies a key.\n *   1037 - [!] Send DEL from the editing-keypad Delete key.\n *   1039 - Send ESC when Alt modifies a key.\n *   1040 - [x] Keep selection even if not highlighted.\n *   1041 - [x] Use the CLIPBOARD selection.\n *   1042 - [!] Enable Urgency window manager hint when Control-G is received.\n *   1043 - [!] Enable raising of the window when Control-G is received.\n *   1047 - [!] Use Alternate Screen Buffer.\n *   1048 - Save cursor as in DECSC.\n *   1049 - Save cursor as in DECSC and use Alternate Screen Buffer, clearing\n *          it first. (This may be disabled by the titeInhibit resource). This\n *          combines the effects of the 1047 and 1048 modes. Use this with\n *          terminfo-based applications rather than the 47 mode.\n *   1050 - [!] Set terminfo/termcap function-key mode.\n *   1051 - [x] Set Sun function-key mode.\n *   1052 - [x] Set HP function-key mode.\n *   1053 - [x] Set SCO function-key mode.\n *   1060 - [x] Set legacy keyboard emulation (X11R6).\n *   1061 - [!] Set VT220 keyboard emulation.\n *   2004 - Set bracketed paste mode.\n *\n * [!] - Not currently implemented, may be in the future.\n * [x] - Will not implement.\n */\nhterm.VT.prototype.setDECMode = function(code, state) {\n  switch (code) {\n    case '1':  // DECCKM\n      this.terminal.keyboard.applicationCursor = state;\n      break;\n\n    case '3':  // DECCOLM\n      if (this.allowColumnWidthChanges_) {\n        this.terminal.setWidth(state ? 132 : 80);\n\n        this.terminal.clearHome();\n        this.terminal.setVTScrollRegion(null, null);\n      }\n      break;\n\n    case '5':  // DECSCNM\n      this.terminal.setReverseVideo(state);\n      break;\n\n    case '6':  // DECOM\n      this.terminal.setOriginMode(state);\n      break;\n\n    case '7':  // DECAWM\n      this.terminal.setWraparound(state);\n      break;\n\n    case '12':  // att610\n      if (this.enableDec12)\n        this.terminal.setCursorBlink(state);\n      break;\n\n    case '25':  // DECTCEM\n      this.terminal.setCursorVisible(state);\n      break;\n\n    case '40':  // no-spec\n      this.terminal.allowColumnWidthChanges_ = state;\n      break;\n\n    case '45':  // no-spec\n      this.terminal.setReverseWraparound(state);\n      break;\n\n    case '67':  // DECBKM\n      this.terminal.keyboard.backspaceSendsBackspace = state;\n      break;\n\n    case '1000':  // Report on mouse clicks only.\n      this.mouseReport = (\n          state ? this.MOUSE_REPORT_CLICK : this.MOUSE_REPORT_DISABLED);\n      break;\n\n    case '1002':  // Report on mouse clicks and drags\n      this.mouseReport = (\n          state ? this.MOUSE_REPORT_DRAG : this.MOUSE_REPORT_DISABLED);\n      break;\n\n    case '1010':  // rxvt\n      this.terminal.scrollOnOutput = state;\n      break;\n\n    case '1011':  // rxvt\n      this.terminal.scrollOnKeystroke = state;\n      break;\n\n    case '1036':  // no-spec\n      this.terminal.keyboard.metaSendsEscape = state;\n      break;\n\n    case '1039':  // no-spec\n      if (state) {\n        if (!this.terminal.keyboard.previousAltSendsWhat_) {\n          this.terminal.keyboard.previousAltSendsWhat_ =\n              this.terminal.keyboard.altSendsWhat;\n          this.terminal.keyboard.altSendsWhat = 'escape';\n        }\n      } else if (this.terminal.keyboard.previousAltSendsWhat_) {\n        this.terminal.keyboard.altSendsWhat =\n            this.terminal.keyboard.previousAltSendsWhat_;\n        this.terminal.keyboard.previousAltSendsWhat_ = null;\n      }\n      break;\n\n    case '47':\n    case '1047':  // no-spec\n      this.terminal.setAlternateMode(state);\n      break;\n\n    case '1048':  // Save cursor as in DECSC.\n      this.savedState_.save();\n\n    case '1049':  // 1047 + 1048 + clear.\n      if (state) {\n        this.savedState_.save();\n        this.terminal.setAlternateMode(state);\n        this.terminal.clear();\n      } else {\n        this.terminal.setAlternateMode(state);\n        this.savedState_.restore();\n      }\n\n      break;\n\n    case '2004':  // Bracketed paste mode.\n      this.terminal.setBracketedPaste(state);\n      break;\n\n    default:\n      if (this.warnUnimplemented)\n        console.warn('Unimplemented DEC Private Mode: ' + code);\n      break;\n  }\n};\n\n/**\n * Function shared by control characters and escape sequences that are\n * ignored.\n */\nhterm.VT.ignore = function() {};\n\n/**\n * Collection of control characters expressed in a single byte.\n *\n * This includes the characters from the C0 and C1 sets (see [CTRL]) that we\n * care about.  Two byte versions of the C1 codes are defined in the\n * hterm.VT.ESC collection.\n *\n * The 'CC1' mnemonic here refers to the fact that these are one-byte Control\n * Codes.  It's only used in this source file and not defined in any of the\n * referenced documents.\n */\nhterm.VT.CC1 = {};\n\n/**\n * Collection of two-byte and three-byte sequences starting with ESC.\n */\nhterm.VT.ESC = {};\n\n/**\n * Collection of CSI (Control Sequence Introducer) sequences.\n *\n * These sequences begin with 'ESC [', and may take zero or more arguments.\n */\nhterm.VT.CSI = {};\n\n/**\n * Collection of OSC (Operating System Control) sequences.\n *\n * These sequences begin with 'ESC ]', followed by a function number and a\n * string terminated by either ST or BEL.\n */\nhterm.VT.OSC = {};\n\n/**\n * Collection of VT52 sequences.\n *\n * When in VT52 mode, other sequences are disabled.\n */\nhterm.VT.VT52 = {};\n\n/**\n * Null (NUL).\n *\n * Silently ignored.\n */\nhterm.VT.CC1['\\x00'] = function () {};\n\n/**\n * Enquiry (ENQ).\n *\n * Transmit answerback message.\n *\n * The default answerback message in xterm is an empty string, so we just\n * ignore this.\n */\nhterm.VT.CC1['\\x05'] = hterm.VT.ignore;\n\n/**\n * Ring Bell (BEL).\n */\nhterm.VT.CC1['\\x07'] = function() {\n  this.terminal.ringBell();\n};\n\n/**\n * Backspace (BS).\n *\n * Move the cursor to the left one character position, unless it is at the\n * left margin, in which case no action occurs.\n */\nhterm.VT.CC1['\\x08'] = function() {\n  this.terminal.cursorLeft(1);\n};\n\n/**\n * Horizontal Tab (HT).\n *\n * Move the cursor to the next tab stop, or to the right margin if no further\n * tab stops are present on the line.\n */\nhterm.VT.CC1['\\x09'] = function() {\n  this.terminal.forwardTabStop();\n};\n\n/**\n * Line Feed (LF).\n *\n * This code causes a line feed or a new line operation.  See Automatic\n * Newline (LNM).\n */\nhterm.VT.CC1['\\x0a'] = function() {\n  this.terminal.formFeed();\n};\n\n/**\n * Vertical Tab (VT).\n *\n * Interpreted as LF.\n */\nhterm.VT.CC1['\\x0b'] = hterm.VT.CC1['\\x0a'];\n\n/**\n * Form Feed (FF).\n *\n * Interpreted as LF.\n */\nhterm.VT.CC1['\\x0c'] = function() {\n  this.terminal.formFeed();\n};\n\n/**\n * Carriage Return (CR).\n *\n * Move cursor to the left margin on the current line.\n */\nhterm.VT.CC1['\\x0d'] = function() {\n  this.terminal.setCursorColumn(0);\n};\n\n/**\n * Shift Out (SO), aka Lock Shift 0 (LS1).\n *\n * Invoke G1 character set in GL.\n */\nhterm.VT.CC1['\\x0e'] = function() {\n  this.GL = 'G1';\n};\n\n/**\n * Shift In (SI), aka Lock Shift 0 (LS0).\n *\n * Invoke G0 character set in GL.\n */\nhterm.VT.CC1['\\x0f'] = function() {\n  this.GL = 'G0';\n};\n\n/**\n * Transmit On (XON).\n *\n * Not currently implemented.\n *\n * TODO(rginda): Implement?\n */\nhterm.VT.CC1['\\x11'] = hterm.VT.ignore;\n\n/**\n * Transmit Off (XOFF).\n *\n * Not currently implemented.\n *\n * TODO(rginda): Implement?\n */\nhterm.VT.CC1['\\x13'] = hterm.VT.ignore;\n\n/**\n * Cancel (CAN).\n *\n * If sent during a control sequence, the sequence is immediately terminated\n * and not executed.\n *\n * It also causes the error character to be displayed.\n */\nhterm.VT.CC1['\\x18'] = function(parseState) {\n  parseState.resetParseFunction();\n  this.terminal.print('?');\n};\n\n/**\n * Substitute (SUB).\n *\n * Interpreted as CAN.\n */\nhterm.VT.CC1['\\x1a'] = hterm.VT.CC1['\\x18'];\n\n/**\n * Escape (ESC).\n */\nhterm.VT.CC1['\\x1b'] = function(parseState) {\n  function parseESC(parseState) {\n    var ch = parseState.consumeChar();\n\n    if (ch == '\\x1b')\n      return;\n\n    this.dispatch('ESC', ch, parseState);\n\n    if (parseState.func == parseESC)\n      parseState.resetParseFunction();\n  };\n\n  parseState.func = parseESC;\n};\n\n/**\n * Delete (DEL).\n */\nhterm.VT.CC1['\\x7f'] = hterm.VT.ignore;\n\n// 8 bit control characters and their two byte equivalents, below...\n\n/**\n * Index (IND).\n *\n * Like newline, only keep the X position\n */\nhterm.VT.CC1['\\x84'] =\nhterm.VT.ESC['D'] = function() {\n  this.terminal.lineFeed();\n};\n\n/**\n * Next Line (NEL).\n *\n * Like newline, but doesn't add lines.\n */\nhterm.VT.CC1['\\x85'] =\nhterm.VT.ESC['E'] = function() {\n  this.terminal.setCursorColumn(0);\n  this.terminal.cursorDown(1);\n};\n\n/**\n * Horizontal Tabulation Set (HTS).\n */\nhterm.VT.CC1['\\x88'] =\nhterm.VT.ESC['H'] = function() {\n  this.terminal.setTabStop(this.terminal.getCursorColumn());\n};\n\n/**\n * Reverse Index (RI).\n *\n * Move up one line.\n */\nhterm.VT.CC1['\\x8d'] =\nhterm.VT.ESC['M'] = function() {\n  this.terminal.reverseLineFeed();\n};\n\n/**\n * Single Shift 2 (SS2).\n *\n * Select of G2 Character Set for the next character only.\n *\n * Not currently implemented.\n */\nhterm.VT.CC1['\\x8e'] =\nhterm.VT.ESC['N'] = hterm.VT.ignore;\n\n/**\n * Single Shift 3 (SS3).\n *\n * Select of G3 Character Set for the next character only.\n *\n * Not currently implemented.\n */\nhterm.VT.CC1['\\x8f'] =\nhterm.VT.ESC['O'] = hterm.VT.ignore;\n\n/**\n * Device Control String (DCS).\n *\n * Indicate a DCS sequence.  See Device-Control functions in [XTERM].\n * Not currently implemented.\n *\n * TODO(rginda): Consider implementing DECRQSS, the rest don't seem applicable.\n */\nhterm.VT.CC1['\\x90'] =\nhterm.VT.ESC['P'] = function(parseState) {\n  parseState.resetArguments();\n  parseState.func = this.parseUntilStringTerminator_;\n};\n\n/**\n * Start of Protected Area (SPA).\n *\n * Will not implement.\n */\nhterm.VT.CC1['\\x96'] =\nhterm.VT.ESC['V'] = hterm.VT.ignore;\n\n/**\n * End of Protected Area (EPA).\n *\n * Will not implement.\n */\nhterm.VT.CC1['\\x97'] =\nhterm.VT.ESC['W'] = hterm.VT.ignore;\n\n/**\n * Start of String (SOS).\n *\n * Will not implement.\n */\nhterm.VT.CC1['\\x98'] =\nhterm.VT.ESC['X'] = hterm.VT.ignore;\n\n/**\n * Single Character Introducer (SCI, also DECID).\n *\n * Return Terminal ID.  Obsolete form of 'ESC [ c' (DA).\n */\nhterm.VT.CC1['\\x9a'] =\nhterm.VT.ESC['Z'] = function() {\n  this.terminal.io.sendString('\\x1b[?1;2c');\n};\n\n/**\n * Control Sequence Introducer (CSI).\n *\n * The lead into most escape sequences.  See [CSI].\n */\nhterm.VT.CC1['\\x9b'] =\nhterm.VT.ESC['['] = function(parseState) {\n  parseState.resetArguments();\n  this.leadingModifier_ = '';\n  this.trailingModifier_ = '';\n  parseState.func = this.parseCSI_;\n};\n\n/**\n * String Terminator (ST).\n *\n * Used to terminate DCS/OSC/PM/APC commands which may take string arguments.\n *\n * We don't directly handle it here, as it's only used to terminate other\n * sequences.  See the 'parseUntilStringTerminator_' method.\n */\nhterm.VT.CC1['\\x9c'] =\nhterm.VT.ESC['\\\\'] = hterm.VT.ignore;\n\n/**\n * Operating System Command (OSC).\n *\n * Commands relating to the operating system.\n */\nhterm.VT.CC1['\\x9d'] =\nhterm.VT.ESC[']'] = function(parseState) {\n  parseState.resetArguments();\n\n  function parseOSC(parseState) {\n    if (!this.parseUntilStringTerminator_(parseState)) {\n      // The string sequence was too long.\n      return;\n    }\n\n    if (parseState.func == parseOSC) {\n      // We're not done parsing the string yet.\n      return;\n    }\n\n    // We're done.\n    var ary = parseState.args[0].match(/^(\\d+);(.*)$/);\n    if (ary) {\n      parseState.args[0] = ary[2];\n      this.dispatch('OSC', ary[1], parseState);\n    } else {\n      console.warn('Invalid OSC: ' + JSON.stringify(parseState.args[0]));\n    }\n  };\n\n  parseState.func = parseOSC;\n};\n\n/**\n * Privacy Message (PM).\n *\n * Will not implement.\n */\nhterm.VT.CC1['\\x9e'] =\nhterm.VT.ESC['^'] = function(parseState) {\n  parseState.resetArguments();\n  parseState.func = this.parseUntilStringTerminator_;\n};\n\n/**\n * Application Program Control (APC).\n *\n * Will not implement.\n */\nhterm.VT.CC1['\\x9f'] =\nhterm.VT.ESC['_'] = function(parseState) {\n  parseState.resetArguments();\n  parseState.func = this.parseUntilStringTerminator_;\n};\n\n/**\n * ESC \\x20 - Unclear to me where these originated, possibly in xterm.\n *\n * Not currently implemented:\n *   ESC \\x20 F - Select 7 bit escape codes in responses (S7C1T).\n *   ESC \\x20 G - Select 8 bit escape codes in responses (S8C1T).\n *                NB: We currently assume S7C1T always.\n *\n * Will not implement:\n *   ESC \\x20 L - Set ANSI conformance level 1.\n *   ESC \\x20 M - Set ANSI conformance level 2.\n *   ESC \\x20 N - Set ANSI conformance level 3.\n */\nhterm.VT.ESC['\\x20'] = function(parseState) {\n  parseState.func = function(parseState) {\n    var ch = parseState.consumeChar();\n    if (this.warnUnimplemented)\n      console.warn('Unimplemented sequence: ESC 0x20 ' + ch);\n    parseState.resetParseFunction();\n  };\n};\n\n/**\n * DEC 'ESC #' sequences.\n *\n * Handled:\n *   ESC # 8 - DEC Screen Alignment Test (DECALN).\n *             Fills the terminal with 'E's.  Used liberally by vttest.\n *\n * Ignored:\n *   ESC # 3 - DEC double-height line, top half (DECDHL).\n *   ESC # 4 - DEC double-height line, bottom half (DECDHL).\n *   ESC # 5 - DEC single-width line (DECSWL).\n *   ESC # 6 - DEC double-width line (DECDWL).\n */\nhterm.VT.ESC['#'] = function(parseState) {\n  parseState.func = function(parseState) {\n    var ch = parseState.consumeChar();\n    if (ch == '8')\n      this.terminal.fill('E');\n\n    parseState.resetParseFunction();\n  };\n};\n\n/**\n * 'ESC %' sequences, character set control.  Not currently implemented.\n *\n * To be implemented (currently ignored):\n *   ESC % @ - Set ISO 8859-1 character set.\n *   ESC % G - Set UTF-8 character set.\n *\n * All other ESC # sequences are echoed to the terminal.\n *\n * TODO(rginda): Implement.\n */\nhterm.VT.ESC['%'] = function(parseState) {\n  parseState.func = function(parseState) {\n    var ch = parseState.consumeChar();\n    if (ch != '@' && ch != 'G' && this.warnUnimplemented)\n      console.warn('Unknown ESC % argument: ' + JSON.stringify(ch));\n    parseState.resetParseFunction();\n  };\n};\n\n/**\n * Character Set Selection (SCS).\n *\n *   ESC ( Ps - Set G0 character set (VT100).\n *   ESC ) Ps - Set G1 character set (VT220).\n *   ESC * Ps - Set G2 character set (VT220).\n *   ESC + Ps - Set G3 character set (VT220).\n *   ESC - Ps - Set G1 character set (VT300).\n *   ESC . Ps - Set G2 character set (VT300).\n *   ESC / Ps - Set G3 character set (VT300).\n *\n * Values for Ps are:\n *   0 - DEC Special Character and Line Drawing Set.\n *   A - United Kingdom (UK).\n *   B - United States (USASCII).\n *   4 - Dutch.\n *   C or 5 - Finnish.\n *   R - French.\n *   Q - French Canadian.\n *   K - German.\n *   Y - Italian.\n *   E or 6 - Norwegian/Danish.\n *   Z - Spanish.\n *   H or 7 - Swedish.\n *   = - Swiss.\n *\n * All other sequences are echoed to the terminal.\n *\n * TODO(rginda): Implement.\n */\nhterm.VT.ESC['('] =\nhterm.VT.ESC[')'] =\nhterm.VT.ESC['*'] =\nhterm.VT.ESC['+'] =\nhterm.VT.ESC['-'] =\nhterm.VT.ESC['.'] =\nhterm.VT.ESC['/'] = function(parseState, code) {\n  parseState.func = function(parseState) {\n    var ch = parseState.consumeChar();\n    if (ch == '\\x1b') {\n      parseState.resetParseFunction();\n      parseState.func();\n      return;\n    }\n\n    if (ch in hterm.VT.CharacterMap.maps) {\n      if (code == '(') {\n        this.G0 = hterm.VT.CharacterMap.maps[ch];\n      } else if (code == ')' || code == '-') {\n        this.G1 = hterm.VT.CharacterMap.maps[ch];\n      } else if (code == '*' || code == '.') {\n        this.G2 = hterm.VT.CharacterMap.maps[ch];\n      } else if (code == '+' || code == '/') {\n        this.G3 = hterm.VT.CharacterMap.maps[ch];\n      }\n    } else if (this.warnUnimplemented) {\n      console.log('Invalid character set for \"' + code + '\": ' + ch);\n    }\n\n    parseState.resetParseFunction();\n  };\n};\n\n/**\n * Back Index (DECBI).\n *\n * VT420 and up.  Not currently implemented.\n */\nhterm.VT.ESC['6'] = hterm.VT.ignore;\n\n/**\n * Save Cursor (DECSC).\n */\nhterm.VT.ESC['7'] = function() {\n  this.savedState_.save();\n};\n\n/**\n * Restore Cursor (DECSC).\n */\nhterm.VT.ESC['8'] = function() {\n  this.savedState_.restore();\n};\n\n/**\n * Forward Index (DECFI).\n *\n * VT210 and up.  Not currently implemented.\n */\nhterm.VT.ESC['9'] = hterm.VT.ignore;\n\n/**\n * Application keypad (DECPAM).\n */\nhterm.VT.ESC['='] = function() {\n  this.terminal.keyboard.applicationKeypad = true;\n};\n\n/**\n * Normal keypad (DECPNM).\n */\nhterm.VT.ESC['>'] = function() {\n  this.terminal.keyboard.applicationKeypad = false;\n};\n\n/**\n * Cursor to lower left corner of screen.\n *\n * Will not implement.\n *\n * This is only recognized by xterm when the hpLowerleftBugCompat resource is\n * set.\n */\nhterm.VT.ESC['F'] = hterm.VT.ignore;\n\n/**\n * Full Reset (RIS).\n */\nhterm.VT.ESC['c'] = function() {\n  this.reset();\n  this.terminal.reset();\n};\n\n/**\n * Memory lock/unlock.\n *\n * Will not implement.\n */\nhterm.VT.ESC['l'] =\nhterm.VT.ESC['m'] = hterm.VT.ignore;\n\n/**\n * Lock Shift 2 (LS2)\n *\n * Invoke the G2 Character Set as GL.\n */\nhterm.VT.ESC['n'] = function() {\n  this.GL = 'G2';\n};\n\n/**\n * Lock Shift 3 (LS3)\n *\n * Invoke the G3 Character Set as GL.\n */\nhterm.VT.ESC['o'] = function() {\n  this.GL = 'G3';\n};\n\n/**\n * Lock Shift 2, Right (LS3R)\n *\n * Invoke the G3 Character Set as GR.\n */\nhterm.VT.ESC['|'] = function() {\n  this.GR = 'G3';\n};\n\n/**\n * Lock Shift 2, Right (LS2R)\n *\n * Invoke the G2 Character Set as GR.\n */\nhterm.VT.ESC['}'] = function() {\n  this.GR = 'G2';\n};\n\n/**\n * Lock Shift 1, Right (LS1R)\n *\n * Invoke the G1 Character Set as GR.\n */\nhterm.VT.ESC['~'] = function() {\n  this.GR = 'G1';\n};\n\n/**\n * Change icon name and window title.\n *\n * We only change the window title.\n */\nhterm.VT.OSC['0'] = function(parseState) {\n  this.terminal.setWindowTitle(parseState.args[0]);\n};\n\n/**\n * Change window title.\n */\nhterm.VT.OSC['2'] = hterm.VT.OSC['0'];\n\n/**\n * Set/read color palette.\n */\nhterm.VT.OSC['4'] = function(parseState) {\n  // Args come in as a single 'index1;rgb1 ... ;indexN;rgbN' string.\n  // We split on the semicolon and iterate through the pairs.\n  var args = parseState.args[0].split(';');\n\n  var pairCount = parseInt(args.length / 2);\n  var colorPalette = this.terminal.getTextAttributes().colorPalette;\n  var responseArray = [];\n\n  for (var pairNumber = 0; pairNumber < pairCount; ++pairNumber) {\n    var colorIndex = parseInt(args[pairNumber * 2]);\n    var colorValue = args[pairNumber * 2 + 1];\n\n    if (colorIndex >= colorPalette.length)\n      continue;\n\n    if (colorValue == '?') {\n      // '?' means we should report back the current color value.\n      colorValue = lib.colors.rgbToX11(colorPalette[colorIndex]);\n      if (colorValue)\n        responseArray.push(colorIndex + ';' + colorValue);\n\n      continue;\n    }\n\n    colorValue = lib.colors.x11ToCSS(colorValue);\n    if (colorValue)\n      colorPalette[colorIndex] = colorValue;\n  }\n\n  if (responseArray.length)\n    this.terminal.io.sendString('\\x1b]4;' + responseArray.join(';') + '\\x07');\n};\n\n/**\n * Set the cursor shape.\n *\n * Parameter is expected to be in the form \"CursorShape=number\", where number is\n * one of:\n *\n *   0 - Block\n *   1 - I-Beam\n *   2 - Underline\n *\n * This is a bit of a de-facto standard supported by iTerm 2 and Konsole.  See\n * also: DECSCUSR.\n *\n * Invalid numbers will restore the cursor to the block shape.\n */\nhterm.VT.OSC['50'] = function(parseState) {\n  var args = parseState.args[0].match(/CursorShape=(.)/i);\n  if (!args) {\n    console.warn('Could not parse OSC 50 args: ' + parseState.args[0]);\n    return;\n  }\n\n  switch (args[1]) {\n    case '1':\n      this.terminal.setCursorShape(hterm.Terminal.cursorShape.BEAM);\n      break;\n\n    case '2':\n      this.terminal.setCursorShape(hterm.Terminal.cursorShape.UNDERLINE);\n      break;\n\n    default:\n      this.terminal.setCursorShape(hterm.Terminal.cursorShape.BLOCK);\n  }\n};\n\n/**\n * Set/read system clipboard.\n *\n * Read is not implemented due to security considerations.  A remote app\n * that is able to both write and read to the clipboard could essentially\n * take over your session.\n *\n * The clipboard data will be decoded according to the 'receive-encoding'\n * preference.\n */\nhterm.VT.OSC['52'] = function(parseState) {\n  // Args come in as a single 'clipboard;b64-data' string.  The clipboard\n  // parameter is used to select which of the X clipboards to address.  Since\n  // we're not integrating with X, we treat them all the same.\n  var args = parseState.args[0].match(/^[cps01234567]*;(.*)/);\n  if (!args)\n    return;\n\n  var data = window.atob(args[1]);\n  if (data)\n    this.terminal.copyStringToClipboard(this.decode(data));\n};\n\n/**\n * Insert (blank) characters (ICH).\n */\nhterm.VT.CSI['@'] = function(parseState) {\n  this.terminal.insertSpace(parseState.iarg(0, 1));\n};\n\n/**\n * Cursor Up (CUU).\n */\nhterm.VT.CSI['A'] = function(parseState) {\n  this.terminal.cursorUp(parseState.iarg(0, 1));\n};\n\n/**\n * Cursor Down (CUD).\n */\nhterm.VT.CSI['B'] = function(parseState) {\n  this.terminal.cursorDown(parseState.iarg(0, 1));\n};\n\n/**\n * Cursor Forward (CUF).\n */\nhterm.VT.CSI['C'] = function(parseState) {\n  this.terminal.cursorRight(parseState.iarg(0, 1));\n};\n\n/**\n * Cursor Backward (CUB).\n */\nhterm.VT.CSI['D'] = function(parseState) {\n  this.terminal.cursorLeft(parseState.iarg(0, 1));\n};\n\n/**\n * Cursor Next Line (CNL).\n *\n * This is like Cursor Down, except the cursor moves to the beginning of the\n * line as well.\n */\nhterm.VT.CSI['E'] = function(parseState) {\n  this.terminal.cursorDown(parseState.iarg(0, 1));\n  this.terminal.setCursorColumn(0);\n};\n\n/**\n * Cursor Preceding Line (CPL).\n *\n * This is like Cursor Up, except the cursor moves to the beginning of the\n * line as well.\n */\nhterm.VT.CSI['F'] = function(parseState) {\n  this.terminal.cursorUp(parseState.iarg(0, 1));\n  this.terminal.setCursorColumn(0);\n};\n\n/**\n * Cursor Character Absolute (CHA).\n */\nhterm.VT.CSI['G'] = function(parseState) {\n  this.terminal.setCursorColumn(parseState.iarg(0, 1) - 1);\n};\n\n/**\n * Cursor Position (CUP).\n */\nhterm.VT.CSI['H'] = function(parseState) {\n  this.terminal.setCursorPosition(parseState.iarg(0, 1) - 1,\n                                  parseState.iarg(1, 1) - 1);\n};\n\n/**\n * Cursor Forward Tabulation (CHT).\n */\nhterm.VT.CSI['I'] = function(parseState) {\n  var count = parseState.iarg(0, 1);\n  count = lib.f.clamp(count, 1, this.terminal.screenSize.width);\n  for (var i = 0; i < count; i++) {\n    this.terminal.forwardTabStop();\n  }\n};\n\n/**\n * Erase in Display (ED, DECSED).\n */\nhterm.VT.CSI['J'] =\nhterm.VT.CSI['?J'] = function(parseState, code) {\n  var arg = parseState.args[0];\n\n  if (!arg || arg == '0') {\n      this.terminal.eraseBelow();\n  } else if (arg == '1') {\n    this.terminal.eraseAbove();\n  } else if (arg == '2') {\n    this.terminal.clear();\n  } else if (arg == '3') {\n    // The xterm docs say this means \"Erase saved lines\", but we'll just clear\n    // the display since killing the scrollback seems rude.\n    this.terminal.clear();\n  }\n};\n\n/**\n * Erase in line (EL, DECSEL).\n */\nhterm.VT.CSI['K'] =\nhterm.VT.CSI['?K'] = function(parseState, code) {\n  var arg = parseState.args[0];\n\n  if (!arg || arg == '0') {\n    this.terminal.eraseToRight();\n  } else if (arg == '1'){\n    this.terminal.eraseToLeft();\n  } else if (arg == '2') {\n    this.terminal.eraseLine();\n  }\n};\n\n/**\n * Insert Lines (IL).\n */\nhterm.VT.CSI['L'] = function(parseState) {\n  this.terminal.insertLines(parseState.iarg(0, 1));\n};\n\n/**\n * Delete Lines (DL).\n */\nhterm.VT.CSI['M'] = function(parseState) {\n  this.terminal.deleteLines(parseState.iarg(0, 1));\n};\n\n/**\n * Delete Characters (DCH).\n *\n * This command shifts the line contents left, starting at the cursor position.\n */\nhterm.VT.CSI['P'] = function(parseState) {\n  this.terminal.deleteChars(parseState.iarg(0, 1));\n};\n\n/**\n * Scroll Up (SU).\n */\nhterm.VT.CSI['S'] = function(parseState) {\n  this.terminal.vtScrollUp(parseState.iarg(0, 1));\n};\n\n/**\n * Scroll Down (SD).\n * Also 'Initiate highlight mouse tracking'.  Will not implement this part.\n */\nhterm.VT.CSI['T'] = function(parseState) {\n  if (parseState.args.length <= 1)\n    this.terminal.vtScrollDown(parseState.iarg(0, 1));\n};\n\n/**\n * Reset one or more features of the title modes to the default value.\n *\n *   ESC [ > Ps T\n *\n * Normally, \"reset\" disables the feature. It is possible to disable the\n * ability to reset features by compiling a different default for the title\n * modes into xterm.\n *\n * Ps values:\n *   0 - Do not set window/icon labels using hexadecimal.\n *   1 - Do not query window/icon labels using hexadecimal.\n *   2 - Do not set window/icon labels using UTF-8.\n *   3 - Do not query window/icon labels using UTF-8.\n *\n * Will not implement.\n */\nhterm.VT.CSI['>T'] = hterm.VT.ignore;\n\n/**\n * Erase Characters (ECH).\n */\nhterm.VT.CSI['X'] = function(parseState) {\n  this.terminal.eraseToRight(parseState.iarg(0, 1));\n};\n\n/**\n * Cursor Backward Tabulation (CBT).\n */\nhterm.VT.CSI['Z'] = function(parseState) {\n  var count = parseState.iarg(0, 1);\n  count = lib.f.clamp(count, 1, this.terminal.screenSize.width);\n  for (var i = 0; i < count; i++) {\n    this.terminal.backwardTabStop();\n  }\n};\n\n/**\n * Character Position Absolute (HPA).\n */\nhterm.VT.CSI['`'] = function(parseState) {\n  this.terminal.setCursorColumn(parseState.iarg(0, 1) - 1);\n};\n\n/**\n * Repeat the preceding graphic character.\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['b'] = hterm.VT.ignore;\n\n/**\n * Send Device Attributes (Primary DA).\n *\n * TODO(rginda): This is hardcoded to send back 'VT100 with Advanced Video\n * Option', but it may be more correct to send a VT220 response once\n * we fill out the 'Not currently implemented' parts.\n */\nhterm.VT.CSI['c'] = function(parseState) {\n  if (!parseState.args[0] || parseState.args[0] == '0') {\n    this.terminal.io.sendString('\\x1b[?1;2c');\n  }\n};\n\n/**\n * Send Device Attributes (Secondary DA).\n *\n * TODO(rginda): This is hardcoded to send back 'VT100' but it may be more\n * correct to send a VT220 response once we fill out more 'Not currently\n * implemented' parts.\n */\nhterm.VT.CSI['>c'] = function(parseState) {\n  this.terminal.io.sendString('\\x1b[>0;256;0c');\n};\n\n/**\n * Line Position Absolute (VPA).\n */\nhterm.VT.CSI['d'] = function(parseState) {\n  this.terminal.setAbsoluteCursorRow(parseState.iarg(0, 1) - 1);\n};\n\n/**\n * Horizontal and Vertical Position (HVP).\n *\n * Same as Cursor Position (CUP).\n */\nhterm.VT.CSI['f'] = hterm.VT.CSI['H'];\n\n/**\n * Tab Clear (TBC).\n */\nhterm.VT.CSI['g'] = function(parseState) {\n  if (!parseState.args[0] || parseState.args[0] == '0') {\n    // Clear tab stop at cursor.\n    this.terminal.clearTabStopAtCursor(false);\n  } else if (parseState.args[0] == '3') {\n    // Clear all tab stops.\n    this.terminal.clearAllTabStops();\n  }\n};\n\n/**\n * Set Mode (SM).\n */\nhterm.VT.CSI['h'] = function(parseState) {\n  for (var i = 0; i < parseState.args.length; i++) {\n    this.setANSIMode(parseState.args[i], true);\n  }\n};\n\n/**\n * DEC Private Mode Set (DECSET).\n */\nhterm.VT.CSI['?h'] = function(parseState) {\n  for (var i = 0; i < parseState.args.length; i++) {\n    this.setDECMode(parseState.args[i], true);\n  }\n};\n\n/**\n * Media Copy (MC).\n * Media Copy (MC, DEC Specific).\n *\n * These commands control the printer.  Will not implement.\n */\nhterm.VT.CSI['i'] =\nhterm.VT.CSI['?i'] = hterm.VT.ignore;\n\n/**\n * Reset Mode (RM).\n */\nhterm.VT.CSI['l'] = function(parseState) {\n  for (var i = 0; i < parseState.args.length; i++) {\n    this.setANSIMode(parseState.args[i], false);\n  }\n};\n\n/**\n * DEC Private Mode Reset (DECRST).\n */\nhterm.VT.CSI['?l'] = function(parseState) {\n  for (var i = 0; i < parseState.args.length; i++) {\n    this.setDECMode(parseState.args[i], false);\n  }\n};\n\n/**\n * Character Attributes (SGR).\n *\n * Iterate through the list of arguments, applying the following attribute\n * changes based on the argument value...\n *\n *    0 Normal (default).\n *    1 Bold.\n *    2 Faint.\n *    3 Italic (non-xterm).\n *    4 Underlined.\n *    5 Blink (appears as Bold).\n *    7 Inverse.\n *    8 Invisible, i.e., hidden (VT300).\n *    9 Crossed out (ECMA-48).\n *   22 Normal (neither bold nor faint).\n *   23 Not italic (non-xterm).\n *   24 Not underlined.\n *   25 Steady (not blinking).\n *   27 Positive (not inverse).\n *   28 Visible, i.e., not hidden (VT300).\n *   29 Not crossed out (ECMA-48).\n *   30 Set foreground color to Black.\n *   31 Set foreground color to Red.\n *   32 Set foreground color to Green.\n *   33 Set foreground color to Yellow.\n *   34 Set foreground color to Blue.\n *   35 Set foreground color to Magenta.\n *   36 Set foreground color to Cyan.\n *   37 Set foreground color to White.\n *   39 Set foreground color to default (original).\n *   40 Set background color to Black.\n *   41 Set background color to Red.\n *   42 Set background color to Green.\n *   43 Set background color to Yellow.\n *   44 Set background color to Blue.\n *   45 Set background color to Magenta.\n *   46 Set background color to Cyan.\n *   47 Set background color to White.\n *   49 Set background color to default (original)\n *\n * Non-xterm (italic) codes have mixed support, but are supported by both\n * gnome-terminal and rxvt and are recognized as CSI codes on Wikipedia\n * (http://en.wikipedia.org/wiki/ANSI_escape_code).\n *\n * For 16-color support, the following apply.\n *\n *   90 Set foreground color to Bright Black.\n *   91 Set foreground color to Bright Red.\n *   92 Set foreground color to Bright Green.\n *   93 Set foreground color to Bright Yellow.\n *   94 Set foreground color to Bright Blue.\n *   95 Set foreground color to Bright Magenta.\n *   96 Set foreground color to Bright Cyan.\n *   97 Set foreground color to Bright White.\n *  100 Set background color to Bright Black.\n *  101 Set background color to Bright Red.\n *  102 Set background color to Bright Green.\n *  103 Set background color to Bright Yellow.\n *  104 Set background color to Bright Blue.\n *  105 Set background color to Bright Magenta.\n *  106 Set background color to Bright Cyan.\n *  107 Set background color to Bright White.\n *\n * For 88- or 256-color support, the following apply.\n *  38 ; 5 ; P Set foreground color to P.\n *  48 ; 5 ; P Set background color to P.\n *\n *  For true color (24-bit) support, the following apply.\n *  38 ; 2 ; R ; G ; B Set foreground color to rgb(R, G, B)\n *  48 ; 2 ; R ; G ; B Set background color to rgb(R, G, B)\n *\n * Note that most terminals consider \"bold\" to be \"bold and bright\".  In\n * some documents the bold state is even referred to as bright.  We interpret\n * bold as bold-bright here too, but only when the \"bold\" setting comes before\n * the color selection.\n */\nhterm.VT.CSI['m'] = function(parseState) {\n  function get256(i) {\n    if (parseState.args.length < i + 2 || parseState.args[i + 1] != '5')\n      return null;\n\n    return parseState.iarg(i + 2, 0);\n  }\n\n  function getTrueColor(i) {\n    if (parseState.args.length < i + 5 || parseState.args[i + 1] != '2')\n      return null;\n    var r = parseState.iarg(i + 2, 0);\n    var g = parseState.iarg(i + 3, 0);\n    var b = parseState.iarg(i + 4, 0);\n\n    return 'rgb(' + r + ' ,' + g + ' ,' + b + ')';\n  }\n\n  var attrs = this.terminal.getTextAttributes();\n\n  if (!parseState.args.length) {\n    attrs.reset();\n    return;\n  }\n\n  for (var i = 0; i < parseState.args.length; i++) {\n    var arg = parseState.iarg(i, 0);\n\n    if (arg < 30) {\n      if (arg == 0) {\n        attrs.reset();\n      } else if (arg == 1) {\n        attrs.bold = true;\n      } else if (arg == 2) {\n        attrs.faint = true;\n      } else if (arg == 3) {\n        attrs.italic = true;\n      } else if (arg == 4) {\n        attrs.underline = true;\n      } else if (arg == 5) {\n        attrs.blink = true;\n      } else if (arg == 7) {  // Inverse.\n        attrs.inverse = true;\n      } else if (arg == 8) {  // Invisible.\n        attrs.invisible = true;\n      } else if (arg == 9) {\n        attrs.strikethrough = true;\n      } else if (arg == 22) {\n        attrs.bold = false;\n        attrs.faint = false;\n      } else if (arg == 23) {\n        attrs.italic = false;\n      } else if (arg == 24) {\n        attrs.underline = false;\n      } else if (arg == 25) {\n        attrs.blink = false;\n      } else if (arg == 27) {\n        attrs.inverse = false;\n      } else if (arg == 28) {\n        attrs.invisible = false;\n      } else if (arg == 29) {\n        attrs.strikethrough = false;\n      }\n\n    } else if (arg < 50) {\n      // Select fore/background color from bottom half of 16 color palette\n      // or from the 256 color palette or alternative specify color in fully\n      // qualified rgb(r, g, b) form.\n      if (arg < 38) {\n        attrs.foregroundSource = arg - 30;\n\n      } else if (arg == 38) {\n        // First check for true color definition\n        var trueColor = getTrueColor(i);\n        if (trueColor != null) {\n          attrs.foregroundSource = attrs.SRC_RGB;\n          attrs.foreground = trueColor;\n\n          i += 5;\n        } else {\n          // Check for 256 color\n          var c = get256(i);\n          if (c == null)\n            break;\n\n          i += 2;\n\n          if (c >= attrs.colorPalette.length)\n            continue;\n\n          attrs.foregroundSource = c;\n        }\n\n      } else if (arg == 39) {\n        attrs.foregroundSource = attrs.SRC_DEFAULT;\n\n      } else if (arg < 48) {\n        attrs.backgroundSource = arg - 40;\n\n      } else if (arg == 48) {\n        // First check for true color definition\n        var trueColor = getTrueColor(i);\n        if (trueColor != null) {\n          attrs.backgroundSource = attrs.SRC_RGB;\n          attrs.background = trueColor;\n\n          i += 5;\n        } else {\n          // Check for 256 color\n          var c = get256(i);\n          if (c == null)\n            break;\n\n          i += 2;\n\n          if (c >= attrs.colorPalette.length)\n            continue;\n\n          attrs.backgroundSource = c;\n        }\n      } else {\n        attrs.backgroundSource = attrs.SRC_DEFAULT;\n      }\n\n    } else if (arg >= 90 && arg <= 97) {\n      attrs.foregroundSource = arg - 90 + 8;\n\n    } else if (arg >= 100 && arg <= 107) {\n      attrs.backgroundSource = arg - 100 + 8;\n    }\n  }\n\n  attrs.setDefaults(this.terminal.getForegroundColor(),\n                    this.terminal.getBackgroundColor());\n};\n\n/**\n * Set xterm-specific keyboard modes.\n *\n * Will not implement.\n */\nhterm.VT.CSI['>m'] = hterm.VT.ignore;\n\n/**\n * Device Status Report (DSR, DEC Specific).\n *\n * 5 - Status Report. Result (OK) is CSI 0 n\n * 6 - Report Cursor Position (CPR) [row;column]. Result is CSI r ; c R\n */\nhterm.VT.CSI['n'] = function(parseState) {\n  if (parseState.args[0] == '5') {\n    this.terminal.io.sendString('\\x1b0n');\n  } else if (parseState.args[0] == '6') {\n    var row = this.terminal.getCursorRow() + 1;\n    var col = this.terminal.getCursorColumn() + 1;\n    this.terminal.io.sendString('\\x1b[' + row + ';' + col + 'R');\n  }\n};\n\n/**\n * Disable modifiers which may be enabled via CSI['>m'].\n *\n * Will not implement.\n */\nhterm.VT.CSI['>n'] = hterm.VT.ignore;\n\n/**\n * Device Status Report (DSR, DEC Specific).\n *\n * 6  - Report Cursor Position (CPR) [row;column] as CSI ? r ; c R\n * 15 - Report Printer status as CSI ? 1 0 n (ready) or\n *      CSI ? 1 1 n (not ready).\n * 25 - Report UDK status as CSI ? 2 0 n (unlocked) or CSI ? 2 1 n (locked).\n * 26 - Report Keyboard status as CSI ? 2 7 ; 1 ; 0 ; 0 n (North American).\n *      The last two parameters apply to VT400 & up, and denote keyboard ready\n *      and LK01 respectively.\n * 53 - Report Locator status as CSI ? 5 3 n Locator available, if compiled-in,\n *      or CSI ? 5 0 n No Locator, if not.\n */\nhterm.VT.CSI['?n'] = function(parseState) {\n  if (parseState.args[0] == '6') {\n    var row = this.terminal.getCursorRow() + 1;\n    var col = this.terminal.getCursorColumn() + 1;\n    this.terminal.io.sendString('\\x1b[' + row + ';' + col + 'R');\n  } else if (parseState.args[0] == '15') {\n    this.terminal.io.sendString('\\x1b[?11n');\n  } else if (parseState.args[0] == '25') {\n    this.terminal.io.sendString('\\x1b[?21n');\n  } else if (parseState.args[0] == '26') {\n    this.terminal.io.sendString('\\x1b[?12;1;0;0n');\n  } else if (parseState.args[0] == '53') {\n    this.terminal.io.sendString('\\x1b[?50n');\n  }\n};\n\n/**\n * This is used by xterm to decide whether to hide the pointer cursor as the\n * user types.\n *\n * Valid values for the parameter:\n *   0 - Never hide the pointer.\n *   1 - Hide if the mouse tracking mode is not enabled.\n *   2 - Always hide the pointer.\n *\n * If no parameter is given, xterm uses the default, which is 1.\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['>p'] = hterm.VT.ignore;\n\n/**\n * Soft terminal reset (DECSTR).\n */\nhterm.VT.CSI['!p'] = function() {\n  this.reset();\n  this.terminal.softReset();\n};\n\n/**\n * Request ANSI Mode (DECRQM).\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['$p'] = hterm.VT.ignore;\nhterm.VT.CSI['?$p'] = hterm.VT.ignore;\n\n/**\n * Set conformance level (DECSCL).\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['\"p'] = hterm.VT.ignore;\n\n/**\n * Load LEDs (DECLL).\n *\n * Not currently implemented.  Could be implemented as virtual LEDs overlaying\n * the terminal if anyone cares.\n */\nhterm.VT.CSI['q'] = hterm.VT.ignore;\n\n/**\n * Set cursor style (DECSCUSR, VT520).\n *\n *   0 - Blinking block.\n *   1 - Blinking block (default).\n *   2 - Steady block.\n *   3 - Blinking underline.\n *   4 - Steady underline.\n */\nhterm.VT.CSI[' q'] = function(parseState) {\n  var arg = parseState.args[0];\n\n  if (arg == '0' || arg == '1') {\n    this.terminal.setCursorShape(hterm.Terminal.cursorShape.BLOCK);\n    this.terminal.setCursorBlink(true);\n  } else if (arg == '2') {\n    this.terminal.setCursorShape(hterm.Terminal.cursorShape.BLOCK);\n    this.terminal.setCursorBlink(false);\n  } else if (arg == '3') {\n    this.terminal.setCursorShape(hterm.Terminal.cursorShape.UNDERLINE);\n    this.terminal.setCursorBlink(true);\n  } else if (arg == '4') {\n    this.terminal.setCursorShape(hterm.Terminal.cursorShape.UNDERLINE);\n    this.terminal.setCursorBlink(false);\n  } else {\n    console.warn('Unknown cursor style: ' + arg);\n  }\n};\n\n/**\n * Select character protection attribute (DECSCA).\n *\n * Will not implement.\n */\nhterm.VT.CSI['\"q'] = hterm.VT.ignore;\n\n/**\n * Set Scrolling Region (DECSTBM).\n */\nhterm.VT.CSI['r'] = function(parseState) {\n  var args = parseState.args;\n  var scrollTop = args[0] ? parseInt(args[0], 10) -1 : null;\n  var scrollBottom = args[1] ? parseInt(args[1], 10) - 1 : null;\n  this.terminal.setVTScrollRegion(scrollTop, scrollBottom);\n  this.terminal.setCursorPosition(0, 0);\n};\n\n/**\n * Restore DEC Private Mode Values.\n *\n * Will not implement.\n */\nhterm.VT.CSI['?r'] = hterm.VT.ignore;\n\n/**\n * Change Attributes in Rectangular Area (DECCARA)\n *\n * Will not implement.\n */\nhterm.VT.CSI['$r'] = hterm.VT.ignore;\n\n/**\n * Save cursor (ANSI.SYS)\n */\nhterm.VT.CSI['s'] = function() {\n  this.savedState_.save();\n};\n\n/**\n * Save DEC Private Mode Values.\n *\n * Will not implement.\n */\nhterm.VT.CSI['?s'] = hterm.VT.ignore;\n\n/**\n * Window manipulation (from dtterm, as well as extensions).\n *\n * Will not implement.\n */\nhterm.VT.CSI['t'] = hterm.VT.ignore;\n\n/**\n * Reverse Attributes in Rectangular Area (DECRARA).\n *\n * Will not implement.\n */\nhterm.VT.CSI['$t'] = hterm.VT.ignore;\n\n/**\n * Set one or more features of the title modes.\n *\n * Will not implement.\n */\nhterm.VT.CSI['>t'] = hterm.VT.ignore;\n\n/**\n * Set warning-bell volume (DECSWBV, VT520).\n *\n * Will not implement.\n */\nhterm.VT.CSI[' t'] = hterm.VT.ignore;\n\n/**\n * Restore cursor (ANSI.SYS).\n */\nhterm.VT.CSI['u'] = function() {\n  this.savedState_.restore();\n};\n\n/**\n * Set margin-bell volume (DECSMBV, VT520).\n *\n * Will not implement.\n */\nhterm.VT.CSI[' u'] = hterm.VT.ignore;\n\n/**\n * Copy Rectangular Area (DECCRA, VT400 and up).\n *\n * Will not implement.\n */\nhterm.VT.CSI['$v'] = hterm.VT.ignore;\n\n/**\n * Enable Filter Rectangle (DECEFR).\n *\n * Will not implement.\n */\nhterm.VT.CSI['\\'w'] = hterm.VT.ignore;\n\n/**\n * Request Terminal Parameters (DECREQTPARM).\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['x'] = hterm.VT.ignore;\n\n/**\n * Select Attribute Change Extent (DECSACE).\n *\n * Will not implement.\n */\nhterm.VT.CSI['*x'] = hterm.VT.ignore;\n\n/**\n * Fill Rectangular Area (DECFRA), VT420 and up.\n *\n * Will not implement.\n */\nhterm.VT.CSI['$x'] = hterm.VT.ignore;\n\n/**\n * vt_tiledata (as used by NAOhack and UnNetHack)\n * (see http://nethackwiki.com/wiki/Vt_tiledata for more info)\n *\n * Implemented as far as we care (start a glyph and end a glyph).\n */\nhterm.VT.CSI['z'] = function(parseState) {\n  if (parseState.args.length < 1)\n    return;\n  var arg = parseState.args[0];\n  if (arg == '0') {\n    // Start a glyph (one parameter, the glyph number).\n    if (parseState.args.length < 2)\n      return;\n    this.terminal.getTextAttributes().tileData = parseState.args[1];\n  } else if (arg == '1') {\n    // End a glyph.\n    this.terminal.getTextAttributes().tileData = null;\n  }\n};\n\n/**\n * Enable Locator Reporting (DECELR).\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['\\'z'] = hterm.VT.ignore;\n\n/**\n * Erase Rectangular Area (DECERA), VT400 and up.\n *\n * Will not implement.\n */\nhterm.VT.CSI['$z'] = hterm.VT.ignore;\n\n/**\n * Select Locator Events (DECSLE).\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['\\'{'] = hterm.VT.ignore;\n\n/**\n * Request Locator Position (DECRQLP).\n *\n * Not currently implemented.\n */\nhterm.VT.CSI['\\'|'] = hterm.VT.ignore;\n\n/**\n * Insert Columns (DECIC), VT420 and up.\n *\n * Will not implement.\n */\nhterm.VT.CSI[' }'] = hterm.VT.ignore;\n\n/**\n * Delete P s Columns (DECDC), VT420 and up.\n *\n * Will not implement.\n */\nhterm.VT.CSI[' ~'] = hterm.VT.ignore;\n// SOURCE FILE: hterm/js/hterm_vt_character_map.js\n// Copyright (c) 2012 The Chromium OS Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n'use strict';\n\nlib.rtdep('lib.f');\n\n/**\n * Character map object.\n *\n * @param {object} The GL mapping from input characters to output characters.\n *     The GR mapping will be automatically created.\n */\nhterm.VT.CharacterMap = function(name, glmap) {\n  /**\n   * Short name for this character set, useful for debugging.\n   */\n  this.name = name;\n\n  /**\n   * The function to call to when this map is installed in GL.\n   */\n  this.GL = null;\n\n  /**\n   * The function to call to when this map is installed in GR.\n   */\n  this.GR = null;\n\n  if (glmap)\n    this.reset(glmap);\n};\n\n/**\n * @param {object} The GL mapping from input characters to output characters.\n *     The GR mapping will be automatically created.\n */\nhterm.VT.CharacterMap.prototype.reset = function(glmap) {\n  // Set the the GL mapping.\n  this.glmap = glmap;\n\n  var glkeys = Object.keys(this.glmap).map(function(key) {\n      return '\\\\x' + lib.f.zpad(key.charCodeAt(0).toString(16));\n    });\n\n  this.glre = new RegExp('[' + glkeys.join('') + ']', 'g');\n\n  // Compute the GR mapping.\n  // This is the same as GL except all keys have their MSB set.\n  this.grmap = {};\n\n  glkeys.forEach(function(glkey) {\n      var grkey = String.fromCharCode(glkey.charCodeAt(0) & 0x80);\n      this.grmap[grkey] = this.glmap[glkey];\n    }.bind(this));\n\n  var grkeys = Object.keys(this.grmap).map(function(key) {\n      return '\\\\x' + lib.f.zpad(key.charCodeAt(0).toString(16), 2);\n    });\n\n  this.grre = new RegExp('[' + grkeys.join('') + ']', 'g');\n\n  this.GL = function(str) {\n    return str.replace(this.glre,\n                       function(ch) { return this.glmap[ch] }.bind(this));\n  }.bind(this);\n\n  this.GR = function(str) {\n    return str.replace(this.grre,\n                       function(ch) { return this.grmap[ch] }.bind(this));\n  }.bind(this);\n};\n\n/**\n * Mapping from received to display character, used depending on the active\n * VT character set.\n */\nhterm.VT.CharacterMap.maps = {};\n\n/**\n * VT100 Graphic character map.\n * http://vt100.net/docs/vt220-rm/table2-4.html\n */\nhterm.VT.CharacterMap.maps['0'] = new hterm.VT.CharacterMap(\n    'graphic', {\n      '\\x60':'\\u25c6',  // ` -> diamond\n      '\\x61':'\\u2592',  // a -> grey-box\n      '\\x62':'\\u2409',  // b -> h/t\n      '\\x63':'\\u240c',  // c -> f/f\n      '\\x64':'\\u240d',  // d -> c/r\n      '\\x65':'\\u240a',  // e -> l/f\n      '\\x66':'\\u00b0',  // f -> degree\n      '\\x67':'\\u00b1',  // g -> +/-\n      '\\x68':'\\u2424',  // h -> n/l\n      '\\x69':'\\u240b',  // i -> v/t\n      '\\x6a':'\\u2518',  // j -> bottom-right\n      '\\x6b':'\\u2510',  // k -> top-right\n      '\\x6c':'\\u250c',  // l -> top-left\n      '\\x6d':'\\u2514',  // m -> bottom-left\n      '\\x6e':'\\u253c',  // n -> line-cross\n      '\\x6f':'\\u23ba',  // o -> scan1\n      '\\x70':'\\u23bb',  // p -> scan3\n      '\\x71':'\\u2500',  // q -> scan5\n      '\\x72':'\\u23bc',  // r -> scan7\n      '\\x73':'\\u23bd',  // s -> scan9\n      '\\x74':'\\u251c',  // t -> left-tee\n      '\\x75':'\\u2524',  // u -> right-tee\n      '\\x76':'\\u2534',  // v -> bottom-tee\n      '\\x77':'\\u252c',  // w -> top-tee\n      '\\x78':'\\u2502',  // x -> vertical-line\n      '\\x79':'\\u2264',  // y -> less-equal\n      '\\x7a':'\\u2265',  // z -> greater-equal\n      '\\x7b':'\\u03c0',  // { -> pi\n      '\\x7c':'\\u2260',  // | -> not-equal\n      '\\x7d':'\\u00a3',  // } -> british-pound\n      '\\x7e':'\\u00b7',  // ~ -> dot\n    });\n\n/**\n * British character map.\n * http://vt100.net/docs/vt220-rm/table2-5.html\n */\nhterm.VT.CharacterMap.maps['A'] = new hterm.VT.CharacterMap(\n    'british', {\n      '\\x23': '\\u00a3',  // # -> british-pound\n    });\n\n/**\n * US ASCII map, no changes.\n */\nhterm.VT.CharacterMap.maps['B'] = new hterm.VT.CharacterMap(\n    'us', null);\n\n/**\n * Dutch character map.\n * http://vt100.net/docs/vt220-rm/table2-6.html\n */\nhterm.VT.CharacterMap.maps['4'] = new hterm.VT.CharacterMap(\n    'dutch', {\n      '\\x23': '\\u00a3',  // # -> british-pound\n\n      '\\x40': '\\u00be',  // @ -> 3/4\n\n      '\\x5b': '\\u0132',  // [ -> 'ij' ligature (xterm goes with \\u00ff?)\n      '\\x5c': '\\u00bd',  // \\ -> 1/2\n      '\\x5d': '\\u007c',  // ] -> vertical bar\n\n      '\\x7b': '\\u00a8',  // { -> two dots\n      '\\x7c': '\\u0066',  // | -> f\n      '\\x7d': '\\u00bc',  // } -> 1/4\n      '\\x7e': '\\u00b4',  // ~ -> acute\n    });\n\n/**\n * Finnish character map.\n * http://vt100.net/docs/vt220-rm/table2-7.html\n */\nhterm.VT.CharacterMap.maps['C'] =\nhterm.VT.CharacterMap.maps['5'] = new hterm.VT.CharacterMap(\n    'finnish', {\n      '\\x5b': '\\u00c4',  // [ -> 'A' umlaut\n      '\\x5c': '\\u00d6',  // \\ -> 'O' umlaut\n      '\\x5d': '\\u00c5',  // ] -> 'A' ring\n      '\\x5e': '\\u00dc',  // ~ -> 'u' umlaut\n\n      '\\x60': '\\u00e9',  // ` -> 'e' acute\n\n      '\\x7b': '\\u00e4',  // { -> 'a' umlaut\n      '\\x7c': '\\u00f6',  // | -> 'o' umlaut\n      '\\x7d': '\\u00e5',  // } -> 'a' ring\n      '\\x7e': '\\u00fc',  // ~ -> 'u' umlaut\n    });\n\n/**\n * French character map.\n * http://vt100.net/docs/vt220-rm/table2-8.html\n */\nhterm.VT.CharacterMap.maps['R'] = new hterm.VT.CharacterMap(\n    'french', {\n      '\\x23': '\\u00a3',  // # -> british-pound\n\n      '\\x40': '\\u00e0',  // @ -> 'a' grave\n\n      '\\x5b': '\\u00b0',  // [ -> ring\n      '\\x5c': '\\u00e7',  // \\ -> 'c' cedilla\n      '\\x5d': '\\u00a7',  // ] -> section symbol (double s)\n\n      '\\x7b': '\\u00e9',  // { -> 'e' acute\n      '\\x7c': '\\u00f9',  // | -> 'u' grave\n      '\\x7d': '\\u00e8',  // } -> 'e' grave\n      '\\x7e': '\\u00a8',  // ~ -> umlaut\n    });\n\n/**\n * French Canadian character map.\n * http://vt100.net/docs/vt220-rm/table2-9.html\n */\nhterm.VT.CharacterMap.maps['Q'] = new hterm.VT.CharacterMap(\n    'french canadian', {\n      '\\x40': '\\u00e0',  // @ -> 'a' grave\n\n      '\\x5b': '\\u00e2',  // [ -> 'a' circumflex\n      '\\x5c': '\\u00e7',  // \\ -> 'c' cedilla\n      '\\x5d': '\\u00ea',  // ] -> 'e' circumflex\n      '\\x5e': '\\u00ee',  // ^ -> 'i' circumflex\n\n      '\\x60': '\\u00f4',  // ` -> 'o' circumflex\n\n      '\\x7b': '\\u00e9',  // { -> 'e' acute\n      '\\x7c': '\\u00f9',  // | -> 'u' grave\n      '\\x7d': '\\u00e8',  // } -> 'e' grave\n      '\\x7e': '\\u00fb',  // ~ -> 'u' circumflex\n    });\n\n/**\n * German character map.\n * http://vt100.net/docs/vt220-rm/table2-10.html\n */\nhterm.VT.CharacterMap.maps['K'] = new hterm.VT.CharacterMap(\n    'german', {\n      '\\x40': '\\u00a7',  // @ -> section symbol (double s)\n\n      '\\x5b': '\\u00c4',  // [ -> 'A' umlaut\n      '\\x5c': '\\u00d6',  // \\ -> 'O' umlaut\n      '\\x5d': '\\u00dc',  // ] -> 'U' umlaut\n\n      '\\x7b': '\\u00e4',  // { -> 'a' umlaut\n      '\\x7c': '\\u00f6',  // | -> 'o' umlaut\n      '\\x7d': '\\u00fc',  // } -> 'u' umlaut\n      '\\x7e': '\\u00df',  // ~ -> eszett\n    });\n\n/**\n * Italian character map.\n * http://vt100.net/docs/vt220-rm/table2-11.html\n */\nhterm.VT.CharacterMap.maps['Y'] = new hterm.VT.CharacterMap(\n    'italian', {\n      '\\x23': '\\u00a3',  // # -> british-pound\n\n      '\\x40': '\\u00a7',  // @ -> section symbol (double s)\n\n      '\\x5b': '\\u00b0',  // [ -> ring\n      '\\x5c': '\\u00e7',  // \\ -> 'c' cedilla\n      '\\x5d': '\\u00e9',  // ] -> 'e' acute\n\n      '\\x60': '\\u00f9',  // ` -> 'u' grave\n\n      '\\x7b': '\\u00e0',  // { -> 'a' grave\n      '\\x7c': '\\u00f2',  // | -> 'o' grave\n      '\\x7d': '\\u00e8',  // } -> 'e' grave\n      '\\x7e': '\\u00ec',  // ~ -> 'i' grave\n    });\n\n/**\n * Norwegian/Danish character map.\n * http://vt100.net/docs/vt220-rm/table2-12.html\n */\nhterm.VT.CharacterMap.maps['E'] =\nhterm.VT.CharacterMap.maps['6'] = new hterm.VT.CharacterMap(\n    'norwegian/danish', {\n      '\\x40': '\\u00c4',  // @ -> 'A' umlaut\n\n      '\\x5b': '\\u00c6',  // [ -> 'AE' ligature\n      '\\x5c': '\\u00d8',  // \\ -> 'O' stroke\n      '\\x5d': '\\u00c5',  // ] -> 'A' ring\n      '\\x5e': '\\u00dc',  // ^ -> 'U' umlaut\n\n      '\\x60': '\\u00e4',  // ` -> 'a' umlaut\n\n      '\\x7b': '\\u00e6',  // { -> 'ae' ligature\n      '\\x7c': '\\u00f8',  // | -> 'o' stroke\n      '\\x7d': '\\u00e5',  // } -> 'a' ring\n      '\\x7e': '\\u00fc',  // ~ -> 'u' umlaut\n    });\n\n/**\n * Spanish character map.\n * http://vt100.net/docs/vt220-rm/table2-13.html\n */\nhterm.VT.CharacterMap.maps['Z'] = new hterm.VT.CharacterMap(\n    'spanish', {\n      '\\x23': '\\u00a3',  // # -> british-pound\n\n      '\\x40': '\\u00a7',  // @ -> section symbol (double s)\n\n      '\\x5b': '\\u00a1',  // [ -> '!' inverted\n      '\\x5c': '\\u00d1',  // \\ -> 'N' tilde\n      '\\x5d': '\\u00bf',  // ] -> '?' inverted\n\n      '\\x7b': '\\u00b0',  // { -> ring\n      '\\x7c': '\\u00f1',  // | -> 'n' tilde\n      '\\x7d': '\\u00e7',  // } -> 'c' cedilla\n    });\n\n/**\n * Swedish character map.\n * http://vt100.net/docs/vt220-rm/table2-14.html\n */\nhterm.VT.CharacterMap.maps['7'] =\nhterm.VT.CharacterMap.maps['H'] = new hterm.VT.CharacterMap(\n    'swedish', {\n      '\\x40': '\\u00c9',  // @ -> 'E' acute\n\n      '\\x5b': '\\u00c4',  // [ -> 'A' umlaut\n      '\\x5c': '\\u00d6',  // \\ -> 'O' umlaut\n      '\\x5d': '\\u00c5',  // ] -> 'A' ring\n      '\\x5e': '\\u00dc',  // ^ -> 'U' umlaut\n\n      '\\x60': '\\u00e9',  // ` -> 'e' acute\n\n      '\\x7b': '\\u00e4',  // { -> 'a' umlaut\n      '\\x7c': '\\u00f6',  // | -> 'o' umlaut\n      '\\x7d': '\\u00e5',  // } -> 'a' ring\n      '\\x7e': '\\u00fc',  // ~ -> 'u' umlaut\n    });\n\n/**\n * Swiss character map.\n * http://vt100.net/docs/vt220-rm/table2-15.html\n */\nhterm.VT.CharacterMap.maps['='] = new hterm.VT.CharacterMap(\n    'swiss', {\n      '\\x23': '\\u00f9',  // # -> 'u' grave\n\n      '\\x40': '\\u00e0',  // @ -> 'a' grave\n\n      '\\x5b': '\\u00e9',  // [ -> 'e' acute\n      '\\x5c': '\\u00e7',  // \\ -> 'c' cedilla\n      '\\x5d': '\\u00ea',  // ] -> 'e' circumflex\n      '\\x5e': '\\u00ee',  // ^ -> 'i' circumflex\n      '\\x5f': '\\u00e8',  // _ -> 'e' grave\n\n      '\\x60': '\\u00f4',  // ` -> 'o' circumflex\n\n      '\\x7b': '\\u00e4',  // { -> 'a' umlaut\n      '\\x7c': '\\u00f6',  // | -> 'o' umlaut\n      '\\x7d': '\\u00fc',  // } -> 'u' umlaut\n      '\\x7e': '\\u00fb',  // ~ -> 'u' circumflex\n    });\nlib.resource.add('hterm/audio/bell', 'audio/ogg;base64',\n'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' +\n'zinmkFLKMeUcUko5p5xTzjkIHYTKMQadgxAppRxTzinHHITMQeWcg9BBKAAAIMABACDAQig0ZEUA' +\n'ECcA4HAkz5M0SxQlSxNFzxRl1xNN15U0zTQ1UVRVyxNV1VRV2xZNVbYlTRNNTfRUVRNFVRVV05ZN' +\n'VbVtzzRl2VRV3RZV1bZl2xZ+V5Z13zNNWRZV1dZNVbV115Z9X9ZtXZg0zTQ1UVRVTRRV1VRV2zZV' +\n'17Y1UXRVUVVlWVRVWXZlWfdVV9Z9SxRV1VNN2RVVVbZV2fVtVZZ94XRVXVdl2fdVWRZ+W9eF4fZ9' +\n'4RhV1dZN19V1VZZ9YdZlYbd13yhpmmlqoqiqmiiqqqmqtm2qrq1bouiqoqrKsmeqrqzKsq+rrmzr' +\n'miiqrqiqsiyqqiyrsqz7qizrtqiquq3KsrCbrqvrtu8LwyzrunCqrq6rsuz7qizruq3rxnHrujB8' +\n'pinLpqvquqm6um7runHMtm0co6rqvirLwrDKsu/rui+0dSFRVXXdlF3jV2VZ921fd55b94WybTu/' +\n'rfvKceu60vg5z28cubZtHLNuG7+t+8bzKz9hOI6lZ5q2baqqrZuqq+uybivDrOtCUVV9XZVl3zdd' +\n'WRdu3zeOW9eNoqrquirLvrDKsjHcxm8cuzAcXds2jlvXnbKtC31jyPcJz2vbxnH7OuP2daOvDAnH' +\n'jwAAgAEHAIAAE8pAoSErAoA4AQAGIecUUxAqxSB0EFLqIKRUMQYhc05KxRyUUEpqIZTUKsYgVI5J' +\n'yJyTEkpoKZTSUgehpVBKa6GU1lJrsabUYu0gpBZKaS2U0lpqqcbUWowRYxAy56RkzkkJpbQWSmkt' +\n'c05K56CkDkJKpaQUS0otVsxJyaCj0kFIqaQSU0mptVBKa6WkFktKMbYUW24x1hxKaS2kEltJKcYU' +\n'U20txpojxiBkzknJnJMSSmktlNJa5ZiUDkJKmYOSSkqtlZJSzJyT0kFIqYOOSkkptpJKTKGU1kpK' +\n'sYVSWmwx1pxSbDWU0lpJKcaSSmwtxlpbTLV1EFoLpbQWSmmttVZraq3GUEprJaUYS0qxtRZrbjHm' +\n'GkppraQSW0mpxRZbji3GmlNrNabWam4x5hpbbT3WmnNKrdbUUo0txppjbb3VmnvvIKQWSmktlNJi' +\n'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' +\n'm2L/kruPM6Q7oz4tvDQy+bZ3HzOi+gNHA4DZEgA=' +\n''\n);\n\nlib.resource.add('hterm/concat/date', 'text/plain',\n'Fri, 03 Apr 2015 09:02:15 +0000' +\n''\n);\n\nlib.resource.add('hterm/changelog/version', 'text/plain',\n'1.54' +\n''\n);\n\nlib.resource.add('hterm/changelog/date', 'text/plain',\n'2015-03-19' +\n''\n);\n\nlib.resource.add('hterm/git/HEAD', 'text/plain',\n'5db5b0ceefff97ce8b7a97edd3f5ba6857db54cf' +\n''\n);\n","// HttPty Web Terminal\n//\n\nfunction HttPty(opts) {\n  opts = opts || {};\n\n  this.term = null;\n  this.ws = null;\n  this.elementId = opts.elementId || 'terminal';\n\n  if (opts.socketUrl) {\n    this.socketUrl = opts.socketUrl;\n  } else {\n    var protocolPrefix = (window.location.protocol === 'https:') ? 'wss:' : 'ws:';\n    this.socketUrl = protocolPrefix + '//' + location.host + '/ws';\n  }\n}\n\nHttPty.MSG = {\n  DATA: '00',\n  ERROR: '01',\n  ID: '02',\n  ALERT: '03',\n  RESIZE: '04'\n};\n\n// Create a terminal emulator\n// Start socket connection when terminal is ready\nHttPty.prototype.start = function() {\n  hterm.defaultStorage = new lib.Storage.Local();\n\n  this.term = new hterm.Terminal();\n  this.term.onTerminalReady = this._createWebSocket.bind(this);\n\n  this.term.decorate(document.getElementById(this.elementId));\n  this.term.installKeyboard();\n  this.term.setCursorPosition(0, 0);\n  this.term.setCursorVisible(true);\n\n  this.term.prefs_.set('ctrl-c-copy', true);\n  this.term.prefs_.set('ctrl-v-paste', true);\n  this.term.prefs_.set('use-default-window-copy', true);\n  this.term.prefs_.set('enable-dec12', true);\n  this.term.prefs_.set('cursor-blink', true);\n};\n\n// Close the connection\nHttPty.prototype.end = function() {\n  this.ws.close();\n};\n\n// Send line of input to tty\nHttPty.prototype.input = function(line) {\n  this._sendData(line + \"\\r\");\n};\n\n// Write line of text to terminal\nHttPty.prototype.output = function(str) {\n  this.term.io.println(str);\n};\n\n// Create web socket and event hanlers\nHttPty.prototype._createWebSocket = function() {\n  var self = this;\n\n  if(typeof WebSocket != 'function') {\n    console.error('ReferenceError: WebSocket not defined');\n    this.output('Error: Your web browser does not support WebSockets!');\n    return;\n  }\n\n  this.ws = new WebSocket(this.socketUrl);\n\n  this.ws.onopen = function() {\n    console.log(\"Web socket connected\");\n    self._initTerminal();\n    self._sendResize(self.term.screenSize.width, self.term.screenSize.height);\n    self.output(\"Terminal connected\");\n  };\n\n  this.ws.onmessage = function(event) {\n    if (typeof event.data != 'string' || event.data.length < 2) {\n      console.error('Malformed message received: ' + event.data);\n      return;\n    }\n\n    var type = event.data.substring(0, 2);\n    var data = event.data.substring(2);\n\n    switch(type) {\n      case HttPty.MSG.DATA:\n        self.term.io.writeUTF16(data);\n        break;\n      case HttPty.MSG.ALERT:\n        self.output(data);\n        break;\n      case HttPty.MSG.ID:\n        console.log('Client ID: ' + data);\n        break;\n      case HttPty.MSG.ERROR:\n        console.error('ERROR: ' + data);\n        self.output(data);\n        break;\n      default:\n        console.error('Unknown message type: ' + type);\n    }\n  };\n\n  this.ws.onerror = function(err) {\n    console.error('Web socket connection error:');\n    console.error(err);\n    self.output('Socket error!');\n    self.ws.close();\n  };\n\n  this.ws.onclose = function() {\n    self.output(\"Terminal disconnected: refresh to reconnect\");\n    console.log(\"Web socket disconnected.\");\n    self.ws.close();\n  };\n};\n\n// Configure terminal event handlers\nHttPty.prototype._initTerminal = function() {\n  var io = this.term.io.push();\n\n  io.onVTKeystroke = this._sendData.bind(this);\n  io.sendString = this._sendData.bind(this);\n  io.onTerminalResize = this._sendResize.bind(this);\n};\n\n// Encode and send message over socket\nHttPty.prototype._sendMessage = function(msg, type) {\n  this.ws.send(type + msg);\n};\n\n// Send raw input data to tty over socket\nHttPty.prototype._sendData = function(data) {\n  this._sendMessage(data, HttPty.MSG.DATA);\n};\n\n// Send terminal resize message over socket\nHttPty.prototype._sendResize = function(col, row) {\n  this._sendMessage(col + '|' + row, HttPty.MSG.RESIZE);\n};\n"]}